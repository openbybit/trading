// Code generated by MockGen. DO NOT EDIT.
// Source: listener.go

// Package mock is a generated GoMock package.
package registry

import (
	reflect "reflect"

	container "code.bydev.io/fbu/gateway/gway.git/gcore/container"
	observer "code.bydev.io/fbu/gateway/gway.git/gcore/observer"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceListener is a mock of ServiceListener interface.
type MockServiceListener struct {
	ctrl     *gomock.Controller
	recorder *MockServiceListenerMockRecorder
}

// MockServiceListenerMockRecorder is the mock recorder for MockServiceListener.
type MockServiceListenerMockRecorder struct {
	mock *MockServiceListener
}

// NewMockServiceListener creates a new mock instance.
func NewMockServiceListener(ctrl *gomock.Controller) *MockServiceListener {
	mock := &MockServiceListener{ctrl: ctrl}
	mock.recorder = &MockServiceListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceListener) EXPECT() *MockServiceListenerMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockServiceListener) Accept(e observer.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", e)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockServiceListenerMockRecorder) Accept(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockServiceListener)(nil).Accept), e)
}

// GetEventType mocks base method.
func (m *MockServiceListener) GetEventType() reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// GetEventType indicates an expected call of GetEventType.
func (mr *MockServiceListenerMockRecorder) GetEventType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventType", reflect.TypeOf((*MockServiceListener)(nil).GetEventType))
}

// GetPriority mocks base method.
func (m *MockServiceListener) GetPriority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriority")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPriority indicates an expected call of GetPriority.
func (mr *MockServiceListenerMockRecorder) GetPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriority", reflect.TypeOf((*MockServiceListener)(nil).GetPriority))
}

// GetServiceNames mocks base method.
func (m *MockServiceListener) GetServiceNames() *container.HashSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNames")
	ret0, _ := ret[0].(*container.HashSet)
	return ret0
}

// GetServiceNames indicates an expected call of GetServiceNames.
func (mr *MockServiceListenerMockRecorder) GetServiceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNames", reflect.TypeOf((*MockServiceListener)(nil).GetServiceNames))
}

// OnEvent mocks base method.
func (m *MockServiceListener) OnEvent(e observer.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnEvent", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnEvent indicates an expected call of OnEvent.
func (mr *MockServiceListenerMockRecorder) OnEvent(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEvent", reflect.TypeOf((*MockServiceListener)(nil).OnEvent), e)
}

// RemoveListener mocks base method.
func (m *MockServiceListener) RemoveListener(service ServiceMeta) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveListener", service)
}

// RemoveListener indicates an expected call of RemoveListener.
func (mr *MockServiceListenerMockRecorder) RemoveListener(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockServiceListener)(nil).RemoveListener), service)
}
