// Code generated by MockGen. DO NOT EDIT.
// Source: code.bydev.io/cht/backend-bj/user-service/buf-user-gen.git/pkg/bybit/oauth/v1 (interfaces: OAuthPrivateServiceClient)

// Package mocks is a generated GoMock package.
package masque

import (
	context "context"
	reflect "reflect"

	oauthv1 "code.bydev.io/cht/backend-bj/user-service/buf-user-gen.git/pkg/bybit/oauth/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOAuthPrivateServiceClient is a mock of OAuthPrivateServiceClient interface.
type MockOAuthPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthPrivateServiceClientMockRecorder
}

// MockOAuthPrivateServiceClientMockRecorder is the mock recorder for MockOAuthPrivateServiceClient.
type MockOAuthPrivateServiceClientMockRecorder struct {
	mock *MockOAuthPrivateServiceClient
}

// NewMockOAuthPrivateServiceClient creates a new mock instance.
func NewMockOAuthPrivateServiceClient(ctrl *gomock.Controller) *MockOAuthPrivateServiceClient {
	mock := &MockOAuthPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockOAuthPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthPrivateServiceClient) EXPECT() *MockOAuthPrivateServiceClientMockRecorder {
	return m.recorder
}

// OAuth mocks base method.
func (m *MockOAuthPrivateServiceClient) OAuth(arg0 context.Context, arg1 *oauthv1.OAuthRequest, arg2 ...grpc.CallOption) (*oauthv1.OAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OAuth", varargs...)
	ret0, _ := ret[0].(*oauthv1.OAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuth indicates an expected call of OAuth.
func (mr *MockOAuthPrivateServiceClientMockRecorder) OAuth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuth", reflect.TypeOf((*MockOAuthPrivateServiceClient)(nil).OAuth), varargs...)
}
