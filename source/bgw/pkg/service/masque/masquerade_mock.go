// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../vendor/git.bybit.com/svc/stub/pkg/svc/masquerade/svc_grpc.pb.go

// Package mock_masquerade is a generated GoMock package.
package masque

import (
	masquerade "git.bybit.com/svc/stub/pkg/svc/masquerade"
	context "context"
	reflect "reflect"

	common "git.bybit.com/svc/stub/pkg/svc/common"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMasqueradeClient is a mock of MasqueradeClient interface.
type MockMasqueradeClient struct {
	ctrl     *gomock.Controller
	recorder *MockMasqueradeClientMockRecorder
}

// MockMasqueradeClientMockRecorder is the mock recorder for MockMasqueradeClient.
type MockMasqueradeClientMockRecorder struct {
	mock *MockMasqueradeClient
}

// NewMockMasqueradeClient creates a new mock instance.
func NewMockMasqueradeClient(ctrl *gomock.Controller) *MockMasqueradeClient {
	mock := &MockMasqueradeClient{ctrl: ctrl}
	mock.recorder = &MockMasqueradeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasqueradeClient) EXPECT() *MockMasqueradeClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockMasqueradeClient) Auth(ctx context.Context, in *masquerade.TokenRequest, opts ...grpc.CallOption) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Auth", varargs...)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockMasqueradeClientMockRecorder) Auth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockMasqueradeClient)(nil).Auth), varargs...)
}

// Deauth mocks base method.
func (m *MockMasqueradeClient) Deauth(ctx context.Context, in *masquerade.DeauthRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deauth", varargs...)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deauth indicates an expected call of Deauth.
func (mr *MockMasqueradeClientMockRecorder) Deauth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deauth", reflect.TypeOf((*MockMasqueradeClient)(nil).Deauth), varargs...)
}

// RefreshToken mocks base method.
func (m *MockMasqueradeClient) RefreshToken(ctx context.Context, in *masquerade.TokenRequest, opts ...grpc.CallOption) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshToken", varargs...)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockMasqueradeClientMockRecorder) RefreshToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockMasqueradeClient)(nil).RefreshToken), varargs...)
}

// SetLogin mocks base method.
func (m *MockMasqueradeClient) SetLogin(ctx context.Context, in *masquerade.UserIDRequest, opts ...grpc.CallOption) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLogin", varargs...)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogin indicates an expected call of SetLogin.
func (mr *MockMasqueradeClientMockRecorder) SetLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogin", reflect.TypeOf((*MockMasqueradeClient)(nil).SetLogin), varargs...)
}

// UnsetLogin mocks base method.
func (m *MockMasqueradeClient) UnsetLogin(ctx context.Context, in *masquerade.UnsetLoginRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsetLogin", varargs...)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsetLogin indicates an expected call of UnsetLogin.
func (mr *MockMasqueradeClientMockRecorder) UnsetLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetLogin", reflect.TypeOf((*MockMasqueradeClient)(nil).UnsetLogin), varargs...)
}

// WeakAuth mocks base method.
func (m *MockMasqueradeClient) WeakAuth(ctx context.Context, in *masquerade.TokenRequest, opts ...grpc.CallOption) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WeakAuth", varargs...)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WeakAuth indicates an expected call of WeakAuth.
func (mr *MockMasqueradeClientMockRecorder) WeakAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeakAuth", reflect.TypeOf((*MockMasqueradeClient)(nil).WeakAuth), varargs...)
}

// MockMasqueradeServer is a mock of MasqueradeServer interface.
type MockMasqueradeServer struct {
	ctrl     *gomock.Controller
	recorder *MockMasqueradeServerMockRecorder
}

// MockMasqueradeServerMockRecorder is the mock recorder for MockMasqueradeServer.
type MockMasqueradeServerMockRecorder struct {
	mock *MockMasqueradeServer
}

// NewMockMasqueradeServer creates a new mock instance.
func NewMockMasqueradeServer(ctrl *gomock.Controller) *MockMasqueradeServer {
	mock := &MockMasqueradeServer{ctrl: ctrl}
	mock.recorder = &MockMasqueradeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasqueradeServer) EXPECT() *MockMasqueradeServerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockMasqueradeServer) Auth(arg0 context.Context, arg1 *masquerade.TokenRequest) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0, arg1)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockMasqueradeServerMockRecorder) Auth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockMasqueradeServer)(nil).Auth), arg0, arg1)
}

// Deauth mocks base method.
func (m *MockMasqueradeServer) Deauth(arg0 context.Context, arg1 *masquerade.DeauthRequest) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deauth", arg0, arg1)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deauth indicates an expected call of Deauth.
func (mr *MockMasqueradeServerMockRecorder) Deauth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deauth", reflect.TypeOf((*MockMasqueradeServer)(nil).Deauth), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockMasqueradeServer) RefreshToken(arg0 context.Context, arg1 *masquerade.TokenRequest) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockMasqueradeServerMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockMasqueradeServer)(nil).RefreshToken), arg0, arg1)
}

// SetLogin mocks base method.
func (m *MockMasqueradeServer) SetLogin(arg0 context.Context, arg1 *masquerade.UserIDRequest) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogin", arg0, arg1)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogin indicates an expected call of SetLogin.
func (mr *MockMasqueradeServerMockRecorder) SetLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogin", reflect.TypeOf((*MockMasqueradeServer)(nil).SetLogin), arg0, arg1)
}

// UnsetLogin mocks base method.
func (m *MockMasqueradeServer) UnsetLogin(arg0 context.Context, arg1 *masquerade.UnsetLoginRequest) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetLogin", arg0, arg1)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsetLogin indicates an expected call of UnsetLogin.
func (mr *MockMasqueradeServerMockRecorder) UnsetLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetLogin", reflect.TypeOf((*MockMasqueradeServer)(nil).UnsetLogin), arg0, arg1)
}

// WeakAuth mocks base method.
func (m *MockMasqueradeServer) WeakAuth(arg0 context.Context, arg1 *masquerade.TokenRequest) (*masquerade.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeakAuth", arg0, arg1)
	ret0, _ := ret[0].(*masquerade.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WeakAuth indicates an expected call of WeakAuth.
func (mr *MockMasqueradeServerMockRecorder) WeakAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeakAuth", reflect.TypeOf((*MockMasqueradeServer)(nil).WeakAuth), arg0, arg1)
}

// mustEmbedUnimplementedMasqueradeServer mocks base method.
func (m *MockMasqueradeServer) mustEmbedUnimplementedMasqueradeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMasqueradeServer")
}

// mustEmbedUnimplementedMasqueradeServer indicates an expected call of mustEmbedUnimplementedMasqueradeServer.
func (mr *MockMasqueradeServerMockRecorder) mustEmbedUnimplementedMasqueradeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMasqueradeServer", reflect.TypeOf((*MockMasqueradeServer)(nil).mustEmbedUnimplementedMasqueradeServer))
}
