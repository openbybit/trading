// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/ban/ban.go

// Package mock is a generated GoMock package.
package ban

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBanServiceIface is a mock of BanServiceIface interface.
type MockBanServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockBanServiceIfaceMockRecorder
}

// MockBanServiceIfaceMockRecorder is the mock recorder for MockBanServiceIface.
type MockBanServiceIfaceMockRecorder struct {
	mock *MockBanServiceIface
}

// NewMockBanServiceIface creates a new mock instance.
func NewMockBanServiceIface(ctrl *gomock.Controller) *MockBanServiceIface {
	mock := &MockBanServiceIface{ctrl: ctrl}
	mock.recorder = &MockBanServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanServiceIface) EXPECT() *MockBanServiceIfaceMockRecorder {
	return m.recorder
}

// CheckStatus mocks base method.
func (m *MockBanServiceIface) CheckStatus(ctx context.Context, uid int64) (*UserStatusWrap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatus", ctx, uid)
	ret0, _ := ret[0].(*UserStatusWrap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStatus indicates an expected call of CheckStatus.
func (mr *MockBanServiceIfaceMockRecorder) CheckStatus(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatus", reflect.TypeOf((*MockBanServiceIface)(nil).CheckStatus), ctx, uid)
}

// GetMemberStatus mocks base method.
func (m *MockBanServiceIface) GetMemberStatus(ctx context.Context, uid int64) (*UserStatusWrap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberStatus", ctx, uid)
	ret0, _ := ret[0].(*UserStatusWrap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberStatus indicates an expected call of GetMemberStatus.
func (mr *MockBanServiceIfaceMockRecorder) GetMemberStatus(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberStatus", reflect.TypeOf((*MockBanServiceIface)(nil).GetMemberStatus), ctx, uid)
}

// VerifyTrade mocks base method.
func (m *MockBanServiceIface) VerifyTrade(ctx context.Context, uid int64, app string, status *UserStatusWrap, opts ...Option) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uid, app, status}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyTrade", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyTrade indicates an expected call of VerifyTrade.
func (mr *MockBanServiceIfaceMockRecorder) VerifyTrade(ctx, uid, app, status interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uid, app, status}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTrade", reflect.TypeOf((*MockBanServiceIface)(nil).VerifyTrade), varargs...)
}
