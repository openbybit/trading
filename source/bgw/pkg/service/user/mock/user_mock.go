// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sh00372ml/go/pkg/mod/git.bybit.com/svc/stub/pkg/pb@v0.0.0-20230914065439-8626dcead02e/api/user/service_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	user "git.bybit.com/svc/stub/pkg/pb/api/user"
	common "git.bybit.com/svc/stub/pkg/svc/common"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAccountInternalClient is a mock of AccountInternalClient interface.
type MockAccountInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountInternalClientMockRecorder
}

// MockAccountInternalClientMockRecorder is the mock recorder for MockAccountInternalClient.
type MockAccountInternalClientMockRecorder struct {
	mock *MockAccountInternalClient
}

// NewMockAccountInternalClient creates a new mock instance.
func NewMockAccountInternalClient(ctrl *gomock.Controller) *MockAccountInternalClient {
	mock := &MockAccountInternalClient{ctrl: ctrl}
	mock.recorder = &MockAccountInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountInternalClient) EXPECT() *MockAccountInternalClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountInternalClient) GetAccount(ctx context.Context, in *user.GetAccountRequest, opts ...grpc.CallOption) (*user.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*user.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountInternalClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountInternalClient)(nil).GetAccount), varargs...)
}

// GetAccountByMember mocks base method.
func (m *MockAccountInternalClient) GetAccountByMember(ctx context.Context, in *user.GetAccountByMemberRequest, opts ...grpc.CallOption) (*user.GetAccountByMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountByMember", varargs...)
	ret0, _ := ret[0].(*user.GetAccountByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByMember indicates an expected call of GetAccountByMember.
func (mr *MockAccountInternalClientMockRecorder) GetAccountByMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByMember", reflect.TypeOf((*MockAccountInternalClient)(nil).GetAccountByMember), varargs...)
}

// GetAccountIDSByMemberID mocks base method.
func (m *MockAccountInternalClient) GetAccountIDSByMemberID(ctx context.Context, in *user.GetAccountByMemberRequest, opts ...grpc.CallOption) (*user.GetAccountByMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountIDSByMemberID", varargs...)
	ret0, _ := ret[0].(*user.GetAccountByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIDSByMemberID indicates an expected call of GetAccountIDSByMemberID.
func (mr *MockAccountInternalClientMockRecorder) GetAccountIDSByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIDSByMemberID", reflect.TypeOf((*MockAccountInternalClient)(nil).GetAccountIDSByMemberID), varargs...)
}

// GetGrayReleaseAccountByMember mocks base method.
func (m *MockAccountInternalClient) GetGrayReleaseAccountByMember(ctx context.Context, in *user.GetGrayReleaseAccountByMemberRequest, opts ...grpc.CallOption) (*user.GetGrayReleaseAccountByMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGrayReleaseAccountByMember", varargs...)
	ret0, _ := ret[0].(*user.GetGrayReleaseAccountByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrayReleaseAccountByMember indicates an expected call of GetGrayReleaseAccountByMember.
func (mr *MockAccountInternalClientMockRecorder) GetGrayReleaseAccountByMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrayReleaseAccountByMember", reflect.TypeOf((*MockAccountInternalClient)(nil).GetGrayReleaseAccountByMember), varargs...)
}

// NoticeRiskAccount mocks base method.
func (m *MockAccountInternalClient) NoticeRiskAccount(ctx context.Context, in *user.NoticeRiskAccountRequest, opts ...grpc.CallOption) (*user.NoticeRiskAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NoticeRiskAccount", varargs...)
	ret0, _ := ret[0].(*user.NoticeRiskAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NoticeRiskAccount indicates an expected call of NoticeRiskAccount.
func (mr *MockAccountInternalClientMockRecorder) NoticeRiskAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoticeRiskAccount", reflect.TypeOf((*MockAccountInternalClient)(nil).NoticeRiskAccount), varargs...)
}

// QueryAccountTag mocks base method.
func (m *MockAccountInternalClient) QueryAccountTag(ctx context.Context, in *user.QueryAccountTagRequest, opts ...grpc.CallOption) (*user.QueryAccountTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAccountTag", varargs...)
	ret0, _ := ret[0].(*user.QueryAccountTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountTag indicates an expected call of QueryAccountTag.
func (mr *MockAccountInternalClientMockRecorder) QueryAccountTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTag", reflect.TypeOf((*MockAccountInternalClient)(nil).QueryAccountTag), varargs...)
}

// SaveAccountTag mocks base method.
func (m *MockAccountInternalClient) SaveAccountTag(ctx context.Context, in *user.SaveAccountTagRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAccountTag", varargs...)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAccountTag indicates an expected call of SaveAccountTag.
func (mr *MockAccountInternalClientMockRecorder) SaveAccountTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccountTag", reflect.TypeOf((*MockAccountInternalClient)(nil).SaveAccountTag), varargs...)
}

// MockAccountInternalServer is a mock of AccountInternalServer interface.
type MockAccountInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountInternalServerMockRecorder
}

// MockAccountInternalServerMockRecorder is the mock recorder for MockAccountInternalServer.
type MockAccountInternalServerMockRecorder struct {
	mock *MockAccountInternalServer
}

// NewMockAccountInternalServer creates a new mock instance.
func NewMockAccountInternalServer(ctrl *gomock.Controller) *MockAccountInternalServer {
	mock := &MockAccountInternalServer{ctrl: ctrl}
	mock.recorder = &MockAccountInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountInternalServer) EXPECT() *MockAccountInternalServerMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountInternalServer) GetAccount(arg0 context.Context, arg1 *user.GetAccountRequest) (*user.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*user.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountInternalServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountInternalServer)(nil).GetAccount), arg0, arg1)
}

// GetAccountByMember mocks base method.
func (m *MockAccountInternalServer) GetAccountByMember(arg0 context.Context, arg1 *user.GetAccountByMemberRequest) (*user.GetAccountByMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByMember", arg0, arg1)
	ret0, _ := ret[0].(*user.GetAccountByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByMember indicates an expected call of GetAccountByMember.
func (mr *MockAccountInternalServerMockRecorder) GetAccountByMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByMember", reflect.TypeOf((*MockAccountInternalServer)(nil).GetAccountByMember), arg0, arg1)
}

// GetAccountIDSByMemberID mocks base method.
func (m *MockAccountInternalServer) GetAccountIDSByMemberID(arg0 context.Context, arg1 *user.GetAccountByMemberRequest) (*user.GetAccountByMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountIDSByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetAccountByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIDSByMemberID indicates an expected call of GetAccountIDSByMemberID.
func (mr *MockAccountInternalServerMockRecorder) GetAccountIDSByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIDSByMemberID", reflect.TypeOf((*MockAccountInternalServer)(nil).GetAccountIDSByMemberID), arg0, arg1)
}

// GetGrayReleaseAccountByMember mocks base method.
func (m *MockAccountInternalServer) GetGrayReleaseAccountByMember(arg0 context.Context, arg1 *user.GetGrayReleaseAccountByMemberRequest) (*user.GetGrayReleaseAccountByMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrayReleaseAccountByMember", arg0, arg1)
	ret0, _ := ret[0].(*user.GetGrayReleaseAccountByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrayReleaseAccountByMember indicates an expected call of GetGrayReleaseAccountByMember.
func (mr *MockAccountInternalServerMockRecorder) GetGrayReleaseAccountByMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrayReleaseAccountByMember", reflect.TypeOf((*MockAccountInternalServer)(nil).GetGrayReleaseAccountByMember), arg0, arg1)
}

// NoticeRiskAccount mocks base method.
func (m *MockAccountInternalServer) NoticeRiskAccount(arg0 context.Context, arg1 *user.NoticeRiskAccountRequest) (*user.NoticeRiskAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoticeRiskAccount", arg0, arg1)
	ret0, _ := ret[0].(*user.NoticeRiskAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NoticeRiskAccount indicates an expected call of NoticeRiskAccount.
func (mr *MockAccountInternalServerMockRecorder) NoticeRiskAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoticeRiskAccount", reflect.TypeOf((*MockAccountInternalServer)(nil).NoticeRiskAccount), arg0, arg1)
}

// QueryAccountTag mocks base method.
func (m *MockAccountInternalServer) QueryAccountTag(arg0 context.Context, arg1 *user.QueryAccountTagRequest) (*user.QueryAccountTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountTag", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryAccountTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountTag indicates an expected call of QueryAccountTag.
func (mr *MockAccountInternalServerMockRecorder) QueryAccountTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTag", reflect.TypeOf((*MockAccountInternalServer)(nil).QueryAccountTag), arg0, arg1)
}

// SaveAccountTag mocks base method.
func (m *MockAccountInternalServer) SaveAccountTag(arg0 context.Context, arg1 *user.SaveAccountTagRequest) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccountTag", arg0, arg1)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAccountTag indicates an expected call of SaveAccountTag.
func (mr *MockAccountInternalServerMockRecorder) SaveAccountTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccountTag", reflect.TypeOf((*MockAccountInternalServer)(nil).SaveAccountTag), arg0, arg1)
}

// mustEmbedUnimplementedAccountInternalServer mocks base method.
func (m *MockAccountInternalServer) mustEmbedUnimplementedAccountInternalServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccountInternalServer")
}

// mustEmbedUnimplementedAccountInternalServer indicates an expected call of mustEmbedUnimplementedAccountInternalServer.
func (mr *MockAccountInternalServerMockRecorder) mustEmbedUnimplementedAccountInternalServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccountInternalServer", reflect.TypeOf((*MockAccountInternalServer)(nil).mustEmbedUnimplementedAccountInternalServer))
}

// MockMemberInternalClient is a mock of MemberInternalClient interface.
type MockMemberInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockMemberInternalClientMockRecorder
}

// MockMemberInternalClientMockRecorder is the mock recorder for MockMemberInternalClient.
type MockMemberInternalClientMockRecorder struct {
	mock *MockMemberInternalClient
}

// NewMockMemberInternalClient creates a new mock instance.
func NewMockMemberInternalClient(ctrl *gomock.Controller) *MockMemberInternalClient {
	mock := &MockMemberInternalClient{ctrl: ctrl}
	mock.recorder = &MockMemberInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberInternalClient) EXPECT() *MockMemberInternalClientMockRecorder {
	return m.recorder
}

// AddApiKey mocks base method.
func (m *MockMemberInternalClient) AddApiKey(ctx context.Context, in *user.AddApiKeyRequest, opts ...grpc.CallOption) (*user.AddApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApiKey", varargs...)
	ret0, _ := ret[0].(*user.AddApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApiKey indicates an expected call of AddApiKey.
func (mr *MockMemberInternalClientMockRecorder) AddApiKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApiKey", reflect.TypeOf((*MockMemberInternalClient)(nil).AddApiKey), varargs...)
}

// AddBannedStrategyListByMemberID mocks base method.
func (m *MockMemberInternalClient) AddBannedStrategyListByMemberID(ctx context.Context, in *user.AddBannedStrategyByMemberIDRequest, opts ...grpc.CallOption) (*user.AddBannedStrategyByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBannedStrategyListByMemberID", varargs...)
	ret0, _ := ret[0].(*user.AddBannedStrategyByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBannedStrategyListByMemberID indicates an expected call of AddBannedStrategyListByMemberID.
func (mr *MockMemberInternalClientMockRecorder) AddBannedStrategyListByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannedStrategyListByMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).AddBannedStrategyListByMemberID), varargs...)
}

// AddOpenAPIMemberLogin mocks base method.
func (m *MockMemberInternalClient) AddOpenAPIMemberLogin(ctx context.Context, in *user.AddOpenApiMemberLoginRequest, opts ...grpc.CallOption) (*user.AddOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddOpenAPIMemberLogin", varargs...)
	ret0, _ := ret[0].(*user.AddOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOpenAPIMemberLogin indicates an expected call of AddOpenAPIMemberLogin.
func (mr *MockMemberInternalClientMockRecorder) AddOpenAPIMemberLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenAPIMemberLogin", reflect.TypeOf((*MockMemberInternalClient)(nil).AddOpenAPIMemberLogin), varargs...)
}

// BatchRegisterMember mocks base method.
func (m *MockMemberInternalClient) BatchRegisterMember(ctx context.Context, in *user.BatchRegisterMemberRequest, opts ...grpc.CallOption) (*user.BatchRegisterMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchRegisterMember", varargs...)
	ret0, _ := ret[0].(*user.BatchRegisterMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRegisterMember indicates an expected call of BatchRegisterMember.
func (mr *MockMemberInternalClientMockRecorder) BatchRegisterMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRegisterMember", reflect.TypeOf((*MockMemberInternalClient)(nil).BatchRegisterMember), varargs...)
}

// BindEmail mocks base method.
func (m *MockMemberInternalClient) BindEmail(ctx context.Context, in *user.BindEmailRequest, opts ...grpc.CallOption) (*user.BindEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindEmail", varargs...)
	ret0, _ := ret[0].(*user.BindEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindEmail indicates an expected call of BindEmail.
func (mr *MockMemberInternalClientMockRecorder) BindEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindEmail", reflect.TypeOf((*MockMemberInternalClient)(nil).BindEmail), varargs...)
}

// BindEmailByCS mocks base method.
func (m *MockMemberInternalClient) BindEmailByCS(ctx context.Context, in *user.BindEmailByCSRequest, opts ...grpc.CallOption) (*user.BindEmailByCSResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindEmailByCS", varargs...)
	ret0, _ := ret[0].(*user.BindEmailByCSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindEmailByCS indicates an expected call of BindEmailByCS.
func (mr *MockMemberInternalClientMockRecorder) BindEmailByCS(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindEmailByCS", reflect.TypeOf((*MockMemberInternalClient)(nil).BindEmailByCS), varargs...)
}

// BindGoogle2Fa mocks base method.
func (m *MockMemberInternalClient) BindGoogle2Fa(ctx context.Context, in *user.BindGoogle2FaRequest, opts ...grpc.CallOption) (*user.BindGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindGoogle2Fa", varargs...)
	ret0, _ := ret[0].(*user.BindGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindGoogle2Fa indicates an expected call of BindGoogle2Fa.
func (mr *MockMemberInternalClientMockRecorder) BindGoogle2Fa(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindGoogle2Fa", reflect.TypeOf((*MockMemberInternalClient)(nil).BindGoogle2Fa), varargs...)
}

// BindMobile mocks base method.
func (m *MockMemberInternalClient) BindMobile(ctx context.Context, in *user.BindMobileRequest, opts ...grpc.CallOption) (*user.BindMobileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindMobile", varargs...)
	ret0, _ := ret[0].(*user.BindMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindMobile indicates an expected call of BindMobile.
func (mr *MockMemberInternalClientMockRecorder) BindMobile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMobile", reflect.TypeOf((*MockMemberInternalClient)(nil).BindMobile), varargs...)
}

// ChangeEmail mocks base method.
func (m *MockMemberInternalClient) ChangeEmail(ctx context.Context, in *user.ChangeEmailRequest, opts ...grpc.CallOption) (*user.ChangeEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeEmail", varargs...)
	ret0, _ := ret[0].(*user.ChangeEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeEmail indicates an expected call of ChangeEmail.
func (mr *MockMemberInternalClientMockRecorder) ChangeEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEmail", reflect.TypeOf((*MockMemberInternalClient)(nil).ChangeEmail), varargs...)
}

// ChangeMemberPassword mocks base method.
func (m *MockMemberInternalClient) ChangeMemberPassword(ctx context.Context, in *user.ChangeMemberPasswordRequest, opts ...grpc.CallOption) (*user.ChangeMemberPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeMemberPassword", varargs...)
	ret0, _ := ret[0].(*user.ChangeMemberPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMemberPassword indicates an expected call of ChangeMemberPassword.
func (mr *MockMemberInternalClientMockRecorder) ChangeMemberPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMemberPassword", reflect.TypeOf((*MockMemberInternalClient)(nil).ChangeMemberPassword), varargs...)
}

// ChangeMobile mocks base method.
func (m *MockMemberInternalClient) ChangeMobile(ctx context.Context, in *user.ChangeMobileRequest, opts ...grpc.CallOption) (*user.ChangeMobileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeMobile", varargs...)
	ret0, _ := ret[0].(*user.ChangeMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMobile indicates an expected call of ChangeMobile.
func (mr *MockMemberInternalClientMockRecorder) ChangeMobile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMobile", reflect.TypeOf((*MockMemberInternalClient)(nil).ChangeMobile), varargs...)
}

// CheckBindEmailByCSStatus mocks base method.
func (m *MockMemberInternalClient) CheckBindEmailByCSStatus(ctx context.Context, in *user.CheckBindEmailByCSStatusRequest, opts ...grpc.CallOption) (*user.CheckBindEmailByCSStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckBindEmailByCSStatus", varargs...)
	ret0, _ := ret[0].(*user.CheckBindEmailByCSStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBindEmailByCSStatus indicates an expected call of CheckBindEmailByCSStatus.
func (mr *MockMemberInternalClientMockRecorder) CheckBindEmailByCSStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBindEmailByCSStatus", reflect.TypeOf((*MockMemberInternalClient)(nil).CheckBindEmailByCSStatus), varargs...)
}

// CreateIPWhiteList mocks base method.
func (m *MockMemberInternalClient) CreateIPWhiteList(ctx context.Context, in *user.CreateIpWhiteListRequest, opts ...grpc.CallOption) (*user.CreateIpWhiteListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIPWhiteList", varargs...)
	ret0, _ := ret[0].(*user.CreateIpWhiteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPWhiteList indicates an expected call of CreateIPWhiteList.
func (mr *MockMemberInternalClientMockRecorder) CreateIPWhiteList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPWhiteList", reflect.TypeOf((*MockMemberInternalClient)(nil).CreateIPWhiteList), varargs...)
}

// CreateSubMember mocks base method.
func (m *MockMemberInternalClient) CreateSubMember(ctx context.Context, in *user.CreateSubMemberRequest, opts ...grpc.CallOption) (*user.CreateSubMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubMember", varargs...)
	ret0, _ := ret[0].(*user.CreateSubMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubMember indicates an expected call of CreateSubMember.
func (mr *MockMemberInternalClientMockRecorder) CreateSubMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubMember", reflect.TypeOf((*MockMemberInternalClient)(nil).CreateSubMember), varargs...)
}

// CreateSubMemberAPIKey mocks base method.
func (m *MockMemberInternalClient) CreateSubMemberAPIKey(ctx context.Context, in *user.CreateSubMemberApiKeyRequest, opts ...grpc.CallOption) (*user.CreateSubMemberApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubMemberAPIKey", varargs...)
	ret0, _ := ret[0].(*user.CreateSubMemberApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubMemberAPIKey indicates an expected call of CreateSubMemberAPIKey.
func (mr *MockMemberInternalClientMockRecorder) CreateSubMemberAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubMemberAPIKey", reflect.TypeOf((*MockMemberInternalClient)(nil).CreateSubMemberAPIKey), varargs...)
}

// CsBindEmail mocks base method.
func (m *MockMemberInternalClient) CsBindEmail(ctx context.Context, in *user.CsBindEmailRequest, opts ...grpc.CallOption) (*user.CsBindEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CsBindEmail", varargs...)
	ret0, _ := ret[0].(*user.CsBindEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsBindEmail indicates an expected call of CsBindEmail.
func (mr *MockMemberInternalClientMockRecorder) CsBindEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsBindEmail", reflect.TypeOf((*MockMemberInternalClient)(nil).CsBindEmail), varargs...)
}

// CsChangeEmailV2 mocks base method.
func (m *MockMemberInternalClient) CsChangeEmailV2(ctx context.Context, in *user.CsChangeEmailRequestV2, opts ...grpc.CallOption) (*user.CsChangeEmailResponseV2, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CsChangeEmailV2", varargs...)
	ret0, _ := ret[0].(*user.CsChangeEmailResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsChangeEmailV2 indicates an expected call of CsChangeEmailV2.
func (mr *MockMemberInternalClientMockRecorder) CsChangeEmailV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsChangeEmailV2", reflect.TypeOf((*MockMemberInternalClient)(nil).CsChangeEmailV2), varargs...)
}

// CsChangeMobileV2 mocks base method.
func (m *MockMemberInternalClient) CsChangeMobileV2(ctx context.Context, in *user.CsChangeMobileRequestV2, opts ...grpc.CallOption) (*user.CsChangeMobileResponseV2, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CsChangeMobileV2", varargs...)
	ret0, _ := ret[0].(*user.CsChangeMobileResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsChangeMobileV2 indicates an expected call of CsChangeMobileV2.
func (mr *MockMemberInternalClientMockRecorder) CsChangeMobileV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsChangeMobileV2", reflect.TypeOf((*MockMemberInternalClient)(nil).CsChangeMobileV2), varargs...)
}

// CsUnbindMobile mocks base method.
func (m *MockMemberInternalClient) CsUnbindMobile(ctx context.Context, in *user.CsUnbindMobileRequest, opts ...grpc.CallOption) (*user.CsUnbindMobileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CsUnbindMobile", varargs...)
	ret0, _ := ret[0].(*user.CsUnbindMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsUnbindMobile indicates an expected call of CsUnbindMobile.
func (mr *MockMemberInternalClientMockRecorder) CsUnbindMobile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsUnbindMobile", reflect.TypeOf((*MockMemberInternalClient)(nil).CsUnbindMobile), varargs...)
}

// CsUnbindYubikey mocks base method.
func (m *MockMemberInternalClient) CsUnbindYubikey(ctx context.Context, in *user.CsUnbindYubikeyRequest, opts ...grpc.CallOption) (*user.CsUnbindYubikeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CsUnbindYubikey", varargs...)
	ret0, _ := ret[0].(*user.CsUnbindYubikeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsUnbindYubikey indicates an expected call of CsUnbindYubikey.
func (mr *MockMemberInternalClientMockRecorder) CsUnbindYubikey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsUnbindYubikey", reflect.TypeOf((*MockMemberInternalClient)(nil).CsUnbindYubikey), varargs...)
}

// DecodeRiskcomponentMsg mocks base method.
func (m *MockMemberInternalClient) DecodeRiskcomponentMsg(ctx context.Context, in *user.DecodeRiskcomponentMsgRequest, opts ...grpc.CallOption) (*user.DecodeRiskcomponentMsgResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DecodeRiskcomponentMsg", varargs...)
	ret0, _ := ret[0].(*user.DecodeRiskcomponentMsgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRiskcomponentMsg indicates an expected call of DecodeRiskcomponentMsg.
func (mr *MockMemberInternalClientMockRecorder) DecodeRiskcomponentMsg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRiskcomponentMsg", reflect.TypeOf((*MockMemberInternalClient)(nil).DecodeRiskcomponentMsg), varargs...)
}

// DeleteAPIKeyCS mocks base method.
func (m *MockMemberInternalClient) DeleteAPIKeyCS(ctx context.Context, in *user.DeleteAPIKeyCSRequest, opts ...grpc.CallOption) (*user.DeleteAPIKeyCSResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIKeyCS", varargs...)
	ret0, _ := ret[0].(*user.DeleteAPIKeyCSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIKeyCS indicates an expected call of DeleteAPIKeyCS.
func (mr *MockMemberInternalClientMockRecorder) DeleteAPIKeyCS(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKeyCS", reflect.TypeOf((*MockMemberInternalClient)(nil).DeleteAPIKeyCS), varargs...)
}

// FindPassword mocks base method.
func (m *MockMemberInternalClient) FindPassword(ctx context.Context, in *user.FindPasswordRequest, opts ...grpc.CallOption) (*user.FindPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPassword", varargs...)
	ret0, _ := ret[0].(*user.FindPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPassword indicates an expected call of FindPassword.
func (mr *MockMemberInternalClientMockRecorder) FindPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPassword", reflect.TypeOf((*MockMemberInternalClient)(nil).FindPassword), varargs...)
}

// ForceUnbindGoogle2Fa mocks base method.
func (m *MockMemberInternalClient) ForceUnbindGoogle2Fa(ctx context.Context, in *user.ForceUnbindGoogle2FaRequest, opts ...grpc.CallOption) (*user.ForceUnbindGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceUnbindGoogle2Fa", varargs...)
	ret0, _ := ret[0].(*user.ForceUnbindGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceUnbindGoogle2Fa indicates an expected call of ForceUnbindGoogle2Fa.
func (mr *MockMemberInternalClientMockRecorder) ForceUnbindGoogle2Fa(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUnbindGoogle2Fa", reflect.TypeOf((*MockMemberInternalClient)(nil).ForceUnbindGoogle2Fa), varargs...)
}

// Generate2FaInfo mocks base method.
func (m *MockMemberInternalClient) Generate2FaInfo(ctx context.Context, in *user.Generate2FaInfoRequest, opts ...grpc.CallOption) (*user.Generate2FaInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generate2FaInfo", varargs...)
	ret0, _ := ret[0].(*user.Generate2FaInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate2FaInfo indicates an expected call of Generate2FaInfo.
func (mr *MockMemberInternalClientMockRecorder) Generate2FaInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate2FaInfo", reflect.TypeOf((*MockMemberInternalClient)(nil).Generate2FaInfo), varargs...)
}

// GetAntiPhishingCodeByMemberIDs mocks base method.
func (m *MockMemberInternalClient) GetAntiPhishingCodeByMemberIDs(ctx context.Context, in *user.GetAntiPhishingCodeByMemberIDRequest, opts ...grpc.CallOption) (*user.GetAntiPhishingCodeByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAntiPhishingCodeByMemberIDs", varargs...)
	ret0, _ := ret[0].(*user.GetAntiPhishingCodeByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAntiPhishingCodeByMemberIDs indicates an expected call of GetAntiPhishingCodeByMemberIDs.
func (mr *MockMemberInternalClientMockRecorder) GetAntiPhishingCodeByMemberIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAntiPhishingCodeByMemberIDs", reflect.TypeOf((*MockMemberInternalClient)(nil).GetAntiPhishingCodeByMemberIDs), varargs...)
}

// GetApiKey mocks base method.
func (m *MockMemberInternalClient) GetApiKey(ctx context.Context, in *user.GetApiKeyRequest, opts ...grpc.CallOption) (*user.GetApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKey", varargs...)
	ret0, _ := ret[0].(*user.GetApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockMemberInternalClientMockRecorder) GetApiKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockMemberInternalClient)(nil).GetApiKey), varargs...)
}

// GetApplication mocks base method.
func (m *MockMemberInternalClient) GetApplication(ctx context.Context, in *user.GetApplicationRequest, opts ...grpc.CallOption) (*user.GetApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplication", varargs...)
	ret0, _ := ret[0].(*user.GetApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockMemberInternalClientMockRecorder) GetApplication(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockMemberInternalClient)(nil).GetApplication), varargs...)
}

// GetBannedStrategyListByMemberID mocks base method.
func (m *MockMemberInternalClient) GetBannedStrategyListByMemberID(ctx context.Context, in *user.GetBannedStrategyByMemberIDRequest, opts ...grpc.CallOption) (*user.GetBannedStrategyByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBannedStrategyListByMemberID", varargs...)
	ret0, _ := ret[0].(*user.GetBannedStrategyByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannedStrategyListByMemberID indicates an expected call of GetBannedStrategyListByMemberID.
func (mr *MockMemberInternalClientMockRecorder) GetBannedStrategyListByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannedStrategyListByMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).GetBannedStrategyListByMemberID), varargs...)
}

// GetBrokerByMemberID mocks base method.
func (m *MockMemberInternalClient) GetBrokerByMemberID(ctx context.Context, in *user.GetBrokerByMemberIDRequest, opts ...grpc.CallOption) (*user.GetBrokerByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBrokerByMemberID", varargs...)
	ret0, _ := ret[0].(*user.GetBrokerByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerByMemberID indicates an expected call of GetBrokerByMemberID.
func (mr *MockMemberInternalClientMockRecorder) GetBrokerByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerByMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).GetBrokerByMemberID), varargs...)
}

// GetBrokerIDByMemberIDs mocks base method.
func (m *MockMemberInternalClient) GetBrokerIDByMemberIDs(ctx context.Context, in *user.GetBrokerIDByMemberIDsRequest, opts ...grpc.CallOption) (*user.GetBrokerIDByMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBrokerIDByMemberIDs", varargs...)
	ret0, _ := ret[0].(*user.GetBrokerIDByMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerIDByMemberIDs indicates an expected call of GetBrokerIDByMemberIDs.
func (mr *MockMemberInternalClientMockRecorder) GetBrokerIDByMemberIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerIDByMemberIDs", reflect.TypeOf((*MockMemberInternalClient)(nil).GetBrokerIDByMemberIDs), varargs...)
}

// GetBrokerInfo mocks base method.
func (m *MockMemberInternalClient) GetBrokerInfo(ctx context.Context, in *user.GetBrokerInfoRequest, opts ...grpc.CallOption) (*user.GetBrokerInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBrokerInfo", varargs...)
	ret0, _ := ret[0].(*user.GetBrokerInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerInfo indicates an expected call of GetBrokerInfo.
func (mr *MockMemberInternalClientMockRecorder) GetBrokerInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerInfo", reflect.TypeOf((*MockMemberInternalClient)(nil).GetBrokerInfo), varargs...)
}

// GetBrokerUser mocks base method.
func (m *MockMemberInternalClient) GetBrokerUser(ctx context.Context, in *user.GetBrokerUserRequest, opts ...grpc.CallOption) (*user.GetBrokerUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBrokerUser", varargs...)
	ret0, _ := ret[0].(*user.GetBrokerUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerUser indicates an expected call of GetBrokerUser.
func (mr *MockMemberInternalClientMockRecorder) GetBrokerUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerUser", reflect.TypeOf((*MockMemberInternalClient)(nil).GetBrokerUser), varargs...)
}

// GetEmailStatus mocks base method.
func (m *MockMemberInternalClient) GetEmailStatus(ctx context.Context, in *user.GetEmailStatusRequest, opts ...grpc.CallOption) (*user.GetEmailStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailStatus", varargs...)
	ret0, _ := ret[0].(*user.GetEmailStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailStatus indicates an expected call of GetEmailStatus.
func (mr *MockMemberInternalClientMockRecorder) GetEmailStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailStatus", reflect.TypeOf((*MockMemberInternalClient)(nil).GetEmailStatus), varargs...)
}

// GetGrayFlagByMemberID mocks base method.
func (m *MockMemberInternalClient) GetGrayFlagByMemberID(ctx context.Context, in *user.GetGrayFlagByMemberIDRequest, opts ...grpc.CallOption) (*user.GetGrayFlagByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGrayFlagByMemberID", varargs...)
	ret0, _ := ret[0].(*user.GetGrayFlagByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrayFlagByMemberID indicates an expected call of GetGrayFlagByMemberID.
func (mr *MockMemberInternalClientMockRecorder) GetGrayFlagByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrayFlagByMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).GetGrayFlagByMemberID), varargs...)
}

// GetIPWhiteList mocks base method.
func (m *MockMemberInternalClient) GetIPWhiteList(ctx context.Context, in *user.GetIpWhiteListRequest, opts ...grpc.CallOption) (*user.GetIpWhiteListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIPWhiteList", varargs...)
	ret0, _ := ret[0].(*user.GetIpWhiteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPWhiteList indicates an expected call of GetIPWhiteList.
func (mr *MockMemberInternalClientMockRecorder) GetIPWhiteList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPWhiteList", reflect.TypeOf((*MockMemberInternalClient)(nil).GetIPWhiteList), varargs...)
}

// GetLoginNameChangeRecord mocks base method.
func (m *MockMemberInternalClient) GetLoginNameChangeRecord(ctx context.Context, in *user.LoginNameChangeRecordRequest, opts ...grpc.CallOption) (*user.LoginNameChangeRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoginNameChangeRecord", varargs...)
	ret0, _ := ret[0].(*user.LoginNameChangeRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginNameChangeRecord indicates an expected call of GetLoginNameChangeRecord.
func (mr *MockMemberInternalClientMockRecorder) GetLoginNameChangeRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginNameChangeRecord", reflect.TypeOf((*MockMemberInternalClient)(nil).GetLoginNameChangeRecord), varargs...)
}

// GetMT4ByMemberIDs mocks base method.
func (m *MockMemberInternalClient) GetMT4ByMemberIDs(ctx context.Context, in *user.GetMT4ByMemberIDsRequest, opts ...grpc.CallOption) (*user.GetMT4ByMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMT4ByMemberIDs", varargs...)
	ret0, _ := ret[0].(*user.GetMT4ByMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMT4ByMemberIDs indicates an expected call of GetMT4ByMemberIDs.
func (mr *MockMemberInternalClientMockRecorder) GetMT4ByMemberIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMT4ByMemberIDs", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMT4ByMemberIDs), varargs...)
}

// GetMemberIDByPII mocks base method.
func (m *MockMemberInternalClient) GetMemberIDByPII(ctx context.Context, in *user.GetMemberIDByPIIRequest, opts ...grpc.CallOption) (*user.GetMemberIDByPIIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberIDByPII", varargs...)
	ret0, _ := ret[0].(*user.GetMemberIDByPIIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberIDByPII indicates an expected call of GetMemberIDByPII.
func (mr *MockMemberInternalClientMockRecorder) GetMemberIDByPII(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberIDByPII", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberIDByPII), varargs...)
}

// GetMemberIdByMT4Id mocks base method.
func (m *MockMemberInternalClient) GetMemberIdByMT4Id(ctx context.Context, in *user.GetMemberIdByMT4IdRequest, opts ...grpc.CallOption) (*user.GetMemberIdByMT4IdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberIdByMT4Id", varargs...)
	ret0, _ := ret[0].(*user.GetMemberIdByMT4IdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberIdByMT4Id indicates an expected call of GetMemberIdByMT4Id.
func (mr *MockMemberInternalClientMockRecorder) GetMemberIdByMT4Id(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberIdByMT4Id", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberIdByMT4Id), varargs...)
}

// GetMemberInfo mocks base method.
func (m *MockMemberInternalClient) GetMemberInfo(ctx context.Context, in *user.GetMemberInfoRequest, opts ...grpc.CallOption) (*user.GetMemberInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberInfo", varargs...)
	ret0, _ := ret[0].(*user.GetMemberInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberInfo indicates an expected call of GetMemberInfo.
func (mr *MockMemberInternalClientMockRecorder) GetMemberInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberInfo", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberInfo), varargs...)
}

// GetMemberKYC mocks base method.
func (m *MockMemberInternalClient) GetMemberKYC(ctx context.Context, in *user.GetMemberKYCRequest, opts ...grpc.CallOption) (*user.GetMemberKYCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberKYC", varargs...)
	ret0, _ := ret[0].(*user.GetMemberKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberKYC indicates an expected call of GetMemberKYC.
func (mr *MockMemberInternalClientMockRecorder) GetMemberKYC(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberKYC", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberKYC), varargs...)
}

// GetMemberKYCCoinLimit mocks base method.
func (m *MockMemberInternalClient) GetMemberKYCCoinLimit(ctx context.Context, in *user.GetMemberKYCCoinLimitRequest, opts ...grpc.CallOption) (*user.GetMemberKYCCoinLimitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberKYCCoinLimit", varargs...)
	ret0, _ := ret[0].(*user.GetMemberKYCCoinLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberKYCCoinLimit indicates an expected call of GetMemberKYCCoinLimit.
func (mr *MockMemberInternalClientMockRecorder) GetMemberKYCCoinLimit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberKYCCoinLimit", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberKYCCoinLimit), varargs...)
}

// GetMemberLimitBySymbol mocks base method.
func (m *MockMemberInternalClient) GetMemberLimitBySymbol(ctx context.Context, in *user.GetMemberLimitBySymbolRequest, opts ...grpc.CallOption) (*user.GetMemberLimitBySymbolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberLimitBySymbol", varargs...)
	ret0, _ := ret[0].(*user.GetMemberLimitBySymbolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberLimitBySymbol indicates an expected call of GetMemberLimitBySymbol.
func (mr *MockMemberInternalClientMockRecorder) GetMemberLimitBySymbol(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberLimitBySymbol", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberLimitBySymbol), varargs...)
}

// GetMemberPII mocks base method.
func (m *MockMemberInternalClient) GetMemberPII(ctx context.Context, in *user.GetMemberPIIRequest, opts ...grpc.CallOption) (*user.GetMemberPIIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberPII", varargs...)
	ret0, _ := ret[0].(*user.GetMemberPIIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberPII indicates an expected call of GetMemberPII.
func (mr *MockMemberInternalClientMockRecorder) GetMemberPII(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberPII", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberPII), varargs...)
}

// GetMemberSelfBanEmailVerifyToken mocks base method.
func (m *MockMemberInternalClient) GetMemberSelfBanEmailVerifyToken(ctx context.Context, in *user.GetMemberSelfBanEmailVerifyTokenRequest, opts ...grpc.CallOption) (*user.GetMemberSelfBanEmailVerifyTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberSelfBanEmailVerifyToken", varargs...)
	ret0, _ := ret[0].(*user.GetMemberSelfBanEmailVerifyTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberSelfBanEmailVerifyToken indicates an expected call of GetMemberSelfBanEmailVerifyToken.
func (mr *MockMemberInternalClientMockRecorder) GetMemberSelfBanEmailVerifyToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberSelfBanEmailVerifyToken", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberSelfBanEmailVerifyToken), varargs...)
}

// GetMemberTypeByMemberID mocks base method.
func (m *MockMemberInternalClient) GetMemberTypeByMemberID(ctx context.Context, in *user.GetMemberTypeByMemberIDRequest, opts ...grpc.CallOption) (*user.GetMemberTypeByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberTypeByMemberID", varargs...)
	ret0, _ := ret[0].(*user.GetMemberTypeByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberTypeByMemberID indicates an expected call of GetMemberTypeByMemberID.
func (mr *MockMemberInternalClientMockRecorder) GetMemberTypeByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberTypeByMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberTypeByMemberID), varargs...)
}

// GetMemberWithdrawBanTime mocks base method.
func (m *MockMemberInternalClient) GetMemberWithdrawBanTime(ctx context.Context, in *user.GetMemberWithdrawBanTimeRequest, opts ...grpc.CallOption) (*user.GetMemberWithdrawBanTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberWithdrawBanTime", varargs...)
	ret0, _ := ret[0].(*user.GetMemberWithdrawBanTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberWithdrawBanTime indicates an expected call of GetMemberWithdrawBanTime.
func (mr *MockMemberInternalClientMockRecorder) GetMemberWithdrawBanTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberWithdrawBanTime", reflect.TypeOf((*MockMemberInternalClient)(nil).GetMemberWithdrawBanTime), varargs...)
}

// GetOpenAPIMemberLogin mocks base method.
func (m *MockMemberInternalClient) GetOpenAPIMemberLogin(ctx context.Context, in *user.GetOpenApiMemberLoginRequest, opts ...grpc.CallOption) (*user.GetOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLogin", varargs...)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLogin indicates an expected call of GetOpenAPIMemberLogin.
func (mr *MockMemberInternalClientMockRecorder) GetOpenAPIMemberLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLogin", reflect.TypeOf((*MockMemberInternalClient)(nil).GetOpenAPIMemberLogin), varargs...)
}

// GetOpenAPIMemberLoginList mocks base method.
func (m *MockMemberInternalClient) GetOpenAPIMemberLoginList(ctx context.Context, in *user.GetOpenApiMemberLoginListRequest, opts ...grpc.CallOption) (*user.GetOpenApiMemberLoginListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLoginList", varargs...)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLoginList indicates an expected call of GetOpenAPIMemberLoginList.
func (mr *MockMemberInternalClientMockRecorder) GetOpenAPIMemberLoginList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLoginList", reflect.TypeOf((*MockMemberInternalClient)(nil).GetOpenAPIMemberLoginList), varargs...)
}

// GetOpenAPIMemberLoginListV2 mocks base method.
func (m *MockMemberInternalClient) GetOpenAPIMemberLoginListV2(ctx context.Context, in *user.GetOpenApiMemberLoginListRequest, opts ...grpc.CallOption) (*user.GetOpenApiMemberLoginListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLoginListV2", varargs...)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLoginListV2 indicates an expected call of GetOpenAPIMemberLoginListV2.
func (mr *MockMemberInternalClientMockRecorder) GetOpenAPIMemberLoginListV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLoginListV2", reflect.TypeOf((*MockMemberInternalClient)(nil).GetOpenAPIMemberLoginListV2), varargs...)
}

// GetOpenAPIMemberLoginV2 mocks base method.
func (m *MockMemberInternalClient) GetOpenAPIMemberLoginV2(ctx context.Context, in *user.GetOpenApiMemberLoginRequest, opts ...grpc.CallOption) (*user.GetOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLoginV2", varargs...)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLoginV2 indicates an expected call of GetOpenAPIMemberLoginV2.
func (mr *MockMemberInternalClientMockRecorder) GetOpenAPIMemberLoginV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLoginV2", reflect.TypeOf((*MockMemberInternalClient)(nil).GetOpenAPIMemberLoginV2), varargs...)
}

// GetPaymentPasswordStatus mocks base method.
func (m *MockMemberInternalClient) GetPaymentPasswordStatus(ctx context.Context, in *user.GetPaymentPasswordStatusRequest, opts ...grpc.CallOption) (*user.GetPaymentPasswordStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPaymentPasswordStatus", varargs...)
	ret0, _ := ret[0].(*user.GetPaymentPasswordStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentPasswordStatus indicates an expected call of GetPaymentPasswordStatus.
func (mr *MockMemberInternalClientMockRecorder) GetPaymentPasswordStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentPasswordStatus", reflect.TypeOf((*MockMemberInternalClient)(nil).GetPaymentPasswordStatus), varargs...)
}

// GetRegisterEmailID mocks base method.
func (m *MockMemberInternalClient) GetRegisterEmailID(ctx context.Context, in *user.GetRegisterEmailIDRequest, opts ...grpc.CallOption) (*user.GetRegisterEmailIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisterEmailID", varargs...)
	ret0, _ := ret[0].(*user.GetRegisterEmailIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterEmailID indicates an expected call of GetRegisterEmailID.
func (mr *MockMemberInternalClientMockRecorder) GetRegisterEmailID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterEmailID", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRegisterEmailID), varargs...)
}

// GetRelationByExternal mocks base method.
func (m *MockMemberInternalClient) GetRelationByExternal(ctx context.Context, in *user.GetRelationByExternalRequest, opts ...grpc.CallOption) (*user.GetRelationByExternalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationByExternal", varargs...)
	ret0, _ := ret[0].(*user.GetRelationByExternalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationByExternal indicates an expected call of GetRelationByExternal.
func (mr *MockMemberInternalClientMockRecorder) GetRelationByExternal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationByExternal", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationByExternal), varargs...)
}

// GetRelationByMemberIDCommon mocks base method.
func (m *MockMemberInternalClient) GetRelationByMemberIDCommon(ctx context.Context, in *user.QueryRelationByMemberRequest, opts ...grpc.CallOption) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationByMemberIDCommon", varargs...)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationByMemberIDCommon indicates an expected call of GetRelationByMemberIDCommon.
func (mr *MockMemberInternalClientMockRecorder) GetRelationByMemberIDCommon(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationByMemberIDCommon", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationByMemberIDCommon), varargs...)
}

// GetRelationBySubMemberID mocks base method.
func (m *MockMemberInternalClient) GetRelationBySubMemberID(ctx context.Context, in *user.GetRelationBySubMemberIDRequest, opts ...grpc.CallOption) (*user.GetRelationBySubMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationBySubMemberID", varargs...)
	ret0, _ := ret[0].(*user.GetRelationBySubMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationBySubMemberID indicates an expected call of GetRelationBySubMemberID.
func (mr *MockMemberInternalClientMockRecorder) GetRelationBySubMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationBySubMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationBySubMemberID), varargs...)
}

// GetRelationsByExternals mocks base method.
func (m *MockMemberInternalClient) GetRelationsByExternals(ctx context.Context, in *user.GetRelationsByExternalsRequest, opts ...grpc.CallOption) (*user.GetRelationsByExternalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationsByExternals", varargs...)
	ret0, _ := ret[0].(*user.GetRelationsByExternalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsByExternals indicates an expected call of GetRelationsByExternals.
func (mr *MockMemberInternalClientMockRecorder) GetRelationsByExternals(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsByExternals", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationsByExternals), varargs...)
}

// GetRelationsByMemberID mocks base method.
func (m *MockMemberInternalClient) GetRelationsByMemberID(ctx context.Context, in *user.GetRelationsByMemberIDRequest, opts ...grpc.CallOption) (*user.GetRelationsByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationsByMemberID", varargs...)
	ret0, _ := ret[0].(*user.GetRelationsByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsByMemberID indicates an expected call of GetRelationsByMemberID.
func (mr *MockMemberInternalClientMockRecorder) GetRelationsByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsByMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationsByMemberID), varargs...)
}

// GetRelationsByMemberIDs mocks base method.
func (m *MockMemberInternalClient) GetRelationsByMemberIDs(ctx context.Context, in *user.GetRelationsByMemberIDsRequest, opts ...grpc.CallOption) (*user.GetRelationsByMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationsByMemberIDs", varargs...)
	ret0, _ := ret[0].(*user.GetRelationsByMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsByMemberIDs indicates an expected call of GetRelationsByMemberIDs.
func (mr *MockMemberInternalClientMockRecorder) GetRelationsByMemberIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsByMemberIDs", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationsByMemberIDs), varargs...)
}

// GetRelationsBySource mocks base method.
func (m *MockMemberInternalClient) GetRelationsBySource(ctx context.Context, in *user.GetRelationsBySourceRequest, opts ...grpc.CallOption) (*user.GetRelationsBySourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationsBySource", varargs...)
	ret0, _ := ret[0].(*user.GetRelationsBySourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsBySource indicates an expected call of GetRelationsBySource.
func (mr *MockMemberInternalClientMockRecorder) GetRelationsBySource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsBySource", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationsBySource), varargs...)
}

// GetRelationsBySubMemberIDs mocks base method.
func (m *MockMemberInternalClient) GetRelationsBySubMemberIDs(ctx context.Context, in *user.GetRelationsBySubMemberIDsRequest, opts ...grpc.CallOption) (*user.GetRelationsBySubMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationsBySubMemberIDs", varargs...)
	ret0, _ := ret[0].(*user.GetRelationsBySubMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsBySubMemberIDs indicates an expected call of GetRelationsBySubMemberIDs.
func (mr *MockMemberInternalClientMockRecorder) GetRelationsBySubMemberIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsBySubMemberIDs", reflect.TypeOf((*MockMemberInternalClient)(nil).GetRelationsBySubMemberIDs), varargs...)
}

// GetSecureItemBiolIdentity mocks base method.
func (m *MockMemberInternalClient) GetSecureItemBiolIdentity(ctx context.Context, in *user.GetSecureItemBiolIdentityRequest, opts ...grpc.CallOption) (*user.GetSecureItemBiolIdentityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecureItemBiolIdentity", varargs...)
	ret0, _ := ret[0].(*user.GetSecureItemBiolIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecureItemBiolIdentity indicates an expected call of GetSecureItemBiolIdentity.
func (mr *MockMemberInternalClientMockRecorder) GetSecureItemBiolIdentity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecureItemBiolIdentity", reflect.TypeOf((*MockMemberInternalClient)(nil).GetSecureItemBiolIdentity), varargs...)
}

// GetSelfUnbindRecords mocks base method.
func (m *MockMemberInternalClient) GetSelfUnbindRecords(ctx context.Context, in *user.GetSelfUnbindRecordsRequest, opts ...grpc.CallOption) (*user.GetSelfUnbindRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSelfUnbindRecords", varargs...)
	ret0, _ := ret[0].(*user.GetSelfUnbindRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfUnbindRecords indicates an expected call of GetSelfUnbindRecords.
func (mr *MockMemberInternalClientMockRecorder) GetSelfUnbindRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfUnbindRecords", reflect.TypeOf((*MockMemberInternalClient)(nil).GetSelfUnbindRecords), varargs...)
}

// GetSelfUnbindUserDoc mocks base method.
func (m *MockMemberInternalClient) GetSelfUnbindUserDoc(ctx context.Context, in *user.GetSelfUnbindUserDocRequest, opts ...grpc.CallOption) (*user.GetSelfUnbindUserDocResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSelfUnbindUserDoc", varargs...)
	ret0, _ := ret[0].(*user.GetSelfUnbindUserDocResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfUnbindUserDoc indicates an expected call of GetSelfUnbindUserDoc.
func (mr *MockMemberInternalClientMockRecorder) GetSelfUnbindUserDoc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfUnbindUserDoc", reflect.TypeOf((*MockMemberInternalClient)(nil).GetSelfUnbindUserDoc), varargs...)
}

// GetSumSubShareToken mocks base method.
func (m *MockMemberInternalClient) GetSumSubShareToken(ctx context.Context, in *user.GetSumSubShareTokenRequest, opts ...grpc.CallOption) (*user.GetSumSubShareTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSumSubShareToken", varargs...)
	ret0, _ := ret[0].(*user.GetSumSubShareTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumSubShareToken indicates an expected call of GetSumSubShareToken.
func (mr *MockMemberInternalClientMockRecorder) GetSumSubShareToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumSubShareToken", reflect.TypeOf((*MockMemberInternalClient)(nil).GetSumSubShareToken), varargs...)
}

// GetUserInfo mocks base method.
func (m *MockMemberInternalClient) GetUserInfo(ctx context.Context, in *user.UserInfoRequest, opts ...grpc.CallOption) (*user.UserInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserInfo", varargs...)
	ret0, _ := ret[0].(*user.UserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockMemberInternalClientMockRecorder) GetUserInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockMemberInternalClient)(nil).GetUserInfo), varargs...)
}

// GetUserNotifyLang mocks base method.
func (m *MockMemberInternalClient) GetUserNotifyLang(ctx context.Context, in *user.GetUserNotifyLangRequest, opts ...grpc.CallOption) (*user.GetUserNotifyLangResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserNotifyLang", varargs...)
	ret0, _ := ret[0].(*user.GetUserNotifyLangResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotifyLang indicates an expected call of GetUserNotifyLang.
func (mr *MockMemberInternalClientMockRecorder) GetUserNotifyLang(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotifyLang", reflect.TypeOf((*MockMemberInternalClient)(nil).GetUserNotifyLang), varargs...)
}

// GetVaguePII mocks base method.
func (m *MockMemberInternalClient) GetVaguePII(ctx context.Context, in *user.GetVaguePIIRequest, opts ...grpc.CallOption) (*user.GetVaguePIIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVaguePII", varargs...)
	ret0, _ := ret[0].(*user.GetVaguePIIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaguePII indicates an expected call of GetVaguePII.
func (mr *MockMemberInternalClientMockRecorder) GetVaguePII(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaguePII", reflect.TypeOf((*MockMemberInternalClient)(nil).GetVaguePII), varargs...)
}

// GetVagueSensitive mocks base method.
func (m *MockMemberInternalClient) GetVagueSensitive(ctx context.Context, in *user.GetVagueSensitiveRequest, opts ...grpc.CallOption) (*user.GetVagueSensitiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVagueSensitive", varargs...)
	ret0, _ := ret[0].(*user.GetVagueSensitiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVagueSensitive indicates an expected call of GetVagueSensitive.
func (mr *MockMemberInternalClientMockRecorder) GetVagueSensitive(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVagueSensitive", reflect.TypeOf((*MockMemberInternalClient)(nil).GetVagueSensitive), varargs...)
}

// GetWithDrawExpireTime mocks base method.
func (m *MockMemberInternalClient) GetWithDrawExpireTime(ctx context.Context, in *user.GetWithDrawExpireTimeRequest, opts ...grpc.CallOption) (*user.GetWithDrawExpireTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithDrawExpireTime", varargs...)
	ret0, _ := ret[0].(*user.GetWithDrawExpireTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithDrawExpireTime indicates an expected call of GetWithDrawExpireTime.
func (mr *MockMemberInternalClientMockRecorder) GetWithDrawExpireTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDrawExpireTime", reflect.TypeOf((*MockMemberInternalClient)(nil).GetWithDrawExpireTime), varargs...)
}

// GetYubikeyList mocks base method.
func (m *MockMemberInternalClient) GetYubikeyList(ctx context.Context, in *user.GetYubikeyListRequest, opts ...grpc.CallOption) (*user.GetYubikeyListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetYubikeyList", varargs...)
	ret0, _ := ret[0].(*user.GetYubikeyListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYubikeyList indicates an expected call of GetYubikeyList.
func (mr *MockMemberInternalClientMockRecorder) GetYubikeyList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYubikeyList", reflect.TypeOf((*MockMemberInternalClient)(nil).GetYubikeyList), varargs...)
}

// Identify mocks base method.
func (m *MockMemberInternalClient) Identify(ctx context.Context, in *user.IdentifyRequest, opts ...grpc.CallOption) (*user.IdentifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Identify", varargs...)
	ret0, _ := ret[0].(*user.IdentifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identify indicates an expected call of Identify.
func (mr *MockMemberInternalClientMockRecorder) Identify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockMemberInternalClient)(nil).Identify), varargs...)
}

// ListAPIKeyCS mocks base method.
func (m *MockMemberInternalClient) ListAPIKeyCS(ctx context.Context, in *user.ListAPIKeyCSRequest, opts ...grpc.CallOption) (*user.ListAPIKeyCSResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAPIKeyCS", varargs...)
	ret0, _ := ret[0].(*user.ListAPIKeyCSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeyCS indicates an expected call of ListAPIKeyCS.
func (mr *MockMemberInternalClientMockRecorder) ListAPIKeyCS(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeyCS", reflect.TypeOf((*MockMemberInternalClient)(nil).ListAPIKeyCS), varargs...)
}

// LoginMember mocks base method.
func (m *MockMemberInternalClient) LoginMember(ctx context.Context, in *user.LoginMemberRequest, opts ...grpc.CallOption) (*user.LoginMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginMember", varargs...)
	ret0, _ := ret[0].(*user.LoginMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginMember indicates an expected call of LoginMember.
func (mr *MockMemberInternalClientMockRecorder) LoginMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginMember", reflect.TypeOf((*MockMemberInternalClient)(nil).LoginMember), varargs...)
}

// QueryBanMembers mocks base method.
func (m *MockMemberInternalClient) QueryBanMembers(ctx context.Context, in *user.QueryBanMembersRequest, opts ...grpc.CallOption) (*user.QueryBanMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBanMembers", varargs...)
	ret0, _ := ret[0].(*user.QueryBanMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanMembers indicates an expected call of QueryBanMembers.
func (mr *MockMemberInternalClientMockRecorder) QueryBanMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanMembers", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryBanMembers), varargs...)
}

// QueryCommonMemberInfo mocks base method.
func (m *MockMemberInternalClient) QueryCommonMemberInfo(ctx context.Context, in *user.QueryCommonMemberInfoRequest, opts ...grpc.CallOption) (*user.QueryCommonMemberInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCommonMemberInfo", varargs...)
	ret0, _ := ret[0].(*user.QueryCommonMemberInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCommonMemberInfo indicates an expected call of QueryCommonMemberInfo.
func (mr *MockMemberInternalClientMockRecorder) QueryCommonMemberInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCommonMemberInfo", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryCommonMemberInfo), varargs...)
}

// QueryMemberBaseInfo mocks base method.
func (m *MockMemberInternalClient) QueryMemberBaseInfo(ctx context.Context, in *user.QueryMemberBaseInfoRequest, opts ...grpc.CallOption) (*user.QueryMemberBaseInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMemberBaseInfo", varargs...)
	ret0, _ := ret[0].(*user.QueryMemberBaseInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberBaseInfo indicates an expected call of QueryMemberBaseInfo.
func (mr *MockMemberInternalClientMockRecorder) QueryMemberBaseInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberBaseInfo", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryMemberBaseInfo), varargs...)
}

// QueryMemberLoginName mocks base method.
func (m *MockMemberInternalClient) QueryMemberLoginName(ctx context.Context, in *user.QueryMemberLoginNameRequest, opts ...grpc.CallOption) (*user.QueryMemberLoginNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMemberLoginName", varargs...)
	ret0, _ := ret[0].(*user.QueryMemberLoginNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberLoginName indicates an expected call of QueryMemberLoginName.
func (mr *MockMemberInternalClientMockRecorder) QueryMemberLoginName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberLoginName", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryMemberLoginName), varargs...)
}

// QueryMemberStatus mocks base method.
func (m *MockMemberInternalClient) QueryMemberStatus(ctx context.Context, in *user.QueryMemberStatusRequest, opts ...grpc.CallOption) (*user.QueryMemberStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMemberStatus", varargs...)
	ret0, _ := ret[0].(*user.QueryMemberStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberStatus indicates an expected call of QueryMemberStatus.
func (mr *MockMemberInternalClientMockRecorder) QueryMemberStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberStatus", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryMemberStatus), varargs...)
}

// QueryMemberTag mocks base method.
func (m *MockMemberInternalClient) QueryMemberTag(ctx context.Context, in *user.QueryMemberTagRequest, opts ...grpc.CallOption) (*user.QueryMemberTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMemberTag", varargs...)
	ret0, _ := ret[0].(*user.QueryMemberTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberTag indicates an expected call of QueryMemberTag.
func (mr *MockMemberInternalClientMockRecorder) QueryMemberTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberTag", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryMemberTag), varargs...)
}

// QueryMembersTag mocks base method.
func (m *MockMemberInternalClient) QueryMembersTag(ctx context.Context, in *user.QueryMembersTagRequest, opts ...grpc.CallOption) (*user.QueryMembersTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMembersTag", varargs...)
	ret0, _ := ret[0].(*user.QueryMembersTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMembersTag indicates an expected call of QueryMembersTag.
func (mr *MockMemberInternalClientMockRecorder) QueryMembersTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMembersTag", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryMembersTag), varargs...)
}

// QueryRelationByMember mocks base method.
func (m *MockMemberInternalClient) QueryRelationByMember(ctx context.Context, in *user.QueryRelationByMemberRequest, opts ...grpc.CallOption) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRelationByMember", varargs...)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationByMember indicates an expected call of QueryRelationByMember.
func (mr *MockMemberInternalClientMockRecorder) QueryRelationByMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationByMember", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryRelationByMember), varargs...)
}

// QueryRelationByMemberV2 mocks base method.
func (m *MockMemberInternalClient) QueryRelationByMemberV2(ctx context.Context, in *user.QueryRelationByMemberRequest, opts ...grpc.CallOption) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRelationByMemberV2", varargs...)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationByMemberV2 indicates an expected call of QueryRelationByMemberV2.
func (mr *MockMemberInternalClientMockRecorder) QueryRelationByMemberV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationByMemberV2", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryRelationByMemberV2), varargs...)
}

// QueryRelationByTargetMember mocks base method.
func (m *MockMemberInternalClient) QueryRelationByTargetMember(ctx context.Context, in *user.QueryRelationByTargetMemberRequest, opts ...grpc.CallOption) (*user.QueryRelationByTargetMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRelationByTargetMember", varargs...)
	ret0, _ := ret[0].(*user.QueryRelationByTargetMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationByTargetMember indicates an expected call of QueryRelationByTargetMember.
func (mr *MockMemberInternalClientMockRecorder) QueryRelationByTargetMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationByTargetMember", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryRelationByTargetMember), varargs...)
}

// QueryTrustRelationByMember mocks base method.
func (m *MockMemberInternalClient) QueryTrustRelationByMember(ctx context.Context, in *user.QueryRelationByMemberRequest, opts ...grpc.CallOption) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTrustRelationByMember", varargs...)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTrustRelationByMember indicates an expected call of QueryTrustRelationByMember.
func (mr *MockMemberInternalClientMockRecorder) QueryTrustRelationByMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTrustRelationByMember", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryTrustRelationByMember), varargs...)
}

// QueryTrustRelationByTargetMember mocks base method.
func (m *MockMemberInternalClient) QueryTrustRelationByTargetMember(ctx context.Context, in *user.QueryRelationByTargetMemberRequest, opts ...grpc.CallOption) (*user.QueryRelationByTargetMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTrustRelationByTargetMember", varargs...)
	ret0, _ := ret[0].(*user.QueryRelationByTargetMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTrustRelationByTargetMember indicates an expected call of QueryTrustRelationByTargetMember.
func (mr *MockMemberInternalClientMockRecorder) QueryTrustRelationByTargetMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTrustRelationByTargetMember", reflect.TypeOf((*MockMemberInternalClient)(nil).QueryTrustRelationByTargetMember), varargs...)
}

// RegisterMember mocks base method.
func (m *MockMemberInternalClient) RegisterMember(ctx context.Context, in *user.RegisterMemberRequest, opts ...grpc.CallOption) (*user.RegisterMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterMember", varargs...)
	ret0, _ := ret[0].(*user.RegisterMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMember indicates an expected call of RegisterMember.
func (mr *MockMemberInternalClientMockRecorder) RegisterMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMember", reflect.TypeOf((*MockMemberInternalClient)(nil).RegisterMember), varargs...)
}

// RemoveIPWhiteList mocks base method.
func (m *MockMemberInternalClient) RemoveIPWhiteList(ctx context.Context, in *user.RemoveIpWhiteListRequest, opts ...grpc.CallOption) (*user.RemoveIpWhiteListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveIPWhiteList", varargs...)
	ret0, _ := ret[0].(*user.RemoveIpWhiteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIPWhiteList indicates an expected call of RemoveIPWhiteList.
func (mr *MockMemberInternalClientMockRecorder) RemoveIPWhiteList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPWhiteList", reflect.TypeOf((*MockMemberInternalClient)(nil).RemoveIPWhiteList), varargs...)
}

// ReportOperationRecord mocks base method.
func (m *MockMemberInternalClient) ReportOperationRecord(ctx context.Context, in *user.OperationRecordRequest, opts ...grpc.CallOption) (*user.OperationRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportOperationRecord", varargs...)
	ret0, _ := ret[0].(*user.OperationRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportOperationRecord indicates an expected call of ReportOperationRecord.
func (mr *MockMemberInternalClientMockRecorder) ReportOperationRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportOperationRecord", reflect.TypeOf((*MockMemberInternalClient)(nil).ReportOperationRecord), varargs...)
}

// RiskComponentIntercept mocks base method.
func (m *MockMemberInternalClient) RiskComponentIntercept(ctx context.Context, in *user.RiskInterceptRequest, opts ...grpc.CallOption) (*user.RiskInterceptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RiskComponentIntercept", varargs...)
	ret0, _ := ret[0].(*user.RiskInterceptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RiskComponentIntercept indicates an expected call of RiskComponentIntercept.
func (mr *MockMemberInternalClientMockRecorder) RiskComponentIntercept(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RiskComponentIntercept", reflect.TypeOf((*MockMemberInternalClient)(nil).RiskComponentIntercept), varargs...)
}

// RiskComponentVerifyGoogle2Fa mocks base method.
func (m *MockMemberInternalClient) RiskComponentVerifyGoogle2Fa(ctx context.Context, in *user.VerifyGoogle2FaRequest, opts ...grpc.CallOption) (*user.VerifyGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RiskComponentVerifyGoogle2Fa", varargs...)
	ret0, _ := ret[0].(*user.VerifyGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RiskComponentVerifyGoogle2Fa indicates an expected call of RiskComponentVerifyGoogle2Fa.
func (mr *MockMemberInternalClientMockRecorder) RiskComponentVerifyGoogle2Fa(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RiskComponentVerifyGoogle2Fa", reflect.TypeOf((*MockMemberInternalClient)(nil).RiskComponentVerifyGoogle2Fa), varargs...)
}

// SaveMemberTag mocks base method.
func (m *MockMemberInternalClient) SaveMemberTag(ctx context.Context, in *user.SaveMemberTagRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveMemberTag", varargs...)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMemberTag indicates an expected call of SaveMemberTag.
func (mr *MockMemberInternalClientMockRecorder) SaveMemberTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMemberTag", reflect.TypeOf((*MockMemberInternalClient)(nil).SaveMemberTag), varargs...)
}

// SaveRegisteringCustomerInfo mocks base method.
func (m *MockMemberInternalClient) SaveRegisteringCustomerInfo(ctx context.Context, in *user.SaveRegisteringCustomerInfoRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRegisteringCustomerInfo", varargs...)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRegisteringCustomerInfo indicates an expected call of SaveRegisteringCustomerInfo.
func (mr *MockMemberInternalClientMockRecorder) SaveRegisteringCustomerInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRegisteringCustomerInfo", reflect.TypeOf((*MockMemberInternalClient)(nil).SaveRegisteringCustomerInfo), varargs...)
}

// SendCodeToMobile mocks base method.
func (m *MockMemberInternalClient) SendCodeToMobile(ctx context.Context, in *user.SendCodeToMobileRequest, opts ...grpc.CallOption) (*user.SendCodeToMobileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCodeToMobile", varargs...)
	ret0, _ := ret[0].(*user.SendCodeToMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCodeToMobile indicates an expected call of SendCodeToMobile.
func (mr *MockMemberInternalClientMockRecorder) SendCodeToMobile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCodeToMobile", reflect.TypeOf((*MockMemberInternalClient)(nil).SendCodeToMobile), varargs...)
}

// SendEmail mocks base method.
func (m *MockMemberInternalClient) SendEmail(ctx context.Context, in *user.SendEmailRequest, opts ...grpc.CallOption) (*user.SendEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*user.SendEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockMemberInternalClientMockRecorder) SendEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockMemberInternalClient)(nil).SendEmail), varargs...)
}

// SendFindPasswordCode mocks base method.
func (m *MockMemberInternalClient) SendFindPasswordCode(ctx context.Context, in *user.SendFindPasswordCodeRequest, opts ...grpc.CallOption) (*user.SendFindPasswordCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendFindPasswordCode", varargs...)
	ret0, _ := ret[0].(*user.SendFindPasswordCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendFindPasswordCode indicates an expected call of SendFindPasswordCode.
func (mr *MockMemberInternalClientMockRecorder) SendFindPasswordCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFindPasswordCode", reflect.TypeOf((*MockMemberInternalClient)(nil).SendFindPasswordCode), varargs...)
}

// SendMobile mocks base method.
func (m *MockMemberInternalClient) SendMobile(ctx context.Context, in *user.SendMobileRequest, opts ...grpc.CallOption) (*user.SendMobileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMobile", varargs...)
	ret0, _ := ret[0].(*user.SendMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMobile indicates an expected call of SendMobile.
func (mr *MockMemberInternalClientMockRecorder) SendMobile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMobile", reflect.TypeOf((*MockMemberInternalClient)(nil).SendMobile), varargs...)
}

// SendRegisterEmail mocks base method.
func (m *MockMemberInternalClient) SendRegisterEmail(ctx context.Context, in *user.SendRegisterEmailRequest, opts ...grpc.CallOption) (*user.SendRegisterEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendRegisterEmail", varargs...)
	ret0, _ := ret[0].(*user.SendRegisterEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegisterEmail indicates an expected call of SendRegisterEmail.
func (mr *MockMemberInternalClientMockRecorder) SendRegisterEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegisterEmail", reflect.TypeOf((*MockMemberInternalClient)(nil).SendRegisterEmail), varargs...)
}

// SendRegisterMobile mocks base method.
func (m *MockMemberInternalClient) SendRegisterMobile(ctx context.Context, in *user.SendRegisterMobileRequest, opts ...grpc.CallOption) (*user.SendRegisterMobileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendRegisterMobile", varargs...)
	ret0, _ := ret[0].(*user.SendRegisterMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegisterMobile indicates an expected call of SendRegisterMobile.
func (mr *MockMemberInternalClientMockRecorder) SendRegisterMobile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegisterMobile", reflect.TypeOf((*MockMemberInternalClient)(nil).SendRegisterMobile), varargs...)
}

// SetGrayFlagByMemberID mocks base method.
func (m *MockMemberInternalClient) SetGrayFlagByMemberID(ctx context.Context, in *user.SetGrayFlagByMemberIDRequest, opts ...grpc.CallOption) (*user.SetGrayFlagByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetGrayFlagByMemberID", varargs...)
	ret0, _ := ret[0].(*user.SetGrayFlagByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGrayFlagByMemberID indicates an expected call of SetGrayFlagByMemberID.
func (mr *MockMemberInternalClientMockRecorder) SetGrayFlagByMemberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGrayFlagByMemberID", reflect.TypeOf((*MockMemberInternalClient)(nil).SetGrayFlagByMemberID), varargs...)
}

// SetMemberBan mocks base method.
func (m *MockMemberInternalClient) SetMemberBan(ctx context.Context, in *user.SetMemberBanRequest, opts ...grpc.CallOption) (*user.SetMemberBanResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMemberBan", varargs...)
	ret0, _ := ret[0].(*user.SetMemberBanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMemberBan indicates an expected call of SetMemberBan.
func (mr *MockMemberInternalClientMockRecorder) SetMemberBan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemberBan", reflect.TypeOf((*MockMemberInternalClient)(nil).SetMemberBan), varargs...)
}

// SetMemberKYCLimitation mocks base method.
func (m *MockMemberInternalClient) SetMemberKYCLimitation(ctx context.Context, in *user.SetMemberKYCLimitationRequest, opts ...grpc.CallOption) (*user.SetMemberKYCLimitationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMemberKYCLimitation", varargs...)
	ret0, _ := ret[0].(*user.SetMemberKYCLimitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMemberKYCLimitation indicates an expected call of SetMemberKYCLimitation.
func (mr *MockMemberInternalClientMockRecorder) SetMemberKYCLimitation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemberKYCLimitation", reflect.TypeOf((*MockMemberInternalClient)(nil).SetMemberKYCLimitation), varargs...)
}

// SetMembersLogout mocks base method.
func (m *MockMemberInternalClient) SetMembersLogout(ctx context.Context, in *user.SetMembersLogoutRequest, opts ...grpc.CallOption) (*user.SetMembersLogoutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMembersLogout", varargs...)
	ret0, _ := ret[0].(*user.SetMembersLogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMembersLogout indicates an expected call of SetMembersLogout.
func (mr *MockMemberInternalClientMockRecorder) SetMembersLogout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMembersLogout", reflect.TypeOf((*MockMemberInternalClient)(nil).SetMembersLogout), varargs...)
}

// SiteCreateUser mocks base method.
func (m *MockMemberInternalClient) SiteCreateUser(ctx context.Context, in *user.SiteCreateUserRequest, opts ...grpc.CallOption) (*user.SiteCreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SiteCreateUser", varargs...)
	ret0, _ := ret[0].(*user.SiteCreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteCreateUser indicates an expected call of SiteCreateUser.
func (mr *MockMemberInternalClientMockRecorder) SiteCreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteCreateUser", reflect.TypeOf((*MockMemberInternalClient)(nil).SiteCreateUser), varargs...)
}

// UnbindGoogle2Fa mocks base method.
func (m *MockMemberInternalClient) UnbindGoogle2Fa(ctx context.Context, in *user.UnbindGoogle2FaRequest, opts ...grpc.CallOption) (*user.UnbindGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnbindGoogle2Fa", varargs...)
	ret0, _ := ret[0].(*user.UnbindGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindGoogle2Fa indicates an expected call of UnbindGoogle2Fa.
func (mr *MockMemberInternalClientMockRecorder) UnbindGoogle2Fa(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindGoogle2Fa", reflect.TypeOf((*MockMemberInternalClient)(nil).UnbindGoogle2Fa), varargs...)
}

// UnbindPaymentPassword mocks base method.
func (m *MockMemberInternalClient) UnbindPaymentPassword(ctx context.Context, in *user.UnbindPaymentPasswordRequest, opts ...grpc.CallOption) (*user.UnbindPaymentPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnbindPaymentPassword", varargs...)
	ret0, _ := ret[0].(*user.UnbindPaymentPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindPaymentPassword indicates an expected call of UnbindPaymentPassword.
func (mr *MockMemberInternalClientMockRecorder) UnbindPaymentPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindPaymentPassword", reflect.TypeOf((*MockMemberInternalClient)(nil).UnbindPaymentPassword), varargs...)
}

// UpdateApplication mocks base method.
func (m *MockMemberInternalClient) UpdateApplication(ctx context.Context, in *user.UpdateApplicationRequest, opts ...grpc.CallOption) (*user.UpdateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplication", varargs...)
	ret0, _ := ret[0].(*user.UpdateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockMemberInternalClientMockRecorder) UpdateApplication(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockMemberInternalClient)(nil).UpdateApplication), varargs...)
}

// UpdateMemberSubAccountNum mocks base method.
func (m *MockMemberInternalClient) UpdateMemberSubAccountNum(ctx context.Context, in *user.UpdateMemberSubAccountNumRequest, opts ...grpc.CallOption) (*user.UpdateMemberSubAccountNumResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMemberSubAccountNum", varargs...)
	ret0, _ := ret[0].(*user.UpdateMemberSubAccountNumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMemberSubAccountNum indicates an expected call of UpdateMemberSubAccountNum.
func (mr *MockMemberInternalClientMockRecorder) UpdateMemberSubAccountNum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberSubAccountNum", reflect.TypeOf((*MockMemberInternalClient)(nil).UpdateMemberSubAccountNum), varargs...)
}

// UpdateOpenAPIExpiredMemberLogin mocks base method.
func (m *MockMemberInternalClient) UpdateOpenAPIExpiredMemberLogin(ctx context.Context, in *user.UpdateOpenApiExpiredMemberLoginRequest, opts ...grpc.CallOption) (*user.UpdateOpenApiExpiredMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOpenAPIExpiredMemberLogin", varargs...)
	ret0, _ := ret[0].(*user.UpdateOpenApiExpiredMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpenAPIExpiredMemberLogin indicates an expected call of UpdateOpenAPIExpiredMemberLogin.
func (mr *MockMemberInternalClientMockRecorder) UpdateOpenAPIExpiredMemberLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenAPIExpiredMemberLogin", reflect.TypeOf((*MockMemberInternalClient)(nil).UpdateOpenAPIExpiredMemberLogin), varargs...)
}

// UpdateOpenAPIMemberLogin mocks base method.
func (m *MockMemberInternalClient) UpdateOpenAPIMemberLogin(ctx context.Context, in *user.UpdateOpenApiMemberLoginRequest, opts ...grpc.CallOption) (*user.UpdateOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOpenAPIMemberLogin", varargs...)
	ret0, _ := ret[0].(*user.UpdateOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpenAPIMemberLogin indicates an expected call of UpdateOpenAPIMemberLogin.
func (mr *MockMemberInternalClientMockRecorder) UpdateOpenAPIMemberLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenAPIMemberLogin", reflect.TypeOf((*MockMemberInternalClient)(nil).UpdateOpenAPIMemberLogin), varargs...)
}

// UpdateOpenAPIMemberLoginByAPIKey mocks base method.
func (m *MockMemberInternalClient) UpdateOpenAPIMemberLoginByAPIKey(ctx context.Context, in *user.UpdateOpenApiMemberLoginByApiKeyRequest, opts ...grpc.CallOption) (*user.UpdateOpenApiMemberLoginByApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOpenAPIMemberLoginByAPIKey", varargs...)
	ret0, _ := ret[0].(*user.UpdateOpenApiMemberLoginByApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpenAPIMemberLoginByAPIKey indicates an expected call of UpdateOpenAPIMemberLoginByAPIKey.
func (mr *MockMemberInternalClientMockRecorder) UpdateOpenAPIMemberLoginByAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenAPIMemberLoginByAPIKey", reflect.TypeOf((*MockMemberInternalClient)(nil).UpdateOpenAPIMemberLoginByAPIKey), varargs...)
}

// UpdateSelfUnbindRecords mocks base method.
func (m *MockMemberInternalClient) UpdateSelfUnbindRecords(ctx context.Context, in *user.UpdateSelfUnbindRecordsRequest, opts ...grpc.CallOption) (*user.UpdateSelfUnbindRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSelfUnbindRecords", varargs...)
	ret0, _ := ret[0].(*user.UpdateSelfUnbindRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelfUnbindRecords indicates an expected call of UpdateSelfUnbindRecords.
func (mr *MockMemberInternalClientMockRecorder) UpdateSelfUnbindRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelfUnbindRecords", reflect.TypeOf((*MockMemberInternalClient)(nil).UpdateSelfUnbindRecords), varargs...)
}

// UpdateTradingToolWhiteIPS mocks base method.
func (m *MockMemberInternalClient) UpdateTradingToolWhiteIPS(ctx context.Context, in *user.UpdateTradingToolWhiteIPSRequest, opts ...grpc.CallOption) (*user.UpdateTradingToolWhiteIPSResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTradingToolWhiteIPS", varargs...)
	ret0, _ := ret[0].(*user.UpdateTradingToolWhiteIPSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTradingToolWhiteIPS indicates an expected call of UpdateTradingToolWhiteIPS.
func (mr *MockMemberInternalClientMockRecorder) UpdateTradingToolWhiteIPS(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTradingToolWhiteIPS", reflect.TypeOf((*MockMemberInternalClient)(nil).UpdateTradingToolWhiteIPS), varargs...)
}

// VerifyEmail mocks base method.
func (m *MockMemberInternalClient) VerifyEmail(ctx context.Context, in *user.VerifyEmailRequest, opts ...grpc.CallOption) (*user.VerifyEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyEmail", varargs...)
	ret0, _ := ret[0].(*user.VerifyEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockMemberInternalClientMockRecorder) VerifyEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockMemberInternalClient)(nil).VerifyEmail), varargs...)
}

// VerifyGoogle2Fa mocks base method.
func (m *MockMemberInternalClient) VerifyGoogle2Fa(ctx context.Context, in *user.VerifyGoogle2FaRequest, opts ...grpc.CallOption) (*user.VerifyGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyGoogle2Fa", varargs...)
	ret0, _ := ret[0].(*user.VerifyGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyGoogle2Fa indicates an expected call of VerifyGoogle2Fa.
func (mr *MockMemberInternalClientMockRecorder) VerifyGoogle2Fa(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyGoogle2Fa", reflect.TypeOf((*MockMemberInternalClient)(nil).VerifyGoogle2Fa), varargs...)
}

// VerifyMobile mocks base method.
func (m *MockMemberInternalClient) VerifyMobile(ctx context.Context, in *user.VerifyMobileRequest, opts ...grpc.CallOption) (*user.VerifyMobileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyMobile", varargs...)
	ret0, _ := ret[0].(*user.VerifyMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMobile indicates an expected call of VerifyMobile.
func (mr *MockMemberInternalClientMockRecorder) VerifyMobile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMobile", reflect.TypeOf((*MockMemberInternalClient)(nil).VerifyMobile), varargs...)
}

// VerifyOpenAPI mocks base method.
func (m *MockMemberInternalClient) VerifyOpenAPI(ctx context.Context, in *user.VerifyOpenApiRequest, opts ...grpc.CallOption) (*user.VerifyOpenApiResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyOpenAPI", varargs...)
	ret0, _ := ret[0].(*user.VerifyOpenApiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOpenAPI indicates an expected call of VerifyOpenAPI.
func (mr *MockMemberInternalClientMockRecorder) VerifyOpenAPI(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOpenAPI", reflect.TypeOf((*MockMemberInternalClient)(nil).VerifyOpenAPI), varargs...)
}

// VerifyRiskToken mocks base method.
func (m *MockMemberInternalClient) VerifyRiskToken(ctx context.Context, in *user.RiskTokenVerifyRequest, opts ...grpc.CallOption) (*user.VerifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyRiskToken", varargs...)
	ret0, _ := ret[0].(*user.VerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRiskToken indicates an expected call of VerifyRiskToken.
func (mr *MockMemberInternalClientMockRecorder) VerifyRiskToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRiskToken", reflect.TypeOf((*MockMemberInternalClient)(nil).VerifyRiskToken), varargs...)
}

// MockMemberInternalServer is a mock of MemberInternalServer interface.
type MockMemberInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockMemberInternalServerMockRecorder
}

// MockMemberInternalServerMockRecorder is the mock recorder for MockMemberInternalServer.
type MockMemberInternalServerMockRecorder struct {
	mock *MockMemberInternalServer
}

// NewMockMemberInternalServer creates a new mock instance.
func NewMockMemberInternalServer(ctrl *gomock.Controller) *MockMemberInternalServer {
	mock := &MockMemberInternalServer{ctrl: ctrl}
	mock.recorder = &MockMemberInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberInternalServer) EXPECT() *MockMemberInternalServerMockRecorder {
	return m.recorder
}

// AddApiKey mocks base method.
func (m *MockMemberInternalServer) AddApiKey(arg0 context.Context, arg1 *user.AddApiKeyRequest) (*user.AddApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApiKey", arg0, arg1)
	ret0, _ := ret[0].(*user.AddApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApiKey indicates an expected call of AddApiKey.
func (mr *MockMemberInternalServerMockRecorder) AddApiKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApiKey", reflect.TypeOf((*MockMemberInternalServer)(nil).AddApiKey), arg0, arg1)
}

// AddBannedStrategyListByMemberID mocks base method.
func (m *MockMemberInternalServer) AddBannedStrategyListByMemberID(arg0 context.Context, arg1 *user.AddBannedStrategyByMemberIDRequest) (*user.AddBannedStrategyByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBannedStrategyListByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.AddBannedStrategyByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBannedStrategyListByMemberID indicates an expected call of AddBannedStrategyListByMemberID.
func (mr *MockMemberInternalServerMockRecorder) AddBannedStrategyListByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannedStrategyListByMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).AddBannedStrategyListByMemberID), arg0, arg1)
}

// AddOpenAPIMemberLogin mocks base method.
func (m *MockMemberInternalServer) AddOpenAPIMemberLogin(arg0 context.Context, arg1 *user.AddOpenApiMemberLoginRequest) (*user.AddOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenAPIMemberLogin", arg0, arg1)
	ret0, _ := ret[0].(*user.AddOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOpenAPIMemberLogin indicates an expected call of AddOpenAPIMemberLogin.
func (mr *MockMemberInternalServerMockRecorder) AddOpenAPIMemberLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenAPIMemberLogin", reflect.TypeOf((*MockMemberInternalServer)(nil).AddOpenAPIMemberLogin), arg0, arg1)
}

// BatchRegisterMember mocks base method.
func (m *MockMemberInternalServer) BatchRegisterMember(arg0 context.Context, arg1 *user.BatchRegisterMemberRequest) (*user.BatchRegisterMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRegisterMember", arg0, arg1)
	ret0, _ := ret[0].(*user.BatchRegisterMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRegisterMember indicates an expected call of BatchRegisterMember.
func (mr *MockMemberInternalServerMockRecorder) BatchRegisterMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRegisterMember", reflect.TypeOf((*MockMemberInternalServer)(nil).BatchRegisterMember), arg0, arg1)
}

// BindEmail mocks base method.
func (m *MockMemberInternalServer) BindEmail(arg0 context.Context, arg1 *user.BindEmailRequest) (*user.BindEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.BindEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindEmail indicates an expected call of BindEmail.
func (mr *MockMemberInternalServerMockRecorder) BindEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindEmail", reflect.TypeOf((*MockMemberInternalServer)(nil).BindEmail), arg0, arg1)
}

// BindEmailByCS mocks base method.
func (m *MockMemberInternalServer) BindEmailByCS(arg0 context.Context, arg1 *user.BindEmailByCSRequest) (*user.BindEmailByCSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindEmailByCS", arg0, arg1)
	ret0, _ := ret[0].(*user.BindEmailByCSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindEmailByCS indicates an expected call of BindEmailByCS.
func (mr *MockMemberInternalServerMockRecorder) BindEmailByCS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindEmailByCS", reflect.TypeOf((*MockMemberInternalServer)(nil).BindEmailByCS), arg0, arg1)
}

// BindGoogle2Fa mocks base method.
func (m *MockMemberInternalServer) BindGoogle2Fa(arg0 context.Context, arg1 *user.BindGoogle2FaRequest) (*user.BindGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindGoogle2Fa", arg0, arg1)
	ret0, _ := ret[0].(*user.BindGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindGoogle2Fa indicates an expected call of BindGoogle2Fa.
func (mr *MockMemberInternalServerMockRecorder) BindGoogle2Fa(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindGoogle2Fa", reflect.TypeOf((*MockMemberInternalServer)(nil).BindGoogle2Fa), arg0, arg1)
}

// BindMobile mocks base method.
func (m *MockMemberInternalServer) BindMobile(arg0 context.Context, arg1 *user.BindMobileRequest) (*user.BindMobileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindMobile", arg0, arg1)
	ret0, _ := ret[0].(*user.BindMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindMobile indicates an expected call of BindMobile.
func (mr *MockMemberInternalServerMockRecorder) BindMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMobile", reflect.TypeOf((*MockMemberInternalServer)(nil).BindMobile), arg0, arg1)
}

// ChangeEmail mocks base method.
func (m *MockMemberInternalServer) ChangeEmail(arg0 context.Context, arg1 *user.ChangeEmailRequest) (*user.ChangeEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.ChangeEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeEmail indicates an expected call of ChangeEmail.
func (mr *MockMemberInternalServerMockRecorder) ChangeEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEmail", reflect.TypeOf((*MockMemberInternalServer)(nil).ChangeEmail), arg0, arg1)
}

// ChangeMemberPassword mocks base method.
func (m *MockMemberInternalServer) ChangeMemberPassword(arg0 context.Context, arg1 *user.ChangeMemberPasswordRequest) (*user.ChangeMemberPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMemberPassword", arg0, arg1)
	ret0, _ := ret[0].(*user.ChangeMemberPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMemberPassword indicates an expected call of ChangeMemberPassword.
func (mr *MockMemberInternalServerMockRecorder) ChangeMemberPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMemberPassword", reflect.TypeOf((*MockMemberInternalServer)(nil).ChangeMemberPassword), arg0, arg1)
}

// ChangeMobile mocks base method.
func (m *MockMemberInternalServer) ChangeMobile(arg0 context.Context, arg1 *user.ChangeMobileRequest) (*user.ChangeMobileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMobile", arg0, arg1)
	ret0, _ := ret[0].(*user.ChangeMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMobile indicates an expected call of ChangeMobile.
func (mr *MockMemberInternalServerMockRecorder) ChangeMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMobile", reflect.TypeOf((*MockMemberInternalServer)(nil).ChangeMobile), arg0, arg1)
}

// CheckBindEmailByCSStatus mocks base method.
func (m *MockMemberInternalServer) CheckBindEmailByCSStatus(arg0 context.Context, arg1 *user.CheckBindEmailByCSStatusRequest) (*user.CheckBindEmailByCSStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBindEmailByCSStatus", arg0, arg1)
	ret0, _ := ret[0].(*user.CheckBindEmailByCSStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBindEmailByCSStatus indicates an expected call of CheckBindEmailByCSStatus.
func (mr *MockMemberInternalServerMockRecorder) CheckBindEmailByCSStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBindEmailByCSStatus", reflect.TypeOf((*MockMemberInternalServer)(nil).CheckBindEmailByCSStatus), arg0, arg1)
}

// CreateIPWhiteList mocks base method.
func (m *MockMemberInternalServer) CreateIPWhiteList(arg0 context.Context, arg1 *user.CreateIpWhiteListRequest) (*user.CreateIpWhiteListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPWhiteList", arg0, arg1)
	ret0, _ := ret[0].(*user.CreateIpWhiteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPWhiteList indicates an expected call of CreateIPWhiteList.
func (mr *MockMemberInternalServerMockRecorder) CreateIPWhiteList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPWhiteList", reflect.TypeOf((*MockMemberInternalServer)(nil).CreateIPWhiteList), arg0, arg1)
}

// CreateSubMember mocks base method.
func (m *MockMemberInternalServer) CreateSubMember(arg0 context.Context, arg1 *user.CreateSubMemberRequest) (*user.CreateSubMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubMember", arg0, arg1)
	ret0, _ := ret[0].(*user.CreateSubMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubMember indicates an expected call of CreateSubMember.
func (mr *MockMemberInternalServerMockRecorder) CreateSubMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubMember", reflect.TypeOf((*MockMemberInternalServer)(nil).CreateSubMember), arg0, arg1)
}

// CreateSubMemberAPIKey mocks base method.
func (m *MockMemberInternalServer) CreateSubMemberAPIKey(arg0 context.Context, arg1 *user.CreateSubMemberApiKeyRequest) (*user.CreateSubMemberApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubMemberAPIKey", arg0, arg1)
	ret0, _ := ret[0].(*user.CreateSubMemberApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubMemberAPIKey indicates an expected call of CreateSubMemberAPIKey.
func (mr *MockMemberInternalServerMockRecorder) CreateSubMemberAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubMemberAPIKey", reflect.TypeOf((*MockMemberInternalServer)(nil).CreateSubMemberAPIKey), arg0, arg1)
}

// CsBindEmail mocks base method.
func (m *MockMemberInternalServer) CsBindEmail(arg0 context.Context, arg1 *user.CsBindEmailRequest) (*user.CsBindEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsBindEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.CsBindEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsBindEmail indicates an expected call of CsBindEmail.
func (mr *MockMemberInternalServerMockRecorder) CsBindEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsBindEmail", reflect.TypeOf((*MockMemberInternalServer)(nil).CsBindEmail), arg0, arg1)
}

// CsChangeEmailV2 mocks base method.
func (m *MockMemberInternalServer) CsChangeEmailV2(arg0 context.Context, arg1 *user.CsChangeEmailRequestV2) (*user.CsChangeEmailResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsChangeEmailV2", arg0, arg1)
	ret0, _ := ret[0].(*user.CsChangeEmailResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsChangeEmailV2 indicates an expected call of CsChangeEmailV2.
func (mr *MockMemberInternalServerMockRecorder) CsChangeEmailV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsChangeEmailV2", reflect.TypeOf((*MockMemberInternalServer)(nil).CsChangeEmailV2), arg0, arg1)
}

// CsChangeMobileV2 mocks base method.
func (m *MockMemberInternalServer) CsChangeMobileV2(arg0 context.Context, arg1 *user.CsChangeMobileRequestV2) (*user.CsChangeMobileResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsChangeMobileV2", arg0, arg1)
	ret0, _ := ret[0].(*user.CsChangeMobileResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsChangeMobileV2 indicates an expected call of CsChangeMobileV2.
func (mr *MockMemberInternalServerMockRecorder) CsChangeMobileV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsChangeMobileV2", reflect.TypeOf((*MockMemberInternalServer)(nil).CsChangeMobileV2), arg0, arg1)
}

// CsUnbindMobile mocks base method.
func (m *MockMemberInternalServer) CsUnbindMobile(arg0 context.Context, arg1 *user.CsUnbindMobileRequest) (*user.CsUnbindMobileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsUnbindMobile", arg0, arg1)
	ret0, _ := ret[0].(*user.CsUnbindMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsUnbindMobile indicates an expected call of CsUnbindMobile.
func (mr *MockMemberInternalServerMockRecorder) CsUnbindMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsUnbindMobile", reflect.TypeOf((*MockMemberInternalServer)(nil).CsUnbindMobile), arg0, arg1)
}

// CsUnbindYubikey mocks base method.
func (m *MockMemberInternalServer) CsUnbindYubikey(arg0 context.Context, arg1 *user.CsUnbindYubikeyRequest) (*user.CsUnbindYubikeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsUnbindYubikey", arg0, arg1)
	ret0, _ := ret[0].(*user.CsUnbindYubikeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsUnbindYubikey indicates an expected call of CsUnbindYubikey.
func (mr *MockMemberInternalServerMockRecorder) CsUnbindYubikey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsUnbindYubikey", reflect.TypeOf((*MockMemberInternalServer)(nil).CsUnbindYubikey), arg0, arg1)
}

// DecodeRiskcomponentMsg mocks base method.
func (m *MockMemberInternalServer) DecodeRiskcomponentMsg(arg0 context.Context, arg1 *user.DecodeRiskcomponentMsgRequest) (*user.DecodeRiskcomponentMsgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRiskcomponentMsg", arg0, arg1)
	ret0, _ := ret[0].(*user.DecodeRiskcomponentMsgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRiskcomponentMsg indicates an expected call of DecodeRiskcomponentMsg.
func (mr *MockMemberInternalServerMockRecorder) DecodeRiskcomponentMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRiskcomponentMsg", reflect.TypeOf((*MockMemberInternalServer)(nil).DecodeRiskcomponentMsg), arg0, arg1)
}

// DeleteAPIKeyCS mocks base method.
func (m *MockMemberInternalServer) DeleteAPIKeyCS(arg0 context.Context, arg1 *user.DeleteAPIKeyCSRequest) (*user.DeleteAPIKeyCSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKeyCS", arg0, arg1)
	ret0, _ := ret[0].(*user.DeleteAPIKeyCSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIKeyCS indicates an expected call of DeleteAPIKeyCS.
func (mr *MockMemberInternalServerMockRecorder) DeleteAPIKeyCS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKeyCS", reflect.TypeOf((*MockMemberInternalServer)(nil).DeleteAPIKeyCS), arg0, arg1)
}

// FindPassword mocks base method.
func (m *MockMemberInternalServer) FindPassword(arg0 context.Context, arg1 *user.FindPasswordRequest) (*user.FindPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPassword", arg0, arg1)
	ret0, _ := ret[0].(*user.FindPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPassword indicates an expected call of FindPassword.
func (mr *MockMemberInternalServerMockRecorder) FindPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPassword", reflect.TypeOf((*MockMemberInternalServer)(nil).FindPassword), arg0, arg1)
}

// ForceUnbindGoogle2Fa mocks base method.
func (m *MockMemberInternalServer) ForceUnbindGoogle2Fa(arg0 context.Context, arg1 *user.ForceUnbindGoogle2FaRequest) (*user.ForceUnbindGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceUnbindGoogle2Fa", arg0, arg1)
	ret0, _ := ret[0].(*user.ForceUnbindGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceUnbindGoogle2Fa indicates an expected call of ForceUnbindGoogle2Fa.
func (mr *MockMemberInternalServerMockRecorder) ForceUnbindGoogle2Fa(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUnbindGoogle2Fa", reflect.TypeOf((*MockMemberInternalServer)(nil).ForceUnbindGoogle2Fa), arg0, arg1)
}

// Generate2FaInfo mocks base method.
func (m *MockMemberInternalServer) Generate2FaInfo(arg0 context.Context, arg1 *user.Generate2FaInfoRequest) (*user.Generate2FaInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate2FaInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.Generate2FaInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate2FaInfo indicates an expected call of Generate2FaInfo.
func (mr *MockMemberInternalServerMockRecorder) Generate2FaInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate2FaInfo", reflect.TypeOf((*MockMemberInternalServer)(nil).Generate2FaInfo), arg0, arg1)
}

// GetAntiPhishingCodeByMemberIDs mocks base method.
func (m *MockMemberInternalServer) GetAntiPhishingCodeByMemberIDs(arg0 context.Context, arg1 *user.GetAntiPhishingCodeByMemberIDRequest) (*user.GetAntiPhishingCodeByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAntiPhishingCodeByMemberIDs", arg0, arg1)
	ret0, _ := ret[0].(*user.GetAntiPhishingCodeByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAntiPhishingCodeByMemberIDs indicates an expected call of GetAntiPhishingCodeByMemberIDs.
func (mr *MockMemberInternalServerMockRecorder) GetAntiPhishingCodeByMemberIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAntiPhishingCodeByMemberIDs", reflect.TypeOf((*MockMemberInternalServer)(nil).GetAntiPhishingCodeByMemberIDs), arg0, arg1)
}

// GetApiKey mocks base method.
func (m *MockMemberInternalServer) GetApiKey(arg0 context.Context, arg1 *user.GetApiKeyRequest) (*user.GetApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKey", arg0, arg1)
	ret0, _ := ret[0].(*user.GetApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockMemberInternalServerMockRecorder) GetApiKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockMemberInternalServer)(nil).GetApiKey), arg0, arg1)
}

// GetApplication mocks base method.
func (m *MockMemberInternalServer) GetApplication(arg0 context.Context, arg1 *user.GetApplicationRequest) (*user.GetApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1)
	ret0, _ := ret[0].(*user.GetApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockMemberInternalServerMockRecorder) GetApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockMemberInternalServer)(nil).GetApplication), arg0, arg1)
}

// GetBannedStrategyListByMemberID mocks base method.
func (m *MockMemberInternalServer) GetBannedStrategyListByMemberID(arg0 context.Context, arg1 *user.GetBannedStrategyByMemberIDRequest) (*user.GetBannedStrategyByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannedStrategyListByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetBannedStrategyByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannedStrategyListByMemberID indicates an expected call of GetBannedStrategyListByMemberID.
func (mr *MockMemberInternalServerMockRecorder) GetBannedStrategyListByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannedStrategyListByMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).GetBannedStrategyListByMemberID), arg0, arg1)
}

// GetBrokerByMemberID mocks base method.
func (m *MockMemberInternalServer) GetBrokerByMemberID(arg0 context.Context, arg1 *user.GetBrokerByMemberIDRequest) (*user.GetBrokerByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrokerByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetBrokerByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerByMemberID indicates an expected call of GetBrokerByMemberID.
func (mr *MockMemberInternalServerMockRecorder) GetBrokerByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerByMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).GetBrokerByMemberID), arg0, arg1)
}

// GetBrokerIDByMemberIDs mocks base method.
func (m *MockMemberInternalServer) GetBrokerIDByMemberIDs(arg0 context.Context, arg1 *user.GetBrokerIDByMemberIDsRequest) (*user.GetBrokerIDByMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrokerIDByMemberIDs", arg0, arg1)
	ret0, _ := ret[0].(*user.GetBrokerIDByMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerIDByMemberIDs indicates an expected call of GetBrokerIDByMemberIDs.
func (mr *MockMemberInternalServerMockRecorder) GetBrokerIDByMemberIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerIDByMemberIDs", reflect.TypeOf((*MockMemberInternalServer)(nil).GetBrokerIDByMemberIDs), arg0, arg1)
}

// GetBrokerInfo mocks base method.
func (m *MockMemberInternalServer) GetBrokerInfo(arg0 context.Context, arg1 *user.GetBrokerInfoRequest) (*user.GetBrokerInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrokerInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.GetBrokerInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerInfo indicates an expected call of GetBrokerInfo.
func (mr *MockMemberInternalServerMockRecorder) GetBrokerInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerInfo", reflect.TypeOf((*MockMemberInternalServer)(nil).GetBrokerInfo), arg0, arg1)
}

// GetBrokerUser mocks base method.
func (m *MockMemberInternalServer) GetBrokerUser(arg0 context.Context, arg1 *user.GetBrokerUserRequest) (*user.GetBrokerUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrokerUser", arg0, arg1)
	ret0, _ := ret[0].(*user.GetBrokerUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrokerUser indicates an expected call of GetBrokerUser.
func (mr *MockMemberInternalServerMockRecorder) GetBrokerUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerUser", reflect.TypeOf((*MockMemberInternalServer)(nil).GetBrokerUser), arg0, arg1)
}

// GetEmailStatus mocks base method.
func (m *MockMemberInternalServer) GetEmailStatus(arg0 context.Context, arg1 *user.GetEmailStatusRequest) (*user.GetEmailStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailStatus", arg0, arg1)
	ret0, _ := ret[0].(*user.GetEmailStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailStatus indicates an expected call of GetEmailStatus.
func (mr *MockMemberInternalServerMockRecorder) GetEmailStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailStatus", reflect.TypeOf((*MockMemberInternalServer)(nil).GetEmailStatus), arg0, arg1)
}

// GetGrayFlagByMemberID mocks base method.
func (m *MockMemberInternalServer) GetGrayFlagByMemberID(arg0 context.Context, arg1 *user.GetGrayFlagByMemberIDRequest) (*user.GetGrayFlagByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrayFlagByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetGrayFlagByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrayFlagByMemberID indicates an expected call of GetGrayFlagByMemberID.
func (mr *MockMemberInternalServerMockRecorder) GetGrayFlagByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrayFlagByMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).GetGrayFlagByMemberID), arg0, arg1)
}

// GetIPWhiteList mocks base method.
func (m *MockMemberInternalServer) GetIPWhiteList(arg0 context.Context, arg1 *user.GetIpWhiteListRequest) (*user.GetIpWhiteListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPWhiteList", arg0, arg1)
	ret0, _ := ret[0].(*user.GetIpWhiteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPWhiteList indicates an expected call of GetIPWhiteList.
func (mr *MockMemberInternalServerMockRecorder) GetIPWhiteList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPWhiteList", reflect.TypeOf((*MockMemberInternalServer)(nil).GetIPWhiteList), arg0, arg1)
}

// GetLoginNameChangeRecord mocks base method.
func (m *MockMemberInternalServer) GetLoginNameChangeRecord(arg0 context.Context, arg1 *user.LoginNameChangeRecordRequest) (*user.LoginNameChangeRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginNameChangeRecord", arg0, arg1)
	ret0, _ := ret[0].(*user.LoginNameChangeRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginNameChangeRecord indicates an expected call of GetLoginNameChangeRecord.
func (mr *MockMemberInternalServerMockRecorder) GetLoginNameChangeRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginNameChangeRecord", reflect.TypeOf((*MockMemberInternalServer)(nil).GetLoginNameChangeRecord), arg0, arg1)
}

// GetMT4ByMemberIDs mocks base method.
func (m *MockMemberInternalServer) GetMT4ByMemberIDs(arg0 context.Context, arg1 *user.GetMT4ByMemberIDsRequest) (*user.GetMT4ByMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMT4ByMemberIDs", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMT4ByMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMT4ByMemberIDs indicates an expected call of GetMT4ByMemberIDs.
func (mr *MockMemberInternalServerMockRecorder) GetMT4ByMemberIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMT4ByMemberIDs", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMT4ByMemberIDs), arg0, arg1)
}

// GetMemberIDByPII mocks base method.
func (m *MockMemberInternalServer) GetMemberIDByPII(arg0 context.Context, arg1 *user.GetMemberIDByPIIRequest) (*user.GetMemberIDByPIIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberIDByPII", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberIDByPIIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberIDByPII indicates an expected call of GetMemberIDByPII.
func (mr *MockMemberInternalServerMockRecorder) GetMemberIDByPII(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberIDByPII", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberIDByPII), arg0, arg1)
}

// GetMemberIdByMT4Id mocks base method.
func (m *MockMemberInternalServer) GetMemberIdByMT4Id(arg0 context.Context, arg1 *user.GetMemberIdByMT4IdRequest) (*user.GetMemberIdByMT4IdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberIdByMT4Id", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberIdByMT4IdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberIdByMT4Id indicates an expected call of GetMemberIdByMT4Id.
func (mr *MockMemberInternalServerMockRecorder) GetMemberIdByMT4Id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberIdByMT4Id", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberIdByMT4Id), arg0, arg1)
}

// GetMemberInfo mocks base method.
func (m *MockMemberInternalServer) GetMemberInfo(arg0 context.Context, arg1 *user.GetMemberInfoRequest) (*user.GetMemberInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberInfo indicates an expected call of GetMemberInfo.
func (mr *MockMemberInternalServerMockRecorder) GetMemberInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberInfo", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberInfo), arg0, arg1)
}

// GetMemberKYC mocks base method.
func (m *MockMemberInternalServer) GetMemberKYC(arg0 context.Context, arg1 *user.GetMemberKYCRequest) (*user.GetMemberKYCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberKYC", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberKYC indicates an expected call of GetMemberKYC.
func (mr *MockMemberInternalServerMockRecorder) GetMemberKYC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberKYC", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberKYC), arg0, arg1)
}

// GetMemberKYCCoinLimit mocks base method.
func (m *MockMemberInternalServer) GetMemberKYCCoinLimit(arg0 context.Context, arg1 *user.GetMemberKYCCoinLimitRequest) (*user.GetMemberKYCCoinLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberKYCCoinLimit", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberKYCCoinLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberKYCCoinLimit indicates an expected call of GetMemberKYCCoinLimit.
func (mr *MockMemberInternalServerMockRecorder) GetMemberKYCCoinLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberKYCCoinLimit", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberKYCCoinLimit), arg0, arg1)
}

// GetMemberLimitBySymbol mocks base method.
func (m *MockMemberInternalServer) GetMemberLimitBySymbol(arg0 context.Context, arg1 *user.GetMemberLimitBySymbolRequest) (*user.GetMemberLimitBySymbolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberLimitBySymbol", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberLimitBySymbolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberLimitBySymbol indicates an expected call of GetMemberLimitBySymbol.
func (mr *MockMemberInternalServerMockRecorder) GetMemberLimitBySymbol(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberLimitBySymbol", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberLimitBySymbol), arg0, arg1)
}

// GetMemberPII mocks base method.
func (m *MockMemberInternalServer) GetMemberPII(arg0 context.Context, arg1 *user.GetMemberPIIRequest) (*user.GetMemberPIIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberPII", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberPIIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberPII indicates an expected call of GetMemberPII.
func (mr *MockMemberInternalServerMockRecorder) GetMemberPII(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberPII", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberPII), arg0, arg1)
}

// GetMemberSelfBanEmailVerifyToken mocks base method.
func (m *MockMemberInternalServer) GetMemberSelfBanEmailVerifyToken(arg0 context.Context, arg1 *user.GetMemberSelfBanEmailVerifyTokenRequest) (*user.GetMemberSelfBanEmailVerifyTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberSelfBanEmailVerifyToken", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberSelfBanEmailVerifyTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberSelfBanEmailVerifyToken indicates an expected call of GetMemberSelfBanEmailVerifyToken.
func (mr *MockMemberInternalServerMockRecorder) GetMemberSelfBanEmailVerifyToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberSelfBanEmailVerifyToken", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberSelfBanEmailVerifyToken), arg0, arg1)
}

// GetMemberTypeByMemberID mocks base method.
func (m *MockMemberInternalServer) GetMemberTypeByMemberID(arg0 context.Context, arg1 *user.GetMemberTypeByMemberIDRequest) (*user.GetMemberTypeByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberTypeByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberTypeByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberTypeByMemberID indicates an expected call of GetMemberTypeByMemberID.
func (mr *MockMemberInternalServerMockRecorder) GetMemberTypeByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberTypeByMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberTypeByMemberID), arg0, arg1)
}

// GetMemberWithdrawBanTime mocks base method.
func (m *MockMemberInternalServer) GetMemberWithdrawBanTime(arg0 context.Context, arg1 *user.GetMemberWithdrawBanTimeRequest) (*user.GetMemberWithdrawBanTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberWithdrawBanTime", arg0, arg1)
	ret0, _ := ret[0].(*user.GetMemberWithdrawBanTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberWithdrawBanTime indicates an expected call of GetMemberWithdrawBanTime.
func (mr *MockMemberInternalServerMockRecorder) GetMemberWithdrawBanTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberWithdrawBanTime", reflect.TypeOf((*MockMemberInternalServer)(nil).GetMemberWithdrawBanTime), arg0, arg1)
}

// GetOpenAPIMemberLogin mocks base method.
func (m *MockMemberInternalServer) GetOpenAPIMemberLogin(arg0 context.Context, arg1 *user.GetOpenApiMemberLoginRequest) (*user.GetOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLogin", arg0, arg1)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLogin indicates an expected call of GetOpenAPIMemberLogin.
func (mr *MockMemberInternalServerMockRecorder) GetOpenAPIMemberLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLogin", reflect.TypeOf((*MockMemberInternalServer)(nil).GetOpenAPIMemberLogin), arg0, arg1)
}

// GetOpenAPIMemberLoginList mocks base method.
func (m *MockMemberInternalServer) GetOpenAPIMemberLoginList(arg0 context.Context, arg1 *user.GetOpenApiMemberLoginListRequest) (*user.GetOpenApiMemberLoginListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLoginList", arg0, arg1)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLoginList indicates an expected call of GetOpenAPIMemberLoginList.
func (mr *MockMemberInternalServerMockRecorder) GetOpenAPIMemberLoginList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLoginList", reflect.TypeOf((*MockMemberInternalServer)(nil).GetOpenAPIMemberLoginList), arg0, arg1)
}

// GetOpenAPIMemberLoginListV2 mocks base method.
func (m *MockMemberInternalServer) GetOpenAPIMemberLoginListV2(arg0 context.Context, arg1 *user.GetOpenApiMemberLoginListRequest) (*user.GetOpenApiMemberLoginListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLoginListV2", arg0, arg1)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLoginListV2 indicates an expected call of GetOpenAPIMemberLoginListV2.
func (mr *MockMemberInternalServerMockRecorder) GetOpenAPIMemberLoginListV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLoginListV2", reflect.TypeOf((*MockMemberInternalServer)(nil).GetOpenAPIMemberLoginListV2), arg0, arg1)
}

// GetOpenAPIMemberLoginV2 mocks base method.
func (m *MockMemberInternalServer) GetOpenAPIMemberLoginV2(arg0 context.Context, arg1 *user.GetOpenApiMemberLoginRequest) (*user.GetOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenAPIMemberLoginV2", arg0, arg1)
	ret0, _ := ret[0].(*user.GetOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenAPIMemberLoginV2 indicates an expected call of GetOpenAPIMemberLoginV2.
func (mr *MockMemberInternalServerMockRecorder) GetOpenAPIMemberLoginV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPIMemberLoginV2", reflect.TypeOf((*MockMemberInternalServer)(nil).GetOpenAPIMemberLoginV2), arg0, arg1)
}

// GetPaymentPasswordStatus mocks base method.
func (m *MockMemberInternalServer) GetPaymentPasswordStatus(arg0 context.Context, arg1 *user.GetPaymentPasswordStatusRequest) (*user.GetPaymentPasswordStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentPasswordStatus", arg0, arg1)
	ret0, _ := ret[0].(*user.GetPaymentPasswordStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentPasswordStatus indicates an expected call of GetPaymentPasswordStatus.
func (mr *MockMemberInternalServerMockRecorder) GetPaymentPasswordStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentPasswordStatus", reflect.TypeOf((*MockMemberInternalServer)(nil).GetPaymentPasswordStatus), arg0, arg1)
}

// GetRegisterEmailID mocks base method.
func (m *MockMemberInternalServer) GetRegisterEmailID(arg0 context.Context, arg1 *user.GetRegisterEmailIDRequest) (*user.GetRegisterEmailIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterEmailID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRegisterEmailIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterEmailID indicates an expected call of GetRegisterEmailID.
func (mr *MockMemberInternalServerMockRecorder) GetRegisterEmailID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterEmailID", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRegisterEmailID), arg0, arg1)
}

// GetRelationByExternal mocks base method.
func (m *MockMemberInternalServer) GetRelationByExternal(arg0 context.Context, arg1 *user.GetRelationByExternalRequest) (*user.GetRelationByExternalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationByExternal", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRelationByExternalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationByExternal indicates an expected call of GetRelationByExternal.
func (mr *MockMemberInternalServerMockRecorder) GetRelationByExternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationByExternal", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationByExternal), arg0, arg1)
}

// GetRelationByMemberIDCommon mocks base method.
func (m *MockMemberInternalServer) GetRelationByMemberIDCommon(arg0 context.Context, arg1 *user.QueryRelationByMemberRequest) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationByMemberIDCommon", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationByMemberIDCommon indicates an expected call of GetRelationByMemberIDCommon.
func (mr *MockMemberInternalServerMockRecorder) GetRelationByMemberIDCommon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationByMemberIDCommon", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationByMemberIDCommon), arg0, arg1)
}

// GetRelationBySubMemberID mocks base method.
func (m *MockMemberInternalServer) GetRelationBySubMemberID(arg0 context.Context, arg1 *user.GetRelationBySubMemberIDRequest) (*user.GetRelationBySubMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationBySubMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRelationBySubMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationBySubMemberID indicates an expected call of GetRelationBySubMemberID.
func (mr *MockMemberInternalServerMockRecorder) GetRelationBySubMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationBySubMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationBySubMemberID), arg0, arg1)
}

// GetRelationsByExternals mocks base method.
func (m *MockMemberInternalServer) GetRelationsByExternals(arg0 context.Context, arg1 *user.GetRelationsByExternalsRequest) (*user.GetRelationsByExternalsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsByExternals", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRelationsByExternalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsByExternals indicates an expected call of GetRelationsByExternals.
func (mr *MockMemberInternalServerMockRecorder) GetRelationsByExternals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsByExternals", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationsByExternals), arg0, arg1)
}

// GetRelationsByMemberID mocks base method.
func (m *MockMemberInternalServer) GetRelationsByMemberID(arg0 context.Context, arg1 *user.GetRelationsByMemberIDRequest) (*user.GetRelationsByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRelationsByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsByMemberID indicates an expected call of GetRelationsByMemberID.
func (mr *MockMemberInternalServerMockRecorder) GetRelationsByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsByMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationsByMemberID), arg0, arg1)
}

// GetRelationsByMemberIDs mocks base method.
func (m *MockMemberInternalServer) GetRelationsByMemberIDs(arg0 context.Context, arg1 *user.GetRelationsByMemberIDsRequest) (*user.GetRelationsByMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsByMemberIDs", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRelationsByMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsByMemberIDs indicates an expected call of GetRelationsByMemberIDs.
func (mr *MockMemberInternalServerMockRecorder) GetRelationsByMemberIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsByMemberIDs", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationsByMemberIDs), arg0, arg1)
}

// GetRelationsBySource mocks base method.
func (m *MockMemberInternalServer) GetRelationsBySource(arg0 context.Context, arg1 *user.GetRelationsBySourceRequest) (*user.GetRelationsBySourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsBySource", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRelationsBySourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsBySource indicates an expected call of GetRelationsBySource.
func (mr *MockMemberInternalServerMockRecorder) GetRelationsBySource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsBySource", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationsBySource), arg0, arg1)
}

// GetRelationsBySubMemberIDs mocks base method.
func (m *MockMemberInternalServer) GetRelationsBySubMemberIDs(arg0 context.Context, arg1 *user.GetRelationsBySubMemberIDsRequest) (*user.GetRelationsBySubMemberIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsBySubMemberIDs", arg0, arg1)
	ret0, _ := ret[0].(*user.GetRelationsBySubMemberIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsBySubMemberIDs indicates an expected call of GetRelationsBySubMemberIDs.
func (mr *MockMemberInternalServerMockRecorder) GetRelationsBySubMemberIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsBySubMemberIDs", reflect.TypeOf((*MockMemberInternalServer)(nil).GetRelationsBySubMemberIDs), arg0, arg1)
}

// GetSecureItemBiolIdentity mocks base method.
func (m *MockMemberInternalServer) GetSecureItemBiolIdentity(arg0 context.Context, arg1 *user.GetSecureItemBiolIdentityRequest) (*user.GetSecureItemBiolIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecureItemBiolIdentity", arg0, arg1)
	ret0, _ := ret[0].(*user.GetSecureItemBiolIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecureItemBiolIdentity indicates an expected call of GetSecureItemBiolIdentity.
func (mr *MockMemberInternalServerMockRecorder) GetSecureItemBiolIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecureItemBiolIdentity", reflect.TypeOf((*MockMemberInternalServer)(nil).GetSecureItemBiolIdentity), arg0, arg1)
}

// GetSelfUnbindRecords mocks base method.
func (m *MockMemberInternalServer) GetSelfUnbindRecords(arg0 context.Context, arg1 *user.GetSelfUnbindRecordsRequest) (*user.GetSelfUnbindRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfUnbindRecords", arg0, arg1)
	ret0, _ := ret[0].(*user.GetSelfUnbindRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfUnbindRecords indicates an expected call of GetSelfUnbindRecords.
func (mr *MockMemberInternalServerMockRecorder) GetSelfUnbindRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfUnbindRecords", reflect.TypeOf((*MockMemberInternalServer)(nil).GetSelfUnbindRecords), arg0, arg1)
}

// GetSelfUnbindUserDoc mocks base method.
func (m *MockMemberInternalServer) GetSelfUnbindUserDoc(arg0 context.Context, arg1 *user.GetSelfUnbindUserDocRequest) (*user.GetSelfUnbindUserDocResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfUnbindUserDoc", arg0, arg1)
	ret0, _ := ret[0].(*user.GetSelfUnbindUserDocResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfUnbindUserDoc indicates an expected call of GetSelfUnbindUserDoc.
func (mr *MockMemberInternalServerMockRecorder) GetSelfUnbindUserDoc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfUnbindUserDoc", reflect.TypeOf((*MockMemberInternalServer)(nil).GetSelfUnbindUserDoc), arg0, arg1)
}

// GetSumSubShareToken mocks base method.
func (m *MockMemberInternalServer) GetSumSubShareToken(arg0 context.Context, arg1 *user.GetSumSubShareTokenRequest) (*user.GetSumSubShareTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumSubShareToken", arg0, arg1)
	ret0, _ := ret[0].(*user.GetSumSubShareTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumSubShareToken indicates an expected call of GetSumSubShareToken.
func (mr *MockMemberInternalServerMockRecorder) GetSumSubShareToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumSubShareToken", reflect.TypeOf((*MockMemberInternalServer)(nil).GetSumSubShareToken), arg0, arg1)
}

// GetUserInfo mocks base method.
func (m *MockMemberInternalServer) GetUserInfo(arg0 context.Context, arg1 *user.UserInfoRequest) (*user.UserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.UserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockMemberInternalServerMockRecorder) GetUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockMemberInternalServer)(nil).GetUserInfo), arg0, arg1)
}

// GetUserNotifyLang mocks base method.
func (m *MockMemberInternalServer) GetUserNotifyLang(arg0 context.Context, arg1 *user.GetUserNotifyLangRequest) (*user.GetUserNotifyLangResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotifyLang", arg0, arg1)
	ret0, _ := ret[0].(*user.GetUserNotifyLangResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotifyLang indicates an expected call of GetUserNotifyLang.
func (mr *MockMemberInternalServerMockRecorder) GetUserNotifyLang(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotifyLang", reflect.TypeOf((*MockMemberInternalServer)(nil).GetUserNotifyLang), arg0, arg1)
}

// GetVaguePII mocks base method.
func (m *MockMemberInternalServer) GetVaguePII(arg0 context.Context, arg1 *user.GetVaguePIIRequest) (*user.GetVaguePIIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaguePII", arg0, arg1)
	ret0, _ := ret[0].(*user.GetVaguePIIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaguePII indicates an expected call of GetVaguePII.
func (mr *MockMemberInternalServerMockRecorder) GetVaguePII(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaguePII", reflect.TypeOf((*MockMemberInternalServer)(nil).GetVaguePII), arg0, arg1)
}

// GetVagueSensitive mocks base method.
func (m *MockMemberInternalServer) GetVagueSensitive(arg0 context.Context, arg1 *user.GetVagueSensitiveRequest) (*user.GetVagueSensitiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVagueSensitive", arg0, arg1)
	ret0, _ := ret[0].(*user.GetVagueSensitiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVagueSensitive indicates an expected call of GetVagueSensitive.
func (mr *MockMemberInternalServerMockRecorder) GetVagueSensitive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVagueSensitive", reflect.TypeOf((*MockMemberInternalServer)(nil).GetVagueSensitive), arg0, arg1)
}

// GetWithDrawExpireTime mocks base method.
func (m *MockMemberInternalServer) GetWithDrawExpireTime(arg0 context.Context, arg1 *user.GetWithDrawExpireTimeRequest) (*user.GetWithDrawExpireTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithDrawExpireTime", arg0, arg1)
	ret0, _ := ret[0].(*user.GetWithDrawExpireTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithDrawExpireTime indicates an expected call of GetWithDrawExpireTime.
func (mr *MockMemberInternalServerMockRecorder) GetWithDrawExpireTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDrawExpireTime", reflect.TypeOf((*MockMemberInternalServer)(nil).GetWithDrawExpireTime), arg0, arg1)
}

// GetYubikeyList mocks base method.
func (m *MockMemberInternalServer) GetYubikeyList(arg0 context.Context, arg1 *user.GetYubikeyListRequest) (*user.GetYubikeyListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYubikeyList", arg0, arg1)
	ret0, _ := ret[0].(*user.GetYubikeyListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYubikeyList indicates an expected call of GetYubikeyList.
func (mr *MockMemberInternalServerMockRecorder) GetYubikeyList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYubikeyList", reflect.TypeOf((*MockMemberInternalServer)(nil).GetYubikeyList), arg0, arg1)
}

// Identify mocks base method.
func (m *MockMemberInternalServer) Identify(arg0 context.Context, arg1 *user.IdentifyRequest) (*user.IdentifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identify", arg0, arg1)
	ret0, _ := ret[0].(*user.IdentifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identify indicates an expected call of Identify.
func (mr *MockMemberInternalServerMockRecorder) Identify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockMemberInternalServer)(nil).Identify), arg0, arg1)
}

// ListAPIKeyCS mocks base method.
func (m *MockMemberInternalServer) ListAPIKeyCS(arg0 context.Context, arg1 *user.ListAPIKeyCSRequest) (*user.ListAPIKeyCSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeyCS", arg0, arg1)
	ret0, _ := ret[0].(*user.ListAPIKeyCSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeyCS indicates an expected call of ListAPIKeyCS.
func (mr *MockMemberInternalServerMockRecorder) ListAPIKeyCS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeyCS", reflect.TypeOf((*MockMemberInternalServer)(nil).ListAPIKeyCS), arg0, arg1)
}

// LoginMember mocks base method.
func (m *MockMemberInternalServer) LoginMember(arg0 context.Context, arg1 *user.LoginMemberRequest) (*user.LoginMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginMember", arg0, arg1)
	ret0, _ := ret[0].(*user.LoginMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginMember indicates an expected call of LoginMember.
func (mr *MockMemberInternalServerMockRecorder) LoginMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginMember", reflect.TypeOf((*MockMemberInternalServer)(nil).LoginMember), arg0, arg1)
}

// QueryBanMembers mocks base method.
func (m *MockMemberInternalServer) QueryBanMembers(arg0 context.Context, arg1 *user.QueryBanMembersRequest) (*user.QueryBanMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBanMembers", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryBanMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanMembers indicates an expected call of QueryBanMembers.
func (mr *MockMemberInternalServerMockRecorder) QueryBanMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanMembers", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryBanMembers), arg0, arg1)
}

// QueryCommonMemberInfo mocks base method.
func (m *MockMemberInternalServer) QueryCommonMemberInfo(arg0 context.Context, arg1 *user.QueryCommonMemberInfoRequest) (*user.QueryCommonMemberInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCommonMemberInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryCommonMemberInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCommonMemberInfo indicates an expected call of QueryCommonMemberInfo.
func (mr *MockMemberInternalServerMockRecorder) QueryCommonMemberInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCommonMemberInfo", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryCommonMemberInfo), arg0, arg1)
}

// QueryMemberBaseInfo mocks base method.
func (m *MockMemberInternalServer) QueryMemberBaseInfo(arg0 context.Context, arg1 *user.QueryMemberBaseInfoRequest) (*user.QueryMemberBaseInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMemberBaseInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryMemberBaseInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberBaseInfo indicates an expected call of QueryMemberBaseInfo.
func (mr *MockMemberInternalServerMockRecorder) QueryMemberBaseInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberBaseInfo", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryMemberBaseInfo), arg0, arg1)
}

// QueryMemberLoginName mocks base method.
func (m *MockMemberInternalServer) QueryMemberLoginName(arg0 context.Context, arg1 *user.QueryMemberLoginNameRequest) (*user.QueryMemberLoginNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMemberLoginName", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryMemberLoginNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberLoginName indicates an expected call of QueryMemberLoginName.
func (mr *MockMemberInternalServerMockRecorder) QueryMemberLoginName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberLoginName", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryMemberLoginName), arg0, arg1)
}

// QueryMemberStatus mocks base method.
func (m *MockMemberInternalServer) QueryMemberStatus(arg0 context.Context, arg1 *user.QueryMemberStatusRequest) (*user.QueryMemberStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMemberStatus", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryMemberStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberStatus indicates an expected call of QueryMemberStatus.
func (mr *MockMemberInternalServerMockRecorder) QueryMemberStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberStatus", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryMemberStatus), arg0, arg1)
}

// QueryMemberTag mocks base method.
func (m *MockMemberInternalServer) QueryMemberTag(arg0 context.Context, arg1 *user.QueryMemberTagRequest) (*user.QueryMemberTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMemberTag", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryMemberTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberTag indicates an expected call of QueryMemberTag.
func (mr *MockMemberInternalServerMockRecorder) QueryMemberTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberTag", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryMemberTag), arg0, arg1)
}

// QueryMembersTag mocks base method.
func (m *MockMemberInternalServer) QueryMembersTag(arg0 context.Context, arg1 *user.QueryMembersTagRequest) (*user.QueryMembersTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMembersTag", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryMembersTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMembersTag indicates an expected call of QueryMembersTag.
func (mr *MockMemberInternalServerMockRecorder) QueryMembersTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMembersTag", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryMembersTag), arg0, arg1)
}

// QueryRelationByMember mocks base method.
func (m *MockMemberInternalServer) QueryRelationByMember(arg0 context.Context, arg1 *user.QueryRelationByMemberRequest) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelationByMember", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationByMember indicates an expected call of QueryRelationByMember.
func (mr *MockMemberInternalServerMockRecorder) QueryRelationByMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationByMember", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryRelationByMember), arg0, arg1)
}

// QueryRelationByMemberV2 mocks base method.
func (m *MockMemberInternalServer) QueryRelationByMemberV2(arg0 context.Context, arg1 *user.QueryRelationByMemberRequest) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelationByMemberV2", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationByMemberV2 indicates an expected call of QueryRelationByMemberV2.
func (mr *MockMemberInternalServerMockRecorder) QueryRelationByMemberV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationByMemberV2", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryRelationByMemberV2), arg0, arg1)
}

// QueryRelationByTargetMember mocks base method.
func (m *MockMemberInternalServer) QueryRelationByTargetMember(arg0 context.Context, arg1 *user.QueryRelationByTargetMemberRequest) (*user.QueryRelationByTargetMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelationByTargetMember", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryRelationByTargetMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationByTargetMember indicates an expected call of QueryRelationByTargetMember.
func (mr *MockMemberInternalServerMockRecorder) QueryRelationByTargetMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationByTargetMember", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryRelationByTargetMember), arg0, arg1)
}

// QueryTrustRelationByMember mocks base method.
func (m *MockMemberInternalServer) QueryTrustRelationByMember(arg0 context.Context, arg1 *user.QueryRelationByMemberRequest) (*user.QueryRelationByMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTrustRelationByMember", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryRelationByMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTrustRelationByMember indicates an expected call of QueryTrustRelationByMember.
func (mr *MockMemberInternalServerMockRecorder) QueryTrustRelationByMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTrustRelationByMember", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryTrustRelationByMember), arg0, arg1)
}

// QueryTrustRelationByTargetMember mocks base method.
func (m *MockMemberInternalServer) QueryTrustRelationByTargetMember(arg0 context.Context, arg1 *user.QueryRelationByTargetMemberRequest) (*user.QueryRelationByTargetMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTrustRelationByTargetMember", arg0, arg1)
	ret0, _ := ret[0].(*user.QueryRelationByTargetMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTrustRelationByTargetMember indicates an expected call of QueryTrustRelationByTargetMember.
func (mr *MockMemberInternalServerMockRecorder) QueryTrustRelationByTargetMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTrustRelationByTargetMember", reflect.TypeOf((*MockMemberInternalServer)(nil).QueryTrustRelationByTargetMember), arg0, arg1)
}

// RegisterMember mocks base method.
func (m *MockMemberInternalServer) RegisterMember(arg0 context.Context, arg1 *user.RegisterMemberRequest) (*user.RegisterMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMember", arg0, arg1)
	ret0, _ := ret[0].(*user.RegisterMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMember indicates an expected call of RegisterMember.
func (mr *MockMemberInternalServerMockRecorder) RegisterMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMember", reflect.TypeOf((*MockMemberInternalServer)(nil).RegisterMember), arg0, arg1)
}

// RemoveIPWhiteList mocks base method.
func (m *MockMemberInternalServer) RemoveIPWhiteList(arg0 context.Context, arg1 *user.RemoveIpWhiteListRequest) (*user.RemoveIpWhiteListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIPWhiteList", arg0, arg1)
	ret0, _ := ret[0].(*user.RemoveIpWhiteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIPWhiteList indicates an expected call of RemoveIPWhiteList.
func (mr *MockMemberInternalServerMockRecorder) RemoveIPWhiteList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPWhiteList", reflect.TypeOf((*MockMemberInternalServer)(nil).RemoveIPWhiteList), arg0, arg1)
}

// ReportOperationRecord mocks base method.
func (m *MockMemberInternalServer) ReportOperationRecord(arg0 context.Context, arg1 *user.OperationRecordRequest) (*user.OperationRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportOperationRecord", arg0, arg1)
	ret0, _ := ret[0].(*user.OperationRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportOperationRecord indicates an expected call of ReportOperationRecord.
func (mr *MockMemberInternalServerMockRecorder) ReportOperationRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportOperationRecord", reflect.TypeOf((*MockMemberInternalServer)(nil).ReportOperationRecord), arg0, arg1)
}

// RiskComponentIntercept mocks base method.
func (m *MockMemberInternalServer) RiskComponentIntercept(arg0 context.Context, arg1 *user.RiskInterceptRequest) (*user.RiskInterceptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RiskComponentIntercept", arg0, arg1)
	ret0, _ := ret[0].(*user.RiskInterceptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RiskComponentIntercept indicates an expected call of RiskComponentIntercept.
func (mr *MockMemberInternalServerMockRecorder) RiskComponentIntercept(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RiskComponentIntercept", reflect.TypeOf((*MockMemberInternalServer)(nil).RiskComponentIntercept), arg0, arg1)
}

// RiskComponentVerifyGoogle2Fa mocks base method.
func (m *MockMemberInternalServer) RiskComponentVerifyGoogle2Fa(arg0 context.Context, arg1 *user.VerifyGoogle2FaRequest) (*user.VerifyGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RiskComponentVerifyGoogle2Fa", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RiskComponentVerifyGoogle2Fa indicates an expected call of RiskComponentVerifyGoogle2Fa.
func (mr *MockMemberInternalServerMockRecorder) RiskComponentVerifyGoogle2Fa(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RiskComponentVerifyGoogle2Fa", reflect.TypeOf((*MockMemberInternalServer)(nil).RiskComponentVerifyGoogle2Fa), arg0, arg1)
}

// SaveMemberTag mocks base method.
func (m *MockMemberInternalServer) SaveMemberTag(arg0 context.Context, arg1 *user.SaveMemberTagRequest) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMemberTag", arg0, arg1)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMemberTag indicates an expected call of SaveMemberTag.
func (mr *MockMemberInternalServerMockRecorder) SaveMemberTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMemberTag", reflect.TypeOf((*MockMemberInternalServer)(nil).SaveMemberTag), arg0, arg1)
}

// SaveRegisteringCustomerInfo mocks base method.
func (m *MockMemberInternalServer) SaveRegisteringCustomerInfo(arg0 context.Context, arg1 *user.SaveRegisteringCustomerInfoRequest) (*common.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRegisteringCustomerInfo", arg0, arg1)
	ret0, _ := ret[0].(*common.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRegisteringCustomerInfo indicates an expected call of SaveRegisteringCustomerInfo.
func (mr *MockMemberInternalServerMockRecorder) SaveRegisteringCustomerInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRegisteringCustomerInfo", reflect.TypeOf((*MockMemberInternalServer)(nil).SaveRegisteringCustomerInfo), arg0, arg1)
}

// SendCodeToMobile mocks base method.
func (m *MockMemberInternalServer) SendCodeToMobile(arg0 context.Context, arg1 *user.SendCodeToMobileRequest) (*user.SendCodeToMobileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCodeToMobile", arg0, arg1)
	ret0, _ := ret[0].(*user.SendCodeToMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCodeToMobile indicates an expected call of SendCodeToMobile.
func (mr *MockMemberInternalServerMockRecorder) SendCodeToMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCodeToMobile", reflect.TypeOf((*MockMemberInternalServer)(nil).SendCodeToMobile), arg0, arg1)
}

// SendEmail mocks base method.
func (m *MockMemberInternalServer) SendEmail(arg0 context.Context, arg1 *user.SendEmailRequest) (*user.SendEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.SendEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockMemberInternalServerMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockMemberInternalServer)(nil).SendEmail), arg0, arg1)
}

// SendFindPasswordCode mocks base method.
func (m *MockMemberInternalServer) SendFindPasswordCode(arg0 context.Context, arg1 *user.SendFindPasswordCodeRequest) (*user.SendFindPasswordCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFindPasswordCode", arg0, arg1)
	ret0, _ := ret[0].(*user.SendFindPasswordCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendFindPasswordCode indicates an expected call of SendFindPasswordCode.
func (mr *MockMemberInternalServerMockRecorder) SendFindPasswordCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFindPasswordCode", reflect.TypeOf((*MockMemberInternalServer)(nil).SendFindPasswordCode), arg0, arg1)
}

// SendMobile mocks base method.
func (m *MockMemberInternalServer) SendMobile(arg0 context.Context, arg1 *user.SendMobileRequest) (*user.SendMobileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMobile", arg0, arg1)
	ret0, _ := ret[0].(*user.SendMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMobile indicates an expected call of SendMobile.
func (mr *MockMemberInternalServerMockRecorder) SendMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMobile", reflect.TypeOf((*MockMemberInternalServer)(nil).SendMobile), arg0, arg1)
}

// SendRegisterEmail mocks base method.
func (m *MockMemberInternalServer) SendRegisterEmail(arg0 context.Context, arg1 *user.SendRegisterEmailRequest) (*user.SendRegisterEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegisterEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.SendRegisterEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegisterEmail indicates an expected call of SendRegisterEmail.
func (mr *MockMemberInternalServerMockRecorder) SendRegisterEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegisterEmail", reflect.TypeOf((*MockMemberInternalServer)(nil).SendRegisterEmail), arg0, arg1)
}

// SendRegisterMobile mocks base method.
func (m *MockMemberInternalServer) SendRegisterMobile(arg0 context.Context, arg1 *user.SendRegisterMobileRequest) (*user.SendRegisterMobileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegisterMobile", arg0, arg1)
	ret0, _ := ret[0].(*user.SendRegisterMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegisterMobile indicates an expected call of SendRegisterMobile.
func (mr *MockMemberInternalServerMockRecorder) SendRegisterMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegisterMobile", reflect.TypeOf((*MockMemberInternalServer)(nil).SendRegisterMobile), arg0, arg1)
}

// SetGrayFlagByMemberID mocks base method.
func (m *MockMemberInternalServer) SetGrayFlagByMemberID(arg0 context.Context, arg1 *user.SetGrayFlagByMemberIDRequest) (*user.SetGrayFlagByMemberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGrayFlagByMemberID", arg0, arg1)
	ret0, _ := ret[0].(*user.SetGrayFlagByMemberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGrayFlagByMemberID indicates an expected call of SetGrayFlagByMemberID.
func (mr *MockMemberInternalServerMockRecorder) SetGrayFlagByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGrayFlagByMemberID", reflect.TypeOf((*MockMemberInternalServer)(nil).SetGrayFlagByMemberID), arg0, arg1)
}

// SetMemberBan mocks base method.
func (m *MockMemberInternalServer) SetMemberBan(arg0 context.Context, arg1 *user.SetMemberBanRequest) (*user.SetMemberBanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMemberBan", arg0, arg1)
	ret0, _ := ret[0].(*user.SetMemberBanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMemberBan indicates an expected call of SetMemberBan.
func (mr *MockMemberInternalServerMockRecorder) SetMemberBan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemberBan", reflect.TypeOf((*MockMemberInternalServer)(nil).SetMemberBan), arg0, arg1)
}

// SetMemberKYCLimitation mocks base method.
func (m *MockMemberInternalServer) SetMemberKYCLimitation(arg0 context.Context, arg1 *user.SetMemberKYCLimitationRequest) (*user.SetMemberKYCLimitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMemberKYCLimitation", arg0, arg1)
	ret0, _ := ret[0].(*user.SetMemberKYCLimitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMemberKYCLimitation indicates an expected call of SetMemberKYCLimitation.
func (mr *MockMemberInternalServerMockRecorder) SetMemberKYCLimitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemberKYCLimitation", reflect.TypeOf((*MockMemberInternalServer)(nil).SetMemberKYCLimitation), arg0, arg1)
}

// SetMembersLogout mocks base method.
func (m *MockMemberInternalServer) SetMembersLogout(arg0 context.Context, arg1 *user.SetMembersLogoutRequest) (*user.SetMembersLogoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMembersLogout", arg0, arg1)
	ret0, _ := ret[0].(*user.SetMembersLogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMembersLogout indicates an expected call of SetMembersLogout.
func (mr *MockMemberInternalServerMockRecorder) SetMembersLogout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMembersLogout", reflect.TypeOf((*MockMemberInternalServer)(nil).SetMembersLogout), arg0, arg1)
}

// SiteCreateUser mocks base method.
func (m *MockMemberInternalServer) SiteCreateUser(arg0 context.Context, arg1 *user.SiteCreateUserRequest) (*user.SiteCreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SiteCreateUser", arg0, arg1)
	ret0, _ := ret[0].(*user.SiteCreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiteCreateUser indicates an expected call of SiteCreateUser.
func (mr *MockMemberInternalServerMockRecorder) SiteCreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiteCreateUser", reflect.TypeOf((*MockMemberInternalServer)(nil).SiteCreateUser), arg0, arg1)
}

// UnbindGoogle2Fa mocks base method.
func (m *MockMemberInternalServer) UnbindGoogle2Fa(arg0 context.Context, arg1 *user.UnbindGoogle2FaRequest) (*user.UnbindGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindGoogle2Fa", arg0, arg1)
	ret0, _ := ret[0].(*user.UnbindGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindGoogle2Fa indicates an expected call of UnbindGoogle2Fa.
func (mr *MockMemberInternalServerMockRecorder) UnbindGoogle2Fa(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindGoogle2Fa", reflect.TypeOf((*MockMemberInternalServer)(nil).UnbindGoogle2Fa), arg0, arg1)
}

// UnbindPaymentPassword mocks base method.
func (m *MockMemberInternalServer) UnbindPaymentPassword(arg0 context.Context, arg1 *user.UnbindPaymentPasswordRequest) (*user.UnbindPaymentPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindPaymentPassword", arg0, arg1)
	ret0, _ := ret[0].(*user.UnbindPaymentPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindPaymentPassword indicates an expected call of UnbindPaymentPassword.
func (mr *MockMemberInternalServerMockRecorder) UnbindPaymentPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindPaymentPassword", reflect.TypeOf((*MockMemberInternalServer)(nil).UnbindPaymentPassword), arg0, arg1)
}

// UpdateApplication mocks base method.
func (m *MockMemberInternalServer) UpdateApplication(arg0 context.Context, arg1 *user.UpdateApplicationRequest) (*user.UpdateApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockMemberInternalServerMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockMemberInternalServer)(nil).UpdateApplication), arg0, arg1)
}

// UpdateMemberSubAccountNum mocks base method.
func (m *MockMemberInternalServer) UpdateMemberSubAccountNum(arg0 context.Context, arg1 *user.UpdateMemberSubAccountNumRequest) (*user.UpdateMemberSubAccountNumResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberSubAccountNum", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateMemberSubAccountNumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMemberSubAccountNum indicates an expected call of UpdateMemberSubAccountNum.
func (mr *MockMemberInternalServerMockRecorder) UpdateMemberSubAccountNum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberSubAccountNum", reflect.TypeOf((*MockMemberInternalServer)(nil).UpdateMemberSubAccountNum), arg0, arg1)
}

// UpdateOpenAPIExpiredMemberLogin mocks base method.
func (m *MockMemberInternalServer) UpdateOpenAPIExpiredMemberLogin(arg0 context.Context, arg1 *user.UpdateOpenApiExpiredMemberLoginRequest) (*user.UpdateOpenApiExpiredMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOpenAPIExpiredMemberLogin", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateOpenApiExpiredMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpenAPIExpiredMemberLogin indicates an expected call of UpdateOpenAPIExpiredMemberLogin.
func (mr *MockMemberInternalServerMockRecorder) UpdateOpenAPIExpiredMemberLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenAPIExpiredMemberLogin", reflect.TypeOf((*MockMemberInternalServer)(nil).UpdateOpenAPIExpiredMemberLogin), arg0, arg1)
}

// UpdateOpenAPIMemberLogin mocks base method.
func (m *MockMemberInternalServer) UpdateOpenAPIMemberLogin(arg0 context.Context, arg1 *user.UpdateOpenApiMemberLoginRequest) (*user.UpdateOpenApiMemberLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOpenAPIMemberLogin", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateOpenApiMemberLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpenAPIMemberLogin indicates an expected call of UpdateOpenAPIMemberLogin.
func (mr *MockMemberInternalServerMockRecorder) UpdateOpenAPIMemberLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenAPIMemberLogin", reflect.TypeOf((*MockMemberInternalServer)(nil).UpdateOpenAPIMemberLogin), arg0, arg1)
}

// UpdateOpenAPIMemberLoginByAPIKey mocks base method.
func (m *MockMemberInternalServer) UpdateOpenAPIMemberLoginByAPIKey(arg0 context.Context, arg1 *user.UpdateOpenApiMemberLoginByApiKeyRequest) (*user.UpdateOpenApiMemberLoginByApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOpenAPIMemberLoginByAPIKey", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateOpenApiMemberLoginByApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpenAPIMemberLoginByAPIKey indicates an expected call of UpdateOpenAPIMemberLoginByAPIKey.
func (mr *MockMemberInternalServerMockRecorder) UpdateOpenAPIMemberLoginByAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenAPIMemberLoginByAPIKey", reflect.TypeOf((*MockMemberInternalServer)(nil).UpdateOpenAPIMemberLoginByAPIKey), arg0, arg1)
}

// UpdateSelfUnbindRecords mocks base method.
func (m *MockMemberInternalServer) UpdateSelfUnbindRecords(arg0 context.Context, arg1 *user.UpdateSelfUnbindRecordsRequest) (*user.UpdateSelfUnbindRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSelfUnbindRecords", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateSelfUnbindRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelfUnbindRecords indicates an expected call of UpdateSelfUnbindRecords.
func (mr *MockMemberInternalServerMockRecorder) UpdateSelfUnbindRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelfUnbindRecords", reflect.TypeOf((*MockMemberInternalServer)(nil).UpdateSelfUnbindRecords), arg0, arg1)
}

// UpdateTradingToolWhiteIPS mocks base method.
func (m *MockMemberInternalServer) UpdateTradingToolWhiteIPS(arg0 context.Context, arg1 *user.UpdateTradingToolWhiteIPSRequest) (*user.UpdateTradingToolWhiteIPSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTradingToolWhiteIPS", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateTradingToolWhiteIPSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTradingToolWhiteIPS indicates an expected call of UpdateTradingToolWhiteIPS.
func (mr *MockMemberInternalServerMockRecorder) UpdateTradingToolWhiteIPS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTradingToolWhiteIPS", reflect.TypeOf((*MockMemberInternalServer)(nil).UpdateTradingToolWhiteIPS), arg0, arg1)
}

// VerifyEmail mocks base method.
func (m *MockMemberInternalServer) VerifyEmail(arg0 context.Context, arg1 *user.VerifyEmailRequest) (*user.VerifyEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockMemberInternalServerMockRecorder) VerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockMemberInternalServer)(nil).VerifyEmail), arg0, arg1)
}

// VerifyGoogle2Fa mocks base method.
func (m *MockMemberInternalServer) VerifyGoogle2Fa(arg0 context.Context, arg1 *user.VerifyGoogle2FaRequest) (*user.VerifyGoogle2FaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyGoogle2Fa", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyGoogle2FaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyGoogle2Fa indicates an expected call of VerifyGoogle2Fa.
func (mr *MockMemberInternalServerMockRecorder) VerifyGoogle2Fa(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyGoogle2Fa", reflect.TypeOf((*MockMemberInternalServer)(nil).VerifyGoogle2Fa), arg0, arg1)
}

// VerifyMobile mocks base method.
func (m *MockMemberInternalServer) VerifyMobile(arg0 context.Context, arg1 *user.VerifyMobileRequest) (*user.VerifyMobileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMobile", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyMobileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMobile indicates an expected call of VerifyMobile.
func (mr *MockMemberInternalServerMockRecorder) VerifyMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMobile", reflect.TypeOf((*MockMemberInternalServer)(nil).VerifyMobile), arg0, arg1)
}

// VerifyOpenAPI mocks base method.
func (m *MockMemberInternalServer) VerifyOpenAPI(arg0 context.Context, arg1 *user.VerifyOpenApiRequest) (*user.VerifyOpenApiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOpenAPI", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyOpenApiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOpenAPI indicates an expected call of VerifyOpenAPI.
func (mr *MockMemberInternalServerMockRecorder) VerifyOpenAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOpenAPI", reflect.TypeOf((*MockMemberInternalServer)(nil).VerifyOpenAPI), arg0, arg1)
}

// VerifyRiskToken mocks base method.
func (m *MockMemberInternalServer) VerifyRiskToken(arg0 context.Context, arg1 *user.RiskTokenVerifyRequest) (*user.VerifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRiskToken", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRiskToken indicates an expected call of VerifyRiskToken.
func (mr *MockMemberInternalServerMockRecorder) VerifyRiskToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRiskToken", reflect.TypeOf((*MockMemberInternalServer)(nil).VerifyRiskToken), arg0, arg1)
}

// mustEmbedUnimplementedMemberInternalServer mocks base method.
func (m *MockMemberInternalServer) mustEmbedUnimplementedMemberInternalServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMemberInternalServer")
}

// mustEmbedUnimplementedMemberInternalServer indicates an expected call of mustEmbedUnimplementedMemberInternalServer.
func (mr *MockMemberInternalServerMockRecorder) mustEmbedUnimplementedMemberInternalServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMemberInternalServer", reflect.TypeOf((*MockMemberInternalServer)(nil).mustEmbedUnimplementedMemberInternalServer))
}

// MockConfigInternalClient is a mock of ConfigInternalClient interface.
type MockConfigInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigInternalClientMockRecorder
}

// MockConfigInternalClientMockRecorder is the mock recorder for MockConfigInternalClient.
type MockConfigInternalClientMockRecorder struct {
	mock *MockConfigInternalClient
}

// NewMockConfigInternalClient creates a new mock instance.
func NewMockConfigInternalClient(ctrl *gomock.Controller) *MockConfigInternalClient {
	mock := &MockConfigInternalClient{ctrl: ctrl}
	mock.recorder = &MockConfigInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigInternalClient) EXPECT() *MockConfigInternalClientMockRecorder {
	return m.recorder
}

// GetKYCQuotas mocks base method.
func (m *MockConfigInternalClient) GetKYCQuotas(ctx context.Context, in *user.GetKYCQuotasRequest, opts ...grpc.CallOption) (*user.GetKYCQuotasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKYCQuotas", varargs...)
	ret0, _ := ret[0].(*user.GetKYCQuotasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKYCQuotas indicates an expected call of GetKYCQuotas.
func (mr *MockConfigInternalClientMockRecorder) GetKYCQuotas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKYCQuotas", reflect.TypeOf((*MockConfigInternalClient)(nil).GetKYCQuotas), varargs...)
}

// SetKYCQuotas mocks base method.
func (m *MockConfigInternalClient) SetKYCQuotas(ctx context.Context, in *user.SetKYCQuotasRequest, opts ...grpc.CallOption) (*user.SetKYCQuotasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetKYCQuotas", varargs...)
	ret0, _ := ret[0].(*user.SetKYCQuotasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetKYCQuotas indicates an expected call of SetKYCQuotas.
func (mr *MockConfigInternalClientMockRecorder) SetKYCQuotas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKYCQuotas", reflect.TypeOf((*MockConfigInternalClient)(nil).SetKYCQuotas), varargs...)
}

// MockConfigInternalServer is a mock of ConfigInternalServer interface.
type MockConfigInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigInternalServerMockRecorder
}

// MockConfigInternalServerMockRecorder is the mock recorder for MockConfigInternalServer.
type MockConfigInternalServerMockRecorder struct {
	mock *MockConfigInternalServer
}

// NewMockConfigInternalServer creates a new mock instance.
func NewMockConfigInternalServer(ctrl *gomock.Controller) *MockConfigInternalServer {
	mock := &MockConfigInternalServer{ctrl: ctrl}
	mock.recorder = &MockConfigInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigInternalServer) EXPECT() *MockConfigInternalServerMockRecorder {
	return m.recorder
}

// GetKYCQuotas mocks base method.
func (m *MockConfigInternalServer) GetKYCQuotas(arg0 context.Context, arg1 *user.GetKYCQuotasRequest) (*user.GetKYCQuotasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKYCQuotas", arg0, arg1)
	ret0, _ := ret[0].(*user.GetKYCQuotasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKYCQuotas indicates an expected call of GetKYCQuotas.
func (mr *MockConfigInternalServerMockRecorder) GetKYCQuotas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKYCQuotas", reflect.TypeOf((*MockConfigInternalServer)(nil).GetKYCQuotas), arg0, arg1)
}

// SetKYCQuotas mocks base method.
func (m *MockConfigInternalServer) SetKYCQuotas(arg0 context.Context, arg1 *user.SetKYCQuotasRequest) (*user.SetKYCQuotasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKYCQuotas", arg0, arg1)
	ret0, _ := ret[0].(*user.SetKYCQuotasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetKYCQuotas indicates an expected call of SetKYCQuotas.
func (mr *MockConfigInternalServerMockRecorder) SetKYCQuotas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKYCQuotas", reflect.TypeOf((*MockConfigInternalServer)(nil).SetKYCQuotas), arg0, arg1)
}

// mustEmbedUnimplementedConfigInternalServer mocks base method.
func (m *MockConfigInternalServer) mustEmbedUnimplementedConfigInternalServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigInternalServer")
}

// mustEmbedUnimplementedConfigInternalServer indicates an expected call of mustEmbedUnimplementedConfigInternalServer.
func (mr *MockConfigInternalServerMockRecorder) mustEmbedUnimplementedConfigInternalServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigInternalServer", reflect.TypeOf((*MockConfigInternalServer)(nil).mustEmbedUnimplementedConfigInternalServer))
}

// MockCommonInternalClient is a mock of CommonInternalClient interface.
type MockCommonInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommonInternalClientMockRecorder
}

// MockCommonInternalClientMockRecorder is the mock recorder for MockCommonInternalClient.
type MockCommonInternalClientMockRecorder struct {
	mock *MockCommonInternalClient
}

// NewMockCommonInternalClient creates a new mock instance.
func NewMockCommonInternalClient(ctrl *gomock.Controller) *MockCommonInternalClient {
	mock := &MockCommonInternalClient{ctrl: ctrl}
	mock.recorder = &MockCommonInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonInternalClient) EXPECT() *MockCommonInternalClientMockRecorder {
	return m.recorder
}

// GetCountryByCode mocks base method.
func (m *MockCommonInternalClient) GetCountryByCode(ctx context.Context, in *user.GetCountryByCodeRequest, opts ...grpc.CallOption) (*user.GetCountryByCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCountryByCode", varargs...)
	ret0, _ := ret[0].(*user.GetCountryByCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByCode indicates an expected call of GetCountryByCode.
func (mr *MockCommonInternalClientMockRecorder) GetCountryByCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByCode", reflect.TypeOf((*MockCommonInternalClient)(nil).GetCountryByCode), varargs...)
}

// GetCountryList mocks base method.
func (m *MockCommonInternalClient) GetCountryList(ctx context.Context, in *user.GetCountryListRequest, opts ...grpc.CallOption) (*user.GetCountryListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCountryList", varargs...)
	ret0, _ := ret[0].(*user.GetCountryListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryList indicates an expected call of GetCountryList.
func (mr *MockCommonInternalClientMockRecorder) GetCountryList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryList", reflect.TypeOf((*MockCommonInternalClient)(nil).GetCountryList), varargs...)
}

// MockCommonInternalServer is a mock of CommonInternalServer interface.
type MockCommonInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockCommonInternalServerMockRecorder
}

// MockCommonInternalServerMockRecorder is the mock recorder for MockCommonInternalServer.
type MockCommonInternalServerMockRecorder struct {
	mock *MockCommonInternalServer
}

// NewMockCommonInternalServer creates a new mock instance.
func NewMockCommonInternalServer(ctrl *gomock.Controller) *MockCommonInternalServer {
	mock := &MockCommonInternalServer{ctrl: ctrl}
	mock.recorder = &MockCommonInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonInternalServer) EXPECT() *MockCommonInternalServerMockRecorder {
	return m.recorder
}

// GetCountryByCode mocks base method.
func (m *MockCommonInternalServer) GetCountryByCode(arg0 context.Context, arg1 *user.GetCountryByCodeRequest) (*user.GetCountryByCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByCode", arg0, arg1)
	ret0, _ := ret[0].(*user.GetCountryByCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByCode indicates an expected call of GetCountryByCode.
func (mr *MockCommonInternalServerMockRecorder) GetCountryByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByCode", reflect.TypeOf((*MockCommonInternalServer)(nil).GetCountryByCode), arg0, arg1)
}

// GetCountryList mocks base method.
func (m *MockCommonInternalServer) GetCountryList(arg0 context.Context, arg1 *user.GetCountryListRequest) (*user.GetCountryListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryList", arg0, arg1)
	ret0, _ := ret[0].(*user.GetCountryListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryList indicates an expected call of GetCountryList.
func (mr *MockCommonInternalServerMockRecorder) GetCountryList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryList", reflect.TypeOf((*MockCommonInternalServer)(nil).GetCountryList), arg0, arg1)
}

// mustEmbedUnimplementedCommonInternalServer mocks base method.
func (m *MockCommonInternalServer) mustEmbedUnimplementedCommonInternalServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCommonInternalServer")
}

// mustEmbedUnimplementedCommonInternalServer indicates an expected call of mustEmbedUnimplementedCommonInternalServer.
func (mr *MockCommonInternalServerMockRecorder) mustEmbedUnimplementedCommonInternalServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCommonInternalServer", reflect.TypeOf((*MockCommonInternalServer)(nil).mustEmbedUnimplementedCommonInternalServer))
}
