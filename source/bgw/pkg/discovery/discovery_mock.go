// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package mock is a generated GoMock package.
package discovery

import (
	registry "bgw/pkg/registry"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceDiscovery is a mock of ServiceDiscovery interface.
type MockServiceDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDiscoveryMockRecorder
}

// MockServiceDiscoveryMockRecorder is the mock recorder for MockServiceDiscovery.
type MockServiceDiscoveryMockRecorder struct {
	mock *MockServiceDiscovery
}

// NewMockServiceDiscovery creates a new mock instance.
func NewMockServiceDiscovery(ctrl *gomock.Controller) *MockServiceDiscovery {
	mock := &MockServiceDiscovery{ctrl: ctrl}
	mock.recorder = &MockServiceDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDiscovery) EXPECT() *MockServiceDiscoveryMockRecorder {
	return m.recorder
}

// AddListener mocks base method.
func (m *MockServiceDiscovery) AddListener(listener registry.ServiceListener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddListener", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddListener indicates an expected call of AddListener.
func (mr *MockServiceDiscoveryMockRecorder) AddListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockServiceDiscovery)(nil).AddListener), listener)
}

// Destroy mocks base method.
func (m *MockServiceDiscovery) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockServiceDiscoveryMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockServiceDiscovery)(nil).Destroy))
}

// DispatchEvent mocks base method.
func (m *MockServiceDiscovery) DispatchEvent(event *registry.ServiceInstancesChangedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEvent indicates an expected call of DispatchEvent.
func (mr *MockServiceDiscoveryMockRecorder) DispatchEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEvent", reflect.TypeOf((*MockServiceDiscovery)(nil).DispatchEvent), event)
}

// DispatchEventByServiceName mocks base method.
func (m *MockServiceDiscovery) DispatchEventByServiceName(service registry.ServiceMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEventByServiceName", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEventByServiceName indicates an expected call of DispatchEventByServiceName.
func (mr *MockServiceDiscoveryMockRecorder) DispatchEventByServiceName(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEventByServiceName", reflect.TypeOf((*MockServiceDiscovery)(nil).DispatchEventByServiceName), service)
}

// DispatchEventForInstances mocks base method.
func (m *MockServiceDiscovery) DispatchEventForInstances(service registry.ServiceMeta, instances []registry.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEventForInstances", service, instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEventForInstances indicates an expected call of DispatchEventForInstances.
func (mr *MockServiceDiscoveryMockRecorder) DispatchEventForInstances(service, instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEventForInstances", reflect.TypeOf((*MockServiceDiscovery)(nil).DispatchEventForInstances), service, instances)
}

// GetInstances mocks base method.
func (m *MockServiceDiscovery) GetInstances(serviceName string) []registry.ServiceInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", serviceName)
	ret0, _ := ret[0].([]registry.ServiceInstance)
	return ret0
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockServiceDiscoveryMockRecorder) GetInstances(serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockServiceDiscovery)(nil).GetInstances), serviceName)
}

// Register mocks base method.
func (m *MockServiceDiscovery) Register(instance registry.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockServiceDiscoveryMockRecorder) Register(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServiceDiscovery)(nil).Register), instance)
}

// Unregister mocks base method.
func (m *MockServiceDiscovery) Unregister(instance registry.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockServiceDiscoveryMockRecorder) Unregister(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockServiceDiscovery)(nil).Unregister), instance)
}

// Update mocks base method.
func (m *MockServiceDiscovery) Update(instance registry.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceDiscoveryMockRecorder) Update(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceDiscovery)(nil).Update), instance)
}
