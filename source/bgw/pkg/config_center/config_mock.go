// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sh00465ml/Documents/workspace/bgw/pkg/config_center/config_center.go

// Package mock_config_center is a generated GoMock package.
package config_center

import (
	context "context"
	reflect "reflect"

	observer "code.bydev.io/fbu/gateway/gway.git/gcore/observer"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigure is a mock of Configure interface.
type MockConfigure struct {
	ctrl     *gomock.Controller
	recorder *MockConfigureMockRecorder
}

// MockConfigureMockRecorder is the mock recorder for MockConfigure.
type MockConfigureMockRecorder struct {
	mock *MockConfigure
}

// NewMockConfigure creates a new mock instance.
func NewMockConfigure(ctrl *gomock.Controller) *MockConfigure {
	mock := &MockConfigure{ctrl: ctrl}
	mock.recorder = &MockConfigureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigure) EXPECT() *MockConfigureMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockConfigure) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockConfigureMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockConfigure)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockConfigure) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigureMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigure)(nil).Get), ctx, key)
}

// GetChildren mocks base method.
func (m *MockConfigure) GetChildren(ctx context.Context, key string) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockConfigureMockRecorder) GetChildren(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockConfigure)(nil).GetChildren), ctx, key)
}

// Listen mocks base method.
func (m *MockConfigure) Listen(ctx context.Context, key string, listener observer.EventListener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx, key, listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockConfigureMockRecorder) Listen(ctx, key, listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockConfigure)(nil).Listen), ctx, key, listener)
}

// Put mocks base method.
func (m *MockConfigure) Put(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockConfigureMockRecorder) Put(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockConfigure)(nil).Put), ctx, key, value)
}
