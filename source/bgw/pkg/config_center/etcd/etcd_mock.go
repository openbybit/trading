// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/code.bydev.io/fbu/gateway/gway.git/getcd/etcd.go

// Package mock is a generated GoMock package.
package etcd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockClient) BatchCreate(kList, vList []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", kList, vList)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockClientMockRecorder) BatchCreate(kList, vList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockClient)(nil).BatchCreate), kList, vList)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Create mocks base method.
func (m *MockClient) Create(k, v string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), k, v)
}

// Delete mocks base method.
func (m *MockClient) Delete(k string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), k)
}

// Done mocks base method.
func (m *MockClient) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockClientMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockClient)(nil).Done))
}

// Get mocks base method.
func (m *MockClient) Get(k string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), k)
}

// GetChildren mocks base method.
func (m *MockClient) GetChildren(k string, isDir ...bool) ([]string, []string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{k}
	for _, a := range isDir {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChildren", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockClientMockRecorder) GetChildren(k interface{}, isDir ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{k}, isDir...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockClient)(nil).GetChildren), varargs...)
}

// GetChildrenKVList mocks base method.
func (m *MockClient) GetChildrenKVList(k string) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildrenKVList", k)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetChildrenKVList indicates an expected call of GetChildrenKVList.
func (mr *MockClientMockRecorder) GetChildrenKVList(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenKVList", reflect.TypeOf((*MockClient)(nil).GetChildrenKVList), k)
}

// GetCtx mocks base method.
func (m *MockClient) GetCtx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCtx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetCtx indicates an expected call of GetCtx.
func (mr *MockClientMockRecorder) GetCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCtx", reflect.TypeOf((*MockClient)(nil).GetCtx))
}

// GetEndPoints mocks base method.
func (m *MockClient) GetEndPoints() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndPoints")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetEndPoints indicates an expected call of GetEndPoints.
func (mr *MockClientMockRecorder) GetEndPoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndPoints", reflect.TypeOf((*MockClient)(nil).GetEndPoints))
}

// GetRawClient mocks base method.
func (m *MockClient) GetRawClient() *clientv3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawClient")
	ret0, _ := ret[0].(*clientv3.Client)
	return ret0
}

// GetRawClient indicates an expected call of GetRawClient.
func (mr *MockClientMockRecorder) GetRawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawClient", reflect.TypeOf((*MockClient)(nil).GetRawClient))
}

// GetValAndRev mocks base method.
func (m *MockClient) GetValAndRev(k string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValAndRev", k)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValAndRev indicates an expected call of GetValAndRev.
func (mr *MockClientMockRecorder) GetValAndRev(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValAndRev", reflect.TypeOf((*MockClient)(nil).GetValAndRev), k)
}

// Put mocks base method.
func (m *MockClient) Put(k, v string, opts ...clientv3.OpOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{k, v}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockClientMockRecorder) Put(k, v interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{k, v}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), varargs...)
}

// RegisterTemp mocks base method.
func (m *MockClient) RegisterTemp(k, v string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTemp", k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTemp indicates an expected call of RegisterTemp.
func (mr *MockClientMockRecorder) RegisterTemp(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTemp", reflect.TypeOf((*MockClient)(nil).RegisterTemp), k, v)
}

// Update mocks base method.
func (m *MockClient) Update(k, v string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), k, v)
}

// UpdateWithRev mocks base method.
func (m *MockClient) UpdateWithRev(k, v string, rev int64, opts ...clientv3.OpOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{k, v, rev}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWithRev", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithRev indicates an expected call of UpdateWithRev.
func (mr *MockClientMockRecorder) UpdateWithRev(k, v, rev interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{k, v, rev}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithRev", reflect.TypeOf((*MockClient)(nil).UpdateWithRev), varargs...)
}

// Valid mocks base method.
func (m *MockClient) Valid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockClientMockRecorder) Valid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockClient)(nil).Valid))
}

// Watch mocks base method.
func (m *MockClient) Watch(k string) (clientv3.WatchChan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", k)
	ret0, _ := ret[0].(clientv3.WatchChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClientMockRecorder) Watch(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), k)
}

// WatchWithOption mocks base method.
func (m *MockClient) WatchWithOption(k string, opts ...clientv3.OpOption) (clientv3.WatchChan, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{k}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchWithOption", varargs...)
	ret0, _ := ret[0].(clientv3.WatchChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchWithOption indicates an expected call of WatchWithOption.
func (mr *MockClientMockRecorder) WatchWithOption(k interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{k}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchWithOption", reflect.TypeOf((*MockClient)(nil).WatchWithOption), varargs...)
}

// WatchWithPrefix mocks base method.
func (m *MockClient) WatchWithPrefix(prefix string) (clientv3.WatchChan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchWithPrefix", prefix)
	ret0, _ := ret[0].(clientv3.WatchChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchWithPrefix indicates an expected call of WatchWithPrefix.
func (mr *MockClientMockRecorder) WatchWithPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchWithPrefix", reflect.TypeOf((*MockClient)(nil).WatchWithPrefix), prefix)
}
