// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sh00465ml/Documents/workspace/bgw/pkg/service/masque/oauth.go

// Package mock_masque is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	oauthv1 "code.bydev.io/cht/backend-bj/user-service/buf-user-gen.git/pkg/bybit/oauth/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockOauthIface is a mock of OauthIface interface.
type MockOauthIface struct {
	ctrl     *gomock.Controller
	recorder *MockOauthIfaceMockRecorder
}

// MockOauthIfaceMockRecorder is the mock recorder for MockOauthIface.
type MockOauthIfaceMockRecorder struct {
	mock *MockOauthIface
}

// NewMockOauthIface creates a new mock instance.
func NewMockOauthIface(ctrl *gomock.Controller) *MockOauthIface {
	mock := &MockOauthIface{ctrl: ctrl}
	mock.recorder = &MockOauthIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthIface) EXPECT() *MockOauthIfaceMockRecorder {
	return m.recorder
}

// OAuth mocks base method.
func (m *MockOauthIface) OAuth(ctx context.Context, token string) (*oauthv1.OAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuth", ctx, token)
	ret0, _ := ret[0].(*oauthv1.OAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuth indicates an expected call of OAuth.
func (mr *MockOauthIfaceMockRecorder) OAuth(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuth", reflect.TypeOf((*MockOauthIface)(nil).OAuth), ctx, token)
}
