// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sh00465ml/go/pkg/mod/git.bybit.com/svc/stub/pkg/pb@v0.0.0-20230718103429-8cf280594876/api/ban/service_grpc.pb.go

// Package mock_ban is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	ban "git.bybit.com/svc/stub/pkg/pb/api/ban"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBanInternalClient is a mock of BanInternalClient interface.
type MockBanInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockBanInternalClientMockRecorder
}

// MockBanInternalClientMockRecorder is the mock recorder for MockBanInternalClient.
type MockBanInternalClientMockRecorder struct {
	mock *MockBanInternalClient
}

// NewMockBanInternalClient creates a new mock instance.
func NewMockBanInternalClient(ctrl *gomock.Controller) *MockBanInternalClient {
	mock := &MockBanInternalClient{ctrl: ctrl}
	mock.recorder = &MockBanInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanInternalClient) EXPECT() *MockBanInternalClientMockRecorder {
	return m.recorder
}

// BatchQueryBanStatus mocks base method.
func (m *MockBanInternalClient) BatchQueryBanStatus(ctx context.Context, in *ban.BatchQueryBanStatusRequest, opts ...grpc.CallOption) (*ban.BatchQueryBanStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchQueryBanStatus", varargs...)
	ret0, _ := ret[0].(*ban.BatchQueryBanStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchQueryBanStatus indicates an expected call of BatchQueryBanStatus.
func (mr *MockBanInternalClientMockRecorder) BatchQueryBanStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchQueryBanStatus", reflect.TypeOf((*MockBanInternalClient)(nil).BatchQueryBanStatus), varargs...)
}

// BatchQueryRenewStatus mocks base method.
func (m *MockBanInternalClient) BatchQueryRenewStatus(ctx context.Context, in *ban.BatchQueryRenewStatusRequest, opts ...grpc.CallOption) (*ban.BatchQueryRenewStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchQueryRenewStatus", varargs...)
	ret0, _ := ret[0].(*ban.BatchQueryRenewStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchQueryRenewStatus indicates an expected call of BatchQueryRenewStatus.
func (mr *MockBanInternalClientMockRecorder) BatchQueryRenewStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchQueryRenewStatus", reflect.TypeOf((*MockBanInternalClient)(nil).BatchQueryRenewStatus), varargs...)
}

// DisableBan mocks base method.
func (m *MockBanInternalClient) DisableBan(ctx context.Context, in *ban.DisableBanRequest, opts ...grpc.CallOption) (*ban.DisableBanResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableBan", varargs...)
	ret0, _ := ret[0].(*ban.DisableBanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableBan indicates an expected call of DisableBan.
func (mr *MockBanInternalClientMockRecorder) DisableBan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBan", reflect.TypeOf((*MockBanInternalClient)(nil).DisableBan), varargs...)
}

// EnableBan mocks base method.
func (m *MockBanInternalClient) EnableBan(ctx context.Context, in *ban.EnableBanRequest, opts ...grpc.CallOption) (*ban.EnableBanResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableBan", varargs...)
	ret0, _ := ret[0].(*ban.EnableBanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableBan indicates an expected call of EnableBan.
func (mr *MockBanInternalClientMockRecorder) EnableBan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBan", reflect.TypeOf((*MockBanInternalClient)(nil).EnableBan), varargs...)
}

// GetBanAreas mocks base method.
func (m *MockBanInternalClient) GetBanAreas(ctx context.Context, in *ban.GetBanAreasRequest, opts ...grpc.CallOption) (*ban.GetBanAreasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBanAreas", varargs...)
	ret0, _ := ret[0].(*ban.GetBanAreasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanAreas indicates an expected call of GetBanAreas.
func (mr *MockBanInternalClientMockRecorder) GetBanAreas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanAreas", reflect.TypeOf((*MockBanInternalClient)(nil).GetBanAreas), varargs...)
}

// QueryBanBizItems mocks base method.
func (m *MockBanInternalClient) QueryBanBizItems(ctx context.Context, in *ban.QueryBanBizItemsRequest, opts ...grpc.CallOption) (*ban.QueryBanBizItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBanBizItems", varargs...)
	ret0, _ := ret[0].(*ban.QueryBanBizItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanBizItems indicates an expected call of QueryBanBizItems.
func (mr *MockBanInternalClientMockRecorder) QueryBanBizItems(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanBizItems", reflect.TypeOf((*MockBanInternalClient)(nil).QueryBanBizItems), varargs...)
}

// QueryBanSceneStatus mocks base method.
func (m *MockBanInternalClient) QueryBanSceneStatus(ctx context.Context, in *ban.QueryBanSceneStatusRequest, opts ...grpc.CallOption) (*ban.QueryBanSceneStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBanSceneStatus", varargs...)
	ret0, _ := ret[0].(*ban.QueryBanSceneStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanSceneStatus indicates an expected call of QueryBanSceneStatus.
func (mr *MockBanInternalClientMockRecorder) QueryBanSceneStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanSceneStatus", reflect.TypeOf((*MockBanInternalClient)(nil).QueryBanSceneStatus), varargs...)
}

// QueryBanStatus mocks base method.
func (m *MockBanInternalClient) QueryBanStatus(ctx context.Context, in *ban.QueryBanStatusRequest, opts ...grpc.CallOption) (*ban.QueryBanStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBanStatus", varargs...)
	ret0, _ := ret[0].(*ban.QueryBanStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanStatus indicates an expected call of QueryBanStatus.
func (mr *MockBanInternalClientMockRecorder) QueryBanStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanStatus", reflect.TypeOf((*MockBanInternalClient)(nil).QueryBanStatus), varargs...)
}

// MockBanInternalServer is a mock of BanInternalServer interface.
type MockBanInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockBanInternalServerMockRecorder
}

// MockBanInternalServerMockRecorder is the mock recorder for MockBanInternalServer.
type MockBanInternalServerMockRecorder struct {
	mock *MockBanInternalServer
}

// NewMockBanInternalServer creates a new mock instance.
func NewMockBanInternalServer(ctrl *gomock.Controller) *MockBanInternalServer {
	mock := &MockBanInternalServer{ctrl: ctrl}
	mock.recorder = &MockBanInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanInternalServer) EXPECT() *MockBanInternalServerMockRecorder {
	return m.recorder
}

// BatchQueryBanStatus mocks base method.
func (m *MockBanInternalServer) BatchQueryBanStatus(arg0 context.Context, arg1 *ban.BatchQueryBanStatusRequest) (*ban.BatchQueryBanStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchQueryBanStatus", arg0, arg1)
	ret0, _ := ret[0].(*ban.BatchQueryBanStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchQueryBanStatus indicates an expected call of BatchQueryBanStatus.
func (mr *MockBanInternalServerMockRecorder) BatchQueryBanStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchQueryBanStatus", reflect.TypeOf((*MockBanInternalServer)(nil).BatchQueryBanStatus), arg0, arg1)
}

// BatchQueryRenewStatus mocks base method.
func (m *MockBanInternalServer) BatchQueryRenewStatus(arg0 context.Context, arg1 *ban.BatchQueryRenewStatusRequest) (*ban.BatchQueryRenewStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchQueryRenewStatus", arg0, arg1)
	ret0, _ := ret[0].(*ban.BatchQueryRenewStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchQueryRenewStatus indicates an expected call of BatchQueryRenewStatus.
func (mr *MockBanInternalServerMockRecorder) BatchQueryRenewStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchQueryRenewStatus", reflect.TypeOf((*MockBanInternalServer)(nil).BatchQueryRenewStatus), arg0, arg1)
}

// DisableBan mocks base method.
func (m *MockBanInternalServer) DisableBan(arg0 context.Context, arg1 *ban.DisableBanRequest) (*ban.DisableBanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBan", arg0, arg1)
	ret0, _ := ret[0].(*ban.DisableBanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableBan indicates an expected call of DisableBan.
func (mr *MockBanInternalServerMockRecorder) DisableBan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBan", reflect.TypeOf((*MockBanInternalServer)(nil).DisableBan), arg0, arg1)
}

// EnableBan mocks base method.
func (m *MockBanInternalServer) EnableBan(arg0 context.Context, arg1 *ban.EnableBanRequest) (*ban.EnableBanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBan", arg0, arg1)
	ret0, _ := ret[0].(*ban.EnableBanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableBan indicates an expected call of EnableBan.
func (mr *MockBanInternalServerMockRecorder) EnableBan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBan", reflect.TypeOf((*MockBanInternalServer)(nil).EnableBan), arg0, arg1)
}

// GetBanAreas mocks base method.
func (m *MockBanInternalServer) GetBanAreas(arg0 context.Context, arg1 *ban.GetBanAreasRequest) (*ban.GetBanAreasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanAreas", arg0, arg1)
	ret0, _ := ret[0].(*ban.GetBanAreasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanAreas indicates an expected call of GetBanAreas.
func (mr *MockBanInternalServerMockRecorder) GetBanAreas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanAreas", reflect.TypeOf((*MockBanInternalServer)(nil).GetBanAreas), arg0, arg1)
}

// QueryBanBizItems mocks base method.
func (m *MockBanInternalServer) QueryBanBizItems(arg0 context.Context, arg1 *ban.QueryBanBizItemsRequest) (*ban.QueryBanBizItemsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBanBizItems", arg0, arg1)
	ret0, _ := ret[0].(*ban.QueryBanBizItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanBizItems indicates an expected call of QueryBanBizItems.
func (mr *MockBanInternalServerMockRecorder) QueryBanBizItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanBizItems", reflect.TypeOf((*MockBanInternalServer)(nil).QueryBanBizItems), arg0, arg1)
}

// QueryBanSceneStatus mocks base method.
func (m *MockBanInternalServer) QueryBanSceneStatus(arg0 context.Context, arg1 *ban.QueryBanSceneStatusRequest) (*ban.QueryBanSceneStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBanSceneStatus", arg0, arg1)
	ret0, _ := ret[0].(*ban.QueryBanSceneStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanSceneStatus indicates an expected call of QueryBanSceneStatus.
func (mr *MockBanInternalServerMockRecorder) QueryBanSceneStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanSceneStatus", reflect.TypeOf((*MockBanInternalServer)(nil).QueryBanSceneStatus), arg0, arg1)
}

// QueryBanStatus mocks base method.
func (m *MockBanInternalServer) QueryBanStatus(arg0 context.Context, arg1 *ban.QueryBanStatusRequest) (*ban.QueryBanStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBanStatus", arg0, arg1)
	ret0, _ := ret[0].(*ban.QueryBanStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBanStatus indicates an expected call of QueryBanStatus.
func (mr *MockBanInternalServerMockRecorder) QueryBanStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBanStatus", reflect.TypeOf((*MockBanInternalServer)(nil).QueryBanStatus), arg0, arg1)
}

// mustEmbedUnimplementedBanInternalServer mocks base method.
func (m *MockBanInternalServer) mustEmbedUnimplementedBanInternalServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBanInternalServer")
}

// mustEmbedUnimplementedBanInternalServer indicates an expected call of mustEmbedUnimplementedBanInternalServer.
func (mr *MockBanInternalServerMockRecorder) mustEmbedUnimplementedBanInternalServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBanInternalServer", reflect.TypeOf((*MockBanInternalServer)(nil).mustEmbedUnimplementedBanInternalServer))
}
