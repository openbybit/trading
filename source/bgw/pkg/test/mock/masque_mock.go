// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/masque/masque.go

// Package mock is a generated GoMock package.
package mock

import (
	masque "bgw/pkg/service/masque"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMasqueIface is a mock of MasqueIface interface.
type MockMasqueIface struct {
	ctrl     *gomock.Controller
	recorder *MockMasqueIfaceMockRecorder
}

// MockMasqueIfaceMockRecorder is the mock recorder for MockMasqueIface.
type MockMasqueIfaceMockRecorder struct {
	mock *MockMasqueIface
}

// NewMockMasqueIface creates a new mock instance.
func NewMockMasqueIface(ctrl *gomock.Controller) *MockMasqueIface {
	mock := &MockMasqueIface{ctrl: ctrl}
	mock.recorder = &MockMasqueIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasqueIface) EXPECT() *MockMasqueIfaceMockRecorder {
	return m.recorder
}

// MasqueTokenInvoke mocks base method.
func (m *MockMasqueIface) MasqueTokenInvoke(ctx context.Context, platform, token, originUrl string, typ masque.MasqueType) (*masque.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MasqueTokenInvoke", ctx, platform, token, originUrl, typ)
	ret0, _ := ret[0].(*masque.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MasqueTokenInvoke indicates an expected call of MasqueTokenInvoke.
func (mr *MockMasqueIfaceMockRecorder) MasqueTokenInvoke(ctx, platform, token, originUrl, typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasqueTokenInvoke", reflect.TypeOf((*MockMasqueIface)(nil).MasqueTokenInvoke), ctx, platform, token, originUrl, typ)
}
