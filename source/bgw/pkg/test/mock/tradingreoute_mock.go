// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/tradingroute/routing.go

// Package mock_tradingroute is a generated GoMock package.
package mock

import (
	tradingroute "bgw/pkg/service/tradingroute"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRouting is a mock of Routing interface.
type MockRouting struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingMockRecorder
}

// MockRoutingMockRecorder is the mock recorder for MockRouting.
type MockRoutingMockRecorder struct {
	mock *MockRouting
}

// NewMockRouting creates a new mock instance.
func NewMockRouting(ctrl *gomock.Controller) *MockRouting {
	mock := &MockRouting{ctrl: ctrl}
	mock.recorder = &MockRoutingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouting) EXPECT() *MockRoutingMockRecorder {
	return m.recorder
}

// ClearInstances mocks base method.
func (m *MockRouting) ClearInstances() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearInstances")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ClearInstances indicates an expected call of ClearInstances.
func (mr *MockRoutingMockRecorder) ClearInstances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearInstances", reflect.TypeOf((*MockRouting)(nil).ClearInstances))
}

// ClearRoutingByUser mocks base method.
func (m *MockRouting) ClearRoutingByUser(userId int64, scope string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearRoutingByUser", userId, scope)
}

// ClearRoutingByUser indicates an expected call of ClearRoutingByUser.
func (mr *MockRoutingMockRecorder) ClearRoutingByUser(userId, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRoutingByUser", reflect.TypeOf((*MockRouting)(nil).ClearRoutingByUser), userId, scope)
}

// ClearRoutings mocks base method.
func (m *MockRouting) ClearRoutings() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearRoutings")
}

// ClearRoutings indicates an expected call of ClearRoutings.
func (mr *MockRoutingMockRecorder) ClearRoutings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRoutings", reflect.TypeOf((*MockRouting)(nil).ClearRoutings))
}

// GetEndpoint mocks base method.
func (m *MockRouting) GetEndpoint(ctx context.Context, in *tradingroute.GetRouteRequest) (tradingroute.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoint", ctx, in)
	ret0, _ := ret[0].(tradingroute.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoint indicates an expected call of GetEndpoint.
func (mr *MockRoutingMockRecorder) GetEndpoint(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoint", reflect.TypeOf((*MockRouting)(nil).GetEndpoint), ctx, in)
}

// IsAioUser mocks base method.
func (m *MockRouting) IsAioUser(ctx context.Context, userId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAioUser", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAioUser indicates an expected call of IsAioUser.
func (mr *MockRoutingMockRecorder) IsAioUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAioUser", reflect.TypeOf((*MockRouting)(nil).IsAioUser), ctx, userId)
}

// Namespace mocks base method.
func (m *MockRouting) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockRoutingMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockRouting)(nil).Namespace))
}
