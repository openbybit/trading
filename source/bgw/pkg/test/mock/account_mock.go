// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/user/account.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountIface is a mock of AccountIface interface.
type MockAccountIface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountIfaceMockRecorder
}

// MockAccountIfaceMockRecorder is the mock recorder for MockAccountIface.
type MockAccountIfaceMockRecorder struct {
	mock *MockAccountIface
}

// NewMockAccountIface creates a new mock instance.
func NewMockAccountIface(ctrl *gomock.Controller) *MockAccountIface {
	mock := &MockAccountIface{ctrl: ctrl}
	mock.recorder = &MockAccountIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountIface) EXPECT() *MockAccountIfaceMockRecorder {
	return m.recorder
}

// GetAccountID mocks base method.
func (m *MockAccountIface) GetAccountID(ctx context.Context, uid int64, accountType string, bizType int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountID", ctx, uid, accountType, bizType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountID indicates an expected call of GetAccountID.
func (mr *MockAccountIfaceMockRecorder) GetAccountID(ctx, uid, accountType, bizType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountID", reflect.TypeOf((*MockAccountIface)(nil).GetAccountID), ctx, uid, accountType, bizType)
}

// GetBizAccountIDByApps mocks base method.
func (m *MockAccountIface) GetBizAccountIDByApps(ctx context.Context, uid int64, bizType int, apps ...string) ([]int64, []error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uid, bizType}
	for _, a := range apps {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBizAccountIDByApps", varargs...)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// GetBizAccountIDByApps indicates an expected call of GetBizAccountIDByApps.
func (mr *MockAccountIfaceMockRecorder) GetBizAccountIDByApps(ctx, uid, bizType interface{}, apps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uid, bizType}, apps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBizAccountIDByApps", reflect.TypeOf((*MockAccountIface)(nil).GetBizAccountIDByApps), varargs...)
}

// GetUnifiedMarginAccountID mocks base method.
func (m *MockAccountIface) GetUnifiedMarginAccountID(ctx context.Context, uid int64, bizType int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnifiedMarginAccountID", ctx, uid, bizType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnifiedMarginAccountID indicates an expected call of GetUnifiedMarginAccountID.
func (mr *MockAccountIfaceMockRecorder) GetUnifiedMarginAccountID(ctx, uid, bizType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnifiedMarginAccountID", reflect.TypeOf((*MockAccountIface)(nil).GetUnifiedMarginAccountID), ctx, uid, bizType)
}

// GetUnifiedTradingAccountID mocks base method.
func (m *MockAccountIface) GetUnifiedTradingAccountID(ctx context.Context, uid int64, bizType int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnifiedTradingAccountID", ctx, uid, bizType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnifiedTradingAccountID indicates an expected call of GetUnifiedTradingAccountID.
func (mr *MockAccountIfaceMockRecorder) GetUnifiedTradingAccountID(ctx, uid, bizType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnifiedTradingAccountID", reflect.TypeOf((*MockAccountIface)(nil).GetUnifiedTradingAccountID), ctx, uid, bizType)
}

// QueryMemberTag mocks base method.
func (m *MockAccountIface) QueryMemberTag(ctx context.Context, uid int64, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMemberTag", ctx, uid, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemberTag indicates an expected call of QueryMemberTag.
func (mr *MockAccountIfaceMockRecorder) QueryMemberTag(ctx, uid, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemberTag", reflect.TypeOf((*MockAccountIface)(nil).QueryMemberTag), ctx, uid, tag)
}
