// Code generated by MockGen. DO NOT EDIT.
// Source: city.go

// Package geo is a generated GoMock package.
package geo

import (
	reflect "reflect"

	geoipdb "code.bydev.io/fbu/gateway/gway.git/geo/geoipdb"
	gomock "github.com/golang/mock/gomock"
)

// MockCity is a mock of City interface.
type MockCity struct {
	ctrl     *gomock.Controller
	recorder *MockCityMockRecorder
}

// MockCityMockRecorder is the mock recorder for MockCity.
type MockCityMockRecorder struct {
	mock *MockCity
}

// NewMockCity creates a new mock instance.
func NewMockCity(ctrl *gomock.Controller) *MockCity {
	mock := &MockCity{ctrl: ctrl}
	mock.recorder = &MockCityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCity) EXPECT() *MockCityMockRecorder {
	return m.recorder
}

// GetGeoNameID mocks base method.
func (m *MockCity) GetGeoNameID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoNameID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetGeoNameID indicates an expected call of GetGeoNameID.
func (mr *MockCityMockRecorder) GetGeoNameID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoNameID", reflect.TypeOf((*MockCity)(nil).GetGeoNameID))
}

// GetName mocks base method.
func (m *MockCity) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockCityMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockCity)(nil).GetName))
}

// GetSubdivision mocks base method.
func (m *MockCity) GetSubdivision() geoipdb.Subdivisions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubdivision")
	ret0, _ := ret[0].(geoipdb.Subdivisions)
	return ret0
}

// GetSubdivision indicates an expected call of GetSubdivision.
func (mr *MockCityMockRecorder) GetSubdivision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubdivision", reflect.TypeOf((*MockCity)(nil).GetSubdivision))
}

// GetSubdivisions mocks base method.
func (m *MockCity) GetSubdivisions() []geoipdb.Subdivisions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubdivisions")
	ret0, _ := ret[0].([]geoipdb.Subdivisions)
	return ret0
}

// GetSubdivisions indicates an expected call of GetSubdivisions.
func (mr *MockCityMockRecorder) GetSubdivisions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubdivisions", reflect.TypeOf((*MockCity)(nil).GetSubdivisions))
}
