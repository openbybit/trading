// Code generated by MockGen. DO NOT EDIT.
// Source: country.go

// Package geoipdb is a generated GoMock package.
package geoipdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCountry is a mock of Country interface.
type MockCountry struct {
	ctrl     *gomock.Controller
	recorder *MockCountryMockRecorder
}

// MockCountryMockRecorder is the mock recorder for MockCountry.
type MockCountryMockRecorder struct {
	mock *MockCountry
}

// NewMockCountry creates a new mock instance.
func NewMockCountry(ctrl *gomock.Controller) *MockCountry {
	mock := &MockCountry{ctrl: ctrl}
	mock.recorder = &MockCountryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountry) EXPECT() *MockCountryMockRecorder {
	return m.recorder
}

// GetGeoNameID mocks base method.
func (m *MockCountry) GetGeoNameID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoNameID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetGeoNameID indicates an expected call of GetGeoNameID.
func (mr *MockCountryMockRecorder) GetGeoNameID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoNameID", reflect.TypeOf((*MockCountry)(nil).GetGeoNameID))
}

// GetISO mocks base method.
func (m *MockCountry) GetISO() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISO")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetISO indicates an expected call of GetISO.
func (mr *MockCountryMockRecorder) GetISO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetISO", reflect.TypeOf((*MockCountry)(nil).GetISO))
}

// GetNames mocks base method.
func (m *MockCountry) GetNames() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNames")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetNames indicates an expected call of GetNames.
func (mr *MockCountryMockRecorder) GetNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNames", reflect.TypeOf((*MockCountry)(nil).GetNames))
}

// IsInEuropeanUnion mocks base method.
func (m *MockCountry) IsInEuropeanUnion() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInEuropeanUnion")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInEuropeanUnion indicates an expected call of IsInEuropeanUnion.
func (mr *MockCountryMockRecorder) IsInEuropeanUnion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInEuropeanUnion", reflect.TypeOf((*MockCountry)(nil).IsInEuropeanUnion))
}
