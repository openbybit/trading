// Code generated by MockGen. DO NOT EDIT.
// Source: city.go

// Package geoipdb is a generated GoMock package.
package geoipdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCity is a mock of City interface.
type MockCity struct {
	ctrl     *gomock.Controller
	recorder *MockCityMockRecorder
}

// MockCityMockRecorder is the mock recorder for MockCity.
type MockCityMockRecorder struct {
	mock *MockCity
}

// NewMockCity creates a new mock instance.
func NewMockCity(ctrl *gomock.Controller) *MockCity {
	mock := &MockCity{ctrl: ctrl}
	mock.recorder = &MockCityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCity) EXPECT() *MockCityMockRecorder {
	return m.recorder
}

// GetCountryGeoNameID mocks base method.
func (m *MockCity) GetCountryGeoNameID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryGeoNameID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetCountryGeoNameID indicates an expected call of GetCountryGeoNameID.
func (mr *MockCityMockRecorder) GetCountryGeoNameID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryGeoNameID", reflect.TypeOf((*MockCity)(nil).GetCountryGeoNameID))
}

// GetCountryNames mocks base method.
func (m *MockCity) GetCountryNames() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryNames")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetCountryNames indicates an expected call of GetCountryNames.
func (mr *MockCityMockRecorder) GetCountryNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryNames", reflect.TypeOf((*MockCity)(nil).GetCountryNames))
}

// GetGeoNameID mocks base method.
func (m *MockCity) GetGeoNameID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoNameID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetGeoNameID indicates an expected call of GetGeoNameID.
func (mr *MockCityMockRecorder) GetGeoNameID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoNameID", reflect.TypeOf((*MockCity)(nil).GetGeoNameID))
}

// GetISO mocks base method.
func (m *MockCity) GetISO() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISO")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetISO indicates an expected call of GetISO.
func (mr *MockCityMockRecorder) GetISO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetISO", reflect.TypeOf((*MockCity)(nil).GetISO))
}

// GetNames mocks base method.
func (m *MockCity) GetNames() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNames")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetNames indicates an expected call of GetNames.
func (mr *MockCityMockRecorder) GetNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNames", reflect.TypeOf((*MockCity)(nil).GetNames))
}

// IsInEuropeanUnion mocks base method.
func (m *MockCity) IsInEuropeanUnion() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInEuropeanUnion")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInEuropeanUnion indicates an expected call of IsInEuropeanUnion.
func (mr *MockCityMockRecorder) IsInEuropeanUnion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInEuropeanUnion", reflect.TypeOf((*MockCity)(nil).IsInEuropeanUnion))
}
