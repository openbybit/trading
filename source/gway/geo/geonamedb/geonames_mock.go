// Code generated by MockGen. DO NOT EDIT.
// Source: geonames.go

// Package geonamedb is a generated GoMock package.
package geonamedb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGeoName is a mock of GeoName interface.
type MockGeoName struct {
	ctrl     *gomock.Controller
	recorder *MockGeoNameMockRecorder
}

// MockGeoNameMockRecorder is the mock recorder for MockGeoName.
type MockGeoNameMockRecorder struct {
	mock *MockGeoName
}

// NewMockGeoName creates a new mock instance.
func NewMockGeoName(ctrl *gomock.Controller) *MockGeoName {
	mock := &MockGeoName{ctrl: ctrl}
	mock.recorder = &MockGeoNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoName) EXPECT() *MockGeoNameMockRecorder {
	return m.recorder
}

// QueryByGeoNameID mocks base method.
func (m *MockGeoName) QueryByGeoNameID(geonameID int64) (GeoNameQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByGeoNameID", geonameID)
	ret0, _ := ret[0].(GeoNameQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByGeoNameID indicates an expected call of QueryByGeoNameID.
func (mr *MockGeoNameMockRecorder) QueryByGeoNameID(geonameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByGeoNameID", reflect.TypeOf((*MockGeoName)(nil).QueryByGeoNameID), geonameID)
}

// QueryCityByGeoNameID mocks base method.
func (m *MockGeoName) QueryCityByGeoNameID(geonameID int64) (*GeoNameCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCityByGeoNameID", geonameID)
	ret0, _ := ret[0].(*GeoNameCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCityByGeoNameID indicates an expected call of QueryCityByGeoNameID.
func (mr *MockGeoNameMockRecorder) QueryCityByGeoNameID(geonameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCityByGeoNameID", reflect.TypeOf((*MockGeoName)(nil).QueryCityByGeoNameID), geonameID)
}

// QueryCountryByGeoNameID mocks base method.
func (m *MockGeoName) QueryCountryByGeoNameID(geonameID int64) (*GeonameCountry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCountryByGeoNameID", geonameID)
	ret0, _ := ret[0].(*GeonameCountry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCountryByGeoNameID indicates an expected call of QueryCountryByGeoNameID.
func (mr *MockGeoNameMockRecorder) QueryCountryByGeoNameID(geonameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCountryByGeoNameID", reflect.TypeOf((*MockGeoName)(nil).QueryCountryByGeoNameID), geonameID)
}

// QueryCountryByISO mocks base method.
func (m *MockGeoName) QueryCountryByISO(iso string) (*GeonameCountry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCountryByISO", iso)
	ret0, _ := ret[0].(*GeonameCountry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCountryByISO indicates an expected call of QueryCountryByISO.
func (mr *MockGeoNameMockRecorder) QueryCountryByISO(iso interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCountryByISO", reflect.TypeOf((*MockGeoName)(nil).QueryCountryByISO), iso)
}
