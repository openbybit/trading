// Code generated by MockGen. DO NOT EDIT.
// Source: geo.go

// Package geo is a generated GoMock package.
package geo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGeoManager is a mock of GeoManager interface.
type MockGeoManager struct {
	ctrl     *gomock.Controller
	recorder *MockGeoManagerMockRecorder
}

// MockGeoManagerMockRecorder is the mock recorder for MockGeoManager.
type MockGeoManagerMockRecorder struct {
	mock *MockGeoManager
}

// NewMockGeoManager creates a new mock instance.
func NewMockGeoManager(ctrl *gomock.Controller) *MockGeoManager {
	mock := &MockGeoManager{ctrl: ctrl}
	mock.recorder = &MockGeoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoManager) EXPECT() *MockGeoManagerMockRecorder {
	return m.recorder
}

// ClearCache mocks base method.
func (m *MockGeoManager) ClearCache(ctx context.Context, ip string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearCache", ctx, ip)
}

// ClearCache indicates an expected call of ClearCache.
func (mr *MockGeoManagerMockRecorder) ClearCache(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockGeoManager)(nil).ClearCache), ctx, ip)
}

// QueryCache mocks base method.
func (m *MockGeoManager) QueryCache(ctx context.Context, ip string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCache", ctx, ip)
	ret0, _ := ret[0].(string)
	return ret0
}

// QueryCache indicates an expected call of QueryCache.
func (mr *MockGeoManagerMockRecorder) QueryCache(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCache", reflect.TypeOf((*MockGeoManager)(nil).QueryCache), ctx, ip)
}

// QueryCityAndCountry mocks base method.
func (m *MockGeoManager) QueryCityAndCountry(ctx context.Context, ip string) (GeoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCityAndCountry", ctx, ip)
	ret0, _ := ret[0].(GeoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCityAndCountry indicates an expected call of QueryCityAndCountry.
func (mr *MockGeoManagerMockRecorder) QueryCityAndCountry(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCityAndCountry", reflect.TypeOf((*MockGeoManager)(nil).QueryCityAndCountry), ctx, ip)
}
