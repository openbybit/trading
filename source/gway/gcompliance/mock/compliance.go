// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sh00372ml/go/pkg/mod/code.bydev.io/cht/customer/kyc-stub.git/pkg@v0.0.0-20230418062443-e9cfcba6a63b/bybit/compliancewall/strategy/v1/compliance_api.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "code.bydev.io/cht/customer/kyc-stub.git/pkg/bybit/compliancewall/strategy/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockComplianceAPIClient is a mock of ComplianceAPIClient interface.
type MockComplianceAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceAPIClientMockRecorder
}

// MockComplianceAPIClientMockRecorder is the mock recorder for MockComplianceAPIClient.
type MockComplianceAPIClientMockRecorder struct {
	mock *MockComplianceAPIClient
}

// NewMockComplianceAPIClient creates a new mock instance.
func NewMockComplianceAPIClient(ctrl *gomock.Controller) *MockComplianceAPIClient {
	mock := &MockComplianceAPIClient{ctrl: ctrl}
	mock.recorder = &MockComplianceAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceAPIClient) EXPECT() *MockComplianceAPIClientMockRecorder {
	return m.recorder
}

// GetComplianceConfig mocks base method.
func (m *MockComplianceAPIClient) GetComplianceConfig(ctx context.Context, in *v1.GetComplianceConfigReq, opts ...grpc.CallOption) (*v1.GetComplianceConfigResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceConfig", varargs...)
	ret0, _ := ret[0].(*v1.GetComplianceConfigResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceConfig indicates an expected call of GetComplianceConfig.
func (mr *MockComplianceAPIClientMockRecorder) GetComplianceConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceConfig", reflect.TypeOf((*MockComplianceAPIClient)(nil).GetComplianceConfig), varargs...)
}

// MockComplianceAPIServer is a mock of ComplianceAPIServer interface.
type MockComplianceAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceAPIServerMockRecorder
}

// MockComplianceAPIServerMockRecorder is the mock recorder for MockComplianceAPIServer.
type MockComplianceAPIServerMockRecorder struct {
	mock *MockComplianceAPIServer
}

// NewMockComplianceAPIServer creates a new mock instance.
func NewMockComplianceAPIServer(ctrl *gomock.Controller) *MockComplianceAPIServer {
	mock := &MockComplianceAPIServer{ctrl: ctrl}
	mock.recorder = &MockComplianceAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceAPIServer) EXPECT() *MockComplianceAPIServerMockRecorder {
	return m.recorder
}

// GetComplianceConfig mocks base method.
func (m *MockComplianceAPIServer) GetComplianceConfig(arg0 context.Context, arg1 *v1.GetComplianceConfigReq) (*v1.GetComplianceConfigResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetComplianceConfigResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceConfig indicates an expected call of GetComplianceConfig.
func (mr *MockComplianceAPIServerMockRecorder) GetComplianceConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceConfig", reflect.TypeOf((*MockComplianceAPIServer)(nil).GetComplianceConfig), arg0, arg1)
}
