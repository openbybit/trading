// Code generated by MockGen. DO NOT EDIT.
// Source: wall.go

// Package gcompliance is a generated GoMock package.
package gcompliance

import (
	context "context"
	reflect "reflect"

	v1 "code.bydev.io/cht/customer/kyc-stub.git/pkg/bybit/compliancewall/strategy/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockWall is a mock of Wall interface.
type MockWall struct {
	ctrl     *gomock.Controller
	recorder *MockWallMockRecorder
}

// MockWallMockRecorder is the mock recorder for MockWall.
type MockWallMockRecorder struct {
	mock *MockWall
}

// NewMockWall creates a new mock instance.
func NewMockWall(ctrl *gomock.Controller) *MockWall {
	mock := &MockWall{ctrl: ctrl}
	mock.recorder = &MockWallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWall) EXPECT() *MockWallMockRecorder {
	return m.recorder
}

// CheckStrategy mocks base method.
func (m *MockWall) CheckStrategy(ctx context.Context, brokerID int32, siteID, scene string, uid int64, country, subDivision, source, userSiteID string) (Result, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStrategy", ctx, brokerID, siteID, scene, uid, country, subDivision, source, userSiteID)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStrategy indicates an expected call of CheckStrategy.
func (mr *MockWallMockRecorder) CheckStrategy(ctx, brokerID, siteID, scene, uid, country, subDivision, source, userSiteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStrategy", reflect.TypeOf((*MockWall)(nil).CheckStrategy), ctx, brokerID, siteID, scene, uid, country, subDivision, source, userSiteID)
}

// GetSiteConfig mocks base method.
func (m *MockWall) GetSiteConfig(ctx context.Context, brokerID int32, uid int64, siteID, product, userSiteID string) (string, *v1.SitesConfigItemConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteConfig", ctx, brokerID, uid, siteID, product, userSiteID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*v1.SitesConfigItemConfig)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSiteConfig indicates an expected call of GetSiteConfig.
func (mr *MockWallMockRecorder) GetSiteConfig(ctx, brokerID, uid, siteID, product, userSiteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteConfig", reflect.TypeOf((*MockWall)(nil).GetSiteConfig), ctx, brokerID, uid, siteID, product, userSiteID)
}

// GetStrategy mocks base method.
func (m *MockWall) GetStrategy(ctx context.Context, strategy string) map[string]map[string]*config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategy", ctx, strategy)
	ret0, _ := ret[0].(map[string]map[string]*config)
	return ret0
}

// GetStrategy indicates an expected call of GetStrategy.
func (mr *MockWallMockRecorder) GetStrategy(ctx, strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategy", reflect.TypeOf((*MockWall)(nil).GetStrategy), ctx, strategy)
}

// GetUserInfo mocks base method.
func (m *MockWall) GetUserInfo(ctx context.Context, uid int64) (UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, uid)
	ret0, _ := ret[0].(UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockWallMockRecorder) GetUserInfo(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockWall)(nil).GetUserInfo), ctx, uid)
}

// HandleSiteConfigEvent mocks base method.
func (m *MockWall) HandleSiteConfigEvent(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSiteConfigEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSiteConfigEvent indicates an expected call of HandleSiteConfigEvent.
func (mr *MockWallMockRecorder) HandleSiteConfigEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSiteConfigEvent", reflect.TypeOf((*MockWall)(nil).HandleSiteConfigEvent), arg0)
}

// HandleStrategyEvent mocks base method.
func (m *MockWall) HandleStrategyEvent(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStrategyEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStrategyEvent indicates an expected call of HandleStrategyEvent.
func (mr *MockWallMockRecorder) HandleStrategyEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStrategyEvent", reflect.TypeOf((*MockWall)(nil).HandleStrategyEvent), arg0)
}

// HandleUserKycEvent mocks base method.
func (m *MockWall) HandleUserKycEvent(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserKycEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserKycEvent indicates an expected call of HandleUserKycEvent.
func (mr *MockWallMockRecorder) HandleUserKycEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserKycEvent", reflect.TypeOf((*MockWall)(nil).HandleUserKycEvent), arg0)
}

// HandleUserWhiteListEvent mocks base method.
func (m *MockWall) HandleUserWhiteListEvent(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserWhiteListEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserWhiteListEvent indicates an expected call of HandleUserWhiteListEvent.
func (mr *MockWallMockRecorder) HandleUserWhiteListEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserWhiteListEvent", reflect.TypeOf((*MockWall)(nil).HandleUserWhiteListEvent), arg0)
}

// QuerySiteConfig mocks base method.
func (m *MockWall) QuerySiteConfig(ctx context.Context) map[string]*v1.SitesConfigItemConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySiteConfig", ctx)
	ret0, _ := ret[0].(map[string]*v1.SitesConfigItemConfig)
	return ret0
}

// QuerySiteConfig indicates an expected call of QuerySiteConfig.
func (mr *MockWallMockRecorder) QuerySiteConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySiteConfig", reflect.TypeOf((*MockWall)(nil).QuerySiteConfig), ctx)
}

// RemoveUserInfo mocks base method.
func (m *MockWall) RemoveUserInfo(ctx context.Context, uid int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveUserInfo", ctx, uid)
}

// RemoveUserInfo indicates an expected call of RemoveUserInfo.
func (mr *MockWallMockRecorder) RemoveUserInfo(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserInfo", reflect.TypeOf((*MockWall)(nil).RemoveUserInfo), ctx, uid)
}

// SetCityConfig mocks base method.
func (m *MockWall) SetCityConfig(countries, subDivisions []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCityConfig", countries, subDivisions)
}

// SetCityConfig indicates an expected call of SetCityConfig.
func (mr *MockWallMockRecorder) SetCityConfig(countries, subDivisions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCityConfig", reflect.TypeOf((*MockWall)(nil).SetCityConfig), countries, subDivisions)
}
