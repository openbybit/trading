// Code generated by MockGen. DO NOT EDIT.
// Source: pools.go

// Package pool is a generated GoMock package.
package pool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPools is a mock of Pools interface.
type MockPools struct {
	ctrl     *gomock.Controller
	recorder *MockPoolsMockRecorder
}

// MockPoolsMockRecorder is the mock recorder for MockPools.
type MockPoolsMockRecorder struct {
	mock *MockPools
}

// NewMockPools creates a new mock instance.
func NewMockPools(ctrl *gomock.Controller) *MockPools {
	mock := &MockPools{ctrl: ctrl}
	mock.recorder = &MockPoolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPools) EXPECT() *MockPoolsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPools) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPoolsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPools)(nil).Close))
}

// GetConn mocks base method.
func (m *MockPools) GetConn(ctx context.Context, target string) (Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", ctx, target)
	ret0, _ := ret[0].(Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn.
func (mr *MockPoolsMockRecorder) GetConn(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockPools)(nil).GetConn), ctx, target)
}

// GetStatus mocks base method.
func (m *MockPools) GetStatus(ctx context.Context, target string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, target)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockPoolsMockRecorder) GetStatus(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPools)(nil).GetStatus), ctx, target)
}

// Remove mocks base method.
func (m *MockPools) Remove(targets ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Remove", varargs...)
}

// Remove indicates an expected call of Remove.
func (mr *MockPoolsMockRecorder) Remove(targets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPools)(nil).Remove), targets...)
}
