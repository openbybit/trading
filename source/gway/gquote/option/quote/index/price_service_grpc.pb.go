// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: price_service.proto

package index

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexPriceServiceClient is the client API for IndexPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexPriceServiceClient interface {
	// *
	// 查询行情指数数据， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	Query(ctx context.Context, in *QuotePriceRequest, opts ...grpc.CallOption) (*QuotePrice, error)
	// *
	// 查询统一行情指数
	QueryUnifyQuotePrice(ctx context.Context, in *UnifyQuotePriceRequest, opts ...grpc.CallOption) (*UnifyQuotePrice, error)
	// *
	// 查询统一兑换率
	// 每次返回最新的汇率结果
	QueryExchangeRate(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateResponse, error)
	// *
	// 查询最新出售参考价
	// 每次返回最新的出售参考价
	QuerySellReferencePrice(ctx context.Context, in *SellReferencePriceRequest, opts ...grpc.CallOption) (*SellReferencePriceResponse, error)
	// *
	// 查询标的资产价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryUnderlyingPrice(ctx context.Context, in *UnderlyingPriceRequest, opts ...grpc.CallOption) (*UnderlyingPrice, error)
	// *
	// 查询现货指数价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryIndexPrice(ctx context.Context, in *IndexPriceRequest, opts ...grpc.CallOption) (*IndexPrice, error)
	// *
	// 查询标记价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryMarkPrice(ctx context.Context, in *MarkPriceRequest, opts ...grpc.CallOption) (*MarkPrice, error)
	// *
	// 查询交割价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryEstimatedDeliveryPrice(ctx context.Context, in *EstimatedDeliveryPriceRequest, opts ...grpc.CallOption) (*EstimatedDeliveryPrice, error)
}

type indexPriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexPriceServiceClient(cc grpc.ClientConnInterface) IndexPriceServiceClient {
	return &indexPriceServiceClient{cc}
}

func (c *indexPriceServiceClient) Query(ctx context.Context, in *QuotePriceRequest, opts ...grpc.CallOption) (*QuotePrice, error) {
	out := new(QuotePrice)
	err := c.cc.Invoke(ctx, "/IndexPriceService/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPriceServiceClient) QueryUnifyQuotePrice(ctx context.Context, in *UnifyQuotePriceRequest, opts ...grpc.CallOption) (*UnifyQuotePrice, error) {
	out := new(UnifyQuotePrice)
	err := c.cc.Invoke(ctx, "/IndexPriceService/queryUnifyQuotePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPriceServiceClient) QueryExchangeRate(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateResponse, error) {
	out := new(ExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/IndexPriceService/queryExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPriceServiceClient) QuerySellReferencePrice(ctx context.Context, in *SellReferencePriceRequest, opts ...grpc.CallOption) (*SellReferencePriceResponse, error) {
	out := new(SellReferencePriceResponse)
	err := c.cc.Invoke(ctx, "/IndexPriceService/querySellReferencePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPriceServiceClient) QueryUnderlyingPrice(ctx context.Context, in *UnderlyingPriceRequest, opts ...grpc.CallOption) (*UnderlyingPrice, error) {
	out := new(UnderlyingPrice)
	err := c.cc.Invoke(ctx, "/IndexPriceService/queryUnderlyingPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPriceServiceClient) QueryIndexPrice(ctx context.Context, in *IndexPriceRequest, opts ...grpc.CallOption) (*IndexPrice, error) {
	out := new(IndexPrice)
	err := c.cc.Invoke(ctx, "/IndexPriceService/queryIndexPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPriceServiceClient) QueryMarkPrice(ctx context.Context, in *MarkPriceRequest, opts ...grpc.CallOption) (*MarkPrice, error) {
	out := new(MarkPrice)
	err := c.cc.Invoke(ctx, "/IndexPriceService/queryMarkPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPriceServiceClient) QueryEstimatedDeliveryPrice(ctx context.Context, in *EstimatedDeliveryPriceRequest, opts ...grpc.CallOption) (*EstimatedDeliveryPrice, error) {
	out := new(EstimatedDeliveryPrice)
	err := c.cc.Invoke(ctx, "/IndexPriceService/queryEstimatedDeliveryPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexPriceServiceServer is the server API for IndexPriceService service.
// All implementations must embed UnimplementedIndexPriceServiceServer
// for forward compatibility
type IndexPriceServiceServer interface {
	// *
	// 查询行情指数数据， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	Query(context.Context, *QuotePriceRequest) (*QuotePrice, error)
	// *
	// 查询统一行情指数
	QueryUnifyQuotePrice(context.Context, *UnifyQuotePriceRequest) (*UnifyQuotePrice, error)
	// *
	// 查询统一兑换率
	// 每次返回最新的汇率结果
	QueryExchangeRate(context.Context, *ExchangeRateRequest) (*ExchangeRateResponse, error)
	// *
	// 查询最新出售参考价
	// 每次返回最新的出售参考价
	QuerySellReferencePrice(context.Context, *SellReferencePriceRequest) (*SellReferencePriceResponse, error)
	// *
	// 查询标的资产价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryUnderlyingPrice(context.Context, *UnderlyingPriceRequest) (*UnderlyingPrice, error)
	// *
	// 查询现货指数价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryIndexPrice(context.Context, *IndexPriceRequest) (*IndexPrice, error)
	// *
	// 查询标记价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryMarkPrice(context.Context, *MarkPriceRequest) (*MarkPrice, error)
	// *
	// 查询交割价格， timestamp为空，则返回最新数据
	// 查询历史数据，只能查询到历史1小说以内的数据
	QueryEstimatedDeliveryPrice(context.Context, *EstimatedDeliveryPriceRequest) (*EstimatedDeliveryPrice, error)
	mustEmbedUnimplementedIndexPriceServiceServer()
}

// UnimplementedIndexPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexPriceServiceServer struct {
}

func (UnimplementedIndexPriceServiceServer) Query(context.Context, *QuotePriceRequest) (*QuotePrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedIndexPriceServiceServer) QueryUnifyQuotePrice(context.Context, *UnifyQuotePriceRequest) (*UnifyQuotePrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnifyQuotePrice not implemented")
}
func (UnimplementedIndexPriceServiceServer) QueryExchangeRate(context.Context, *ExchangeRateRequest) (*ExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExchangeRate not implemented")
}
func (UnimplementedIndexPriceServiceServer) QuerySellReferencePrice(context.Context, *SellReferencePriceRequest) (*SellReferencePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySellReferencePrice not implemented")
}
func (UnimplementedIndexPriceServiceServer) QueryUnderlyingPrice(context.Context, *UnderlyingPriceRequest) (*UnderlyingPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnderlyingPrice not implemented")
}
func (UnimplementedIndexPriceServiceServer) QueryIndexPrice(context.Context, *IndexPriceRequest) (*IndexPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndexPrice not implemented")
}
func (UnimplementedIndexPriceServiceServer) QueryMarkPrice(context.Context, *MarkPriceRequest) (*MarkPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMarkPrice not implemented")
}
func (UnimplementedIndexPriceServiceServer) QueryEstimatedDeliveryPrice(context.Context, *EstimatedDeliveryPriceRequest) (*EstimatedDeliveryPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEstimatedDeliveryPrice not implemented")
}
func (UnimplementedIndexPriceServiceServer) mustEmbedUnimplementedIndexPriceServiceServer() {}

// UnsafeIndexPriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexPriceServiceServer will
// result in compilation errors.
type UnsafeIndexPriceServiceServer interface {
	mustEmbedUnimplementedIndexPriceServiceServer()
}

func RegisterIndexPriceServiceServer(s grpc.ServiceRegistrar, srv IndexPriceServiceServer) {
	s.RegisterService(&IndexPriceService_ServiceDesc, srv)
}

func _IndexPriceService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuotePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).Query(ctx, req.(*QuotePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPriceService_QueryUnifyQuotePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnifyQuotePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).QueryUnifyQuotePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/queryUnifyQuotePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).QueryUnifyQuotePrice(ctx, req.(*UnifyQuotePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPriceService_QueryExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).QueryExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/queryExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).QueryExchangeRate(ctx, req.(*ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPriceService_QuerySellReferencePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellReferencePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).QuerySellReferencePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/querySellReferencePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).QuerySellReferencePrice(ctx, req.(*SellReferencePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPriceService_QueryUnderlyingPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnderlyingPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).QueryUnderlyingPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/queryUnderlyingPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).QueryUnderlyingPrice(ctx, req.(*UnderlyingPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPriceService_QueryIndexPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).QueryIndexPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/queryIndexPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).QueryIndexPrice(ctx, req.(*IndexPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPriceService_QueryMarkPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).QueryMarkPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/queryMarkPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).QueryMarkPrice(ctx, req.(*MarkPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPriceService_QueryEstimatedDeliveryPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimatedDeliveryPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPriceServiceServer).QueryEstimatedDeliveryPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPriceService/queryEstimatedDeliveryPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPriceServiceServer).QueryEstimatedDeliveryPrice(ctx, req.(*EstimatedDeliveryPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexPriceService_ServiceDesc is the grpc.ServiceDesc for IndexPriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexPriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IndexPriceService",
	HandlerType: (*IndexPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _IndexPriceService_Query_Handler,
		},
		{
			MethodName: "queryUnifyQuotePrice",
			Handler:    _IndexPriceService_QueryUnifyQuotePrice_Handler,
		},
		{
			MethodName: "queryExchangeRate",
			Handler:    _IndexPriceService_QueryExchangeRate_Handler,
		},
		{
			MethodName: "querySellReferencePrice",
			Handler:    _IndexPriceService_QuerySellReferencePrice_Handler,
		},
		{
			MethodName: "queryUnderlyingPrice",
			Handler:    _IndexPriceService_QueryUnderlyingPrice_Handler,
		},
		{
			MethodName: "queryIndexPrice",
			Handler:    _IndexPriceService_QueryIndexPrice_Handler,
		},
		{
			MethodName: "queryMarkPrice",
			Handler:    _IndexPriceService_QueryMarkPrice_Handler,
		},
		{
			MethodName: "queryEstimatedDeliveryPrice",
			Handler:    _IndexPriceService_QueryEstimatedDeliveryPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "price_service.proto",
}
