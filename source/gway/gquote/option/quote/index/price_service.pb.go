// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.21.4
// source: price_service.proto

package index

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UnderlyingPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCoin   string `protobuf:"bytes,1,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`      //标的币种， BTC/ETH
	QuoteCoin  string `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`    //结算币种，USD
	ExpireTime int64  `protobuf:"varint,3,opt,name=expireTime,proto3" json:"expireTime,omitempty"` //到期时间
	Timestamp  int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`   //UNIX时间戳，秒级
	ReqId      string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *UnderlyingPriceRequest) Reset() {
	*x = UnderlyingPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderlyingPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderlyingPriceRequest) ProtoMessage() {}

func (x *UnderlyingPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderlyingPriceRequest.ProtoReflect.Descriptor instead.
func (*UnderlyingPriceRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{0}
}

func (x *UnderlyingPriceRequest) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *UnderlyingPriceRequest) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *UnderlyingPriceRequest) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UnderlyingPriceRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UnderlyingPriceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *
// 标的资产价格模型
// 订阅channel: underlying.${base_coin}_${quote_coin}.${expire_time}
// example: underlying.btc_usd.2021_09_30
type UnderlyingPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCoin              string `protobuf:"bytes,1,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`                           //标的币种， BTC/ETH
	QuoteCoin             string `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`                         //结算币种，USD
	ExpireTime            int64  `protobuf:"varint,3,opt,name=expireTime,proto3" json:"expireTime,omitempty"`                      //到期时间，UNIX时间戳，秒
	UnderlyingPrice       *Money `protobuf:"bytes,4,opt,name=underlyingPrice,proto3" json:"underlyingPrice,omitempty"`             //标的资产价格
	Timestamp             int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                        //UNIX时间戳，秒级
	UnderlyingOriginPrice *Money `protobuf:"bytes,6,opt,name=underlyingOriginPrice,proto3" json:"underlyingOriginPrice,omitempty"` //标的资产价格, 原始值，交割前30分钟未替换成EDP
	ReqId                 string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *UnderlyingPrice) Reset() {
	*x = UnderlyingPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderlyingPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderlyingPrice) ProtoMessage() {}

func (x *UnderlyingPrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderlyingPrice.ProtoReflect.Descriptor instead.
func (*UnderlyingPrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{1}
}

func (x *UnderlyingPrice) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *UnderlyingPrice) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *UnderlyingPrice) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UnderlyingPrice) GetUnderlyingPrice() *Money {
	if x != nil {
		return x.UnderlyingPrice
	}
	return nil
}

func (x *UnderlyingPrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UnderlyingPrice) GetUnderlyingOriginPrice() *Money {
	if x != nil {
		return x.UnderlyingOriginPrice
	}
	return nil
}

func (x *UnderlyingPrice) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type IndexPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCoin  string `protobuf:"bytes,1,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`    //标的币种， BTC/ETH
	QuoteCoin string `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`  //结算币种，USD
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //UNIX时间戳，秒级
	ReqId     string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *IndexPriceRequest) Reset() {
	*x = IndexPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexPriceRequest) ProtoMessage() {}

func (x *IndexPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexPriceRequest.ProtoReflect.Descriptor instead.
func (*IndexPriceRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{2}
}

func (x *IndexPriceRequest) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *IndexPriceRequest) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *IndexPriceRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IndexPriceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *
// 标的指数价格模型
// 订阅channel: index_price.${base_coin}_${quote_coin}
// example: index_price.btc_usd
type IndexPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCoin   string `protobuf:"bytes,1,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`     //标的币种， BTC/ETH
	QuoteCoin  string `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`   //结算币种，USD
	IndexPrice *Money `protobuf:"bytes,3,opt,name=indexPrice,proto3" json:"indexPrice,omitempty"` //现货指数
	Timestamp  int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //UNIX时间戳，秒级
	ReqId      string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *IndexPrice) Reset() {
	*x = IndexPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexPrice) ProtoMessage() {}

func (x *IndexPrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexPrice.ProtoReflect.Descriptor instead.
func (*IndexPrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{3}
}

func (x *IndexPrice) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *IndexPrice) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *IndexPrice) GetIndexPrice() *Money {
	if x != nil {
		return x.IndexPrice
	}
	return nil
}

func (x *IndexPrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IndexPrice) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type EstimatedDeliveryPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCoin   string `protobuf:"bytes,1,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`      //标的币种， BTC/ETH
	QuoteCoin  string `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`    //结算币种，USD
	ExpireTime int64  `protobuf:"varint,3,opt,name=expireTime,proto3" json:"expireTime,omitempty"` //到期时间，UNIX时间戳，秒
	Timestamp  int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`   //UNIX时间戳，秒级
	ReqId      string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *EstimatedDeliveryPriceRequest) Reset() {
	*x = EstimatedDeliveryPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimatedDeliveryPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimatedDeliveryPriceRequest) ProtoMessage() {}

func (x *EstimatedDeliveryPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimatedDeliveryPriceRequest.ProtoReflect.Descriptor instead.
func (*EstimatedDeliveryPriceRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{4}
}

func (x *EstimatedDeliveryPriceRequest) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *EstimatedDeliveryPriceRequest) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *EstimatedDeliveryPriceRequest) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *EstimatedDeliveryPriceRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EstimatedDeliveryPriceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *
// 期权交割价格模型
// 订阅channel: estimated_delivery_price.${base_coin}_${quote_coin}.${expire_time}
// example: estimated_delivery_price.btc_usd.2021_09_30
type EstimatedDeliveryPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCoin               string `protobuf:"bytes,1,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`                             //标的币种， BTC/ETH
	QuoteCoin              string `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`                           //结算币种，USD
	ExpireTime             int64  `protobuf:"varint,3,opt,name=expireTime,proto3" json:"expireTime,omitempty"`                        //到期时间，UNIX时间戳，秒
	EstimatedDeliveryPrice *Money `protobuf:"bytes,4,opt,name=estimatedDeliveryPrice,proto3" json:"estimatedDeliveryPrice,omitempty"` //交割价格
	Timestamp              int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          //UNIX时间戳，秒级
	ReqId                  string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *EstimatedDeliveryPrice) Reset() {
	*x = EstimatedDeliveryPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimatedDeliveryPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimatedDeliveryPrice) ProtoMessage() {}

func (x *EstimatedDeliveryPrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimatedDeliveryPrice.ProtoReflect.Descriptor instead.
func (*EstimatedDeliveryPrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{5}
}

func (x *EstimatedDeliveryPrice) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *EstimatedDeliveryPrice) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *EstimatedDeliveryPrice) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *EstimatedDeliveryPrice) GetEstimatedDeliveryPrice() *Money {
	if x != nil {
		return x.EstimatedDeliveryPrice
	}
	return nil
}

func (x *EstimatedDeliveryPrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EstimatedDeliveryPrice) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type MarkPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolName string `protobuf:"bytes,1,opt,name=symbolName,proto3" json:"symbolName,omitempty"` //期权名称， BTC-24JUN22-30000-C
	QuoteCoin  string `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`   //结算币种，USD
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //UNIX时间戳，秒级
	ReqId      string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *MarkPriceRequest) Reset() {
	*x = MarkPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPriceRequest) ProtoMessage() {}

func (x *MarkPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPriceRequest.ProtoReflect.Descriptor instead.
func (*MarkPriceRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{6}
}

func (x *MarkPriceRequest) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *MarkPriceRequest) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *MarkPriceRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MarkPriceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type Greeks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta *PrecisionDecimal `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	Gamma *PrecisionDecimal `protobuf:"bytes,2,opt,name=gamma,proto3" json:"gamma,omitempty"`
	Theta *PrecisionDecimal `protobuf:"bytes,3,opt,name=theta,proto3" json:"theta,omitempty"`
	Vega  *PrecisionDecimal `protobuf:"bytes,4,opt,name=vega,proto3" json:"vega,omitempty"`
}

func (x *Greeks) Reset() {
	*x = Greeks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Greeks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Greeks) ProtoMessage() {}

func (x *Greeks) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Greeks.ProtoReflect.Descriptor instead.
func (*Greeks) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{7}
}

func (x *Greeks) GetDelta() *PrecisionDecimal {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *Greeks) GetGamma() *PrecisionDecimal {
	if x != nil {
		return x.Gamma
	}
	return nil
}

func (x *Greeks) GetTheta() *PrecisionDecimal {
	if x != nil {
		return x.Theta
	}
	return nil
}

func (x *Greeks) GetVega() *PrecisionDecimal {
	if x != nil {
		return x.Vega
	}
	return nil
}

// *
// 标记价格模型
// 订阅channel: mark_price.${symbol}.${quote_coin}
// example: mark_price.BTC-24JUN22-30000-C.usd
type MarkPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolName     string            `protobuf:"bytes,1,opt,name=symbolName,proto3" json:"symbolName,omitempty"` //期权名称， BTC-24JUN22-30000-C
	QuoteCoin      string            `protobuf:"bytes,2,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`   //结算币种，USD
	MarkPrice      *Money            `protobuf:"bytes,3,opt,name=markPrice,proto3" json:"markPrice,omitempty"`   //标记价格
	Timestamp      int64             `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //UNIX时间戳，秒级
	MarkIV         *PrecisionDecimal `protobuf:"bytes,5,opt,name=markIV,proto3" json:"markIV,omitempty"`
	Greeks         *Greeks           `protobuf:"bytes,6,opt,name=greeks,proto3" json:"greeks,omitempty"`
	UnSmoothMarkIV *PrecisionDecimal `protobuf:"bytes,7,opt,name=unSmoothMarkIV,proto3" json:"unSmoothMarkIV,omitempty"` //未平滑markiv
	ReqId          string            `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *MarkPrice) Reset() {
	*x = MarkPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPrice) ProtoMessage() {}

func (x *MarkPrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPrice.ProtoReflect.Descriptor instead.
func (*MarkPrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{8}
}

func (x *MarkPrice) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *MarkPrice) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *MarkPrice) GetMarkPrice() *Money {
	if x != nil {
		return x.MarkPrice
	}
	return nil
}

func (x *MarkPrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MarkPrice) GetMarkIV() *PrecisionDecimal {
	if x != nil {
		return x.MarkIV
	}
	return nil
}

func (x *MarkPrice) GetGreeks() *Greeks {
	if x != nil {
		return x.Greeks
	}
	return nil
}

func (x *MarkPrice) GetUnSmoothMarkIV() *PrecisionDecimal {
	if x != nil {
		return x.UnSmoothMarkIV
	}
	return nil
}

func (x *MarkPrice) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *
// 期货价格
type FuturePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolName string            `protobuf:"bytes,1,opt,name=symbolName,proto3" json:"symbolName,omitempty"`
	BaseCoin   string            `protobuf:"bytes,2,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`
	QuoteCoin  string            `protobuf:"bytes,3,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`
	IndexPrice *PrecisionDecimal `protobuf:"bytes,4,opt,name=indexPrice,proto3" json:"indexPrice,omitempty"`
	MarkPrice  *PrecisionDecimal `protobuf:"bytes,5,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
	// 系统计算时时间戳
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 数据来源的时间戳
	OriginalTimestamp int64 `protobuf:"varint,7,opt,name=originalTimestamp,proto3" json:"originalTimestamp,omitempty"`
	// 最新成交价,可空
	LastPrice *PrecisionDecimal `protobuf:"bytes,8,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`
}

func (x *FuturePrice) Reset() {
	*x = FuturePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuturePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuturePrice) ProtoMessage() {}

func (x *FuturePrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuturePrice.ProtoReflect.Descriptor instead.
func (*FuturePrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{9}
}

func (x *FuturePrice) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *FuturePrice) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *FuturePrice) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *FuturePrice) GetIndexPrice() *PrecisionDecimal {
	if x != nil {
		return x.IndexPrice
	}
	return nil
}

func (x *FuturePrice) GetMarkPrice() *PrecisionDecimal {
	if x != nil {
		return x.MarkPrice
	}
	return nil
}

func (x *FuturePrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FuturePrice) GetOriginalTimestamp() int64 {
	if x != nil {
		return x.OriginalTimestamp
	}
	return 0
}

func (x *FuturePrice) GetLastPrice() *PrecisionDecimal {
	if x != nil {
		return x.LastPrice
	}
	return nil
}

// *
// 所有行情指数价格数据模型
// 订阅channel: quote_price.${base_coin}_${quote_coin}
// example: quote_price.btc_usd
// 注意: 批量订阅行情指数价格，1秒推送一次，延迟略大于单次推送接口(delay < 1s)
type QuotePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp                 int64                        `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                                                         //UNIX时间戳，秒级
	BaseCoin                  string                       `protobuf:"bytes,2,opt,name=base_coin,json=baseCoin,proto3" json:"base_coin,omitempty"`                                                                                                            //标的币种
	QuoteCoin                 string                       `protobuf:"bytes,3,opt,name=quote_coin,json=quoteCoin,proto3" json:"quote_coin,omitempty"`                                                                                                         //结算币种
	IndexPrice                *Money                       `protobuf:"bytes,4,opt,name=indexPrice,proto3" json:"indexPrice,omitempty"`                                                                                                                        //指数价格
	MarkPriceMap              map[string]*Money            `protobuf:"bytes,5,rep,name=markPriceMap,proto3" json:"markPriceMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                            //${symbol_name} -> mark price
	UnderlyingPriceMap        map[int64]*Money             `protobuf:"bytes,6,rep,name=underlyingPriceMap,proto3" json:"underlyingPriceMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               //${expire_time} -> underlying price
	EstimatedDeliveryPriceMap map[int64]*Money             `protobuf:"bytes,7,rep,name=estimatedDeliveryPriceMap,proto3" json:"estimatedDeliveryPriceMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //${expire_time} -> EDP
	UnderlyingOriginPriceMap  map[int64]*Money             `protobuf:"bytes,8,rep,name=underlyingOriginPriceMap,proto3" json:"underlyingOriginPriceMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   //${expire_time} -> underlying price 标的资产价格, 原始值，交割前30分钟未替换成EDP
	MarkIVMap                 map[string]*PrecisionDecimal `protobuf:"bytes,9,rep,name=markIVMap,proto3" json:"markIVMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GreeksMap                 map[string]*Greeks           `protobuf:"bytes,10,rep,name=greeksMap,proto3" json:"greeksMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnSmoothMarkIVMap         map[string]*PrecisionDecimal `protobuf:"bytes,11,rep,name=unSmoothMarkIVMap,proto3" json:"unSmoothMarkIVMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //未平滑markiv
	OrderBookPriceMap         map[string]*OrderBookPrice   `protobuf:"bytes,12,rep,name=orderBookPriceMap,proto3" json:"orderBookPriceMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //${symbol_name} -> orderBookItem
	ReqId                     string                       `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *QuotePrice) Reset() {
	*x = QuotePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotePrice) ProtoMessage() {}

func (x *QuotePrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotePrice.ProtoReflect.Descriptor instead.
func (*QuotePrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{10}
}

func (x *QuotePrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QuotePrice) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *QuotePrice) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *QuotePrice) GetIndexPrice() *Money {
	if x != nil {
		return x.IndexPrice
	}
	return nil
}

func (x *QuotePrice) GetMarkPriceMap() map[string]*Money {
	if x != nil {
		return x.MarkPriceMap
	}
	return nil
}

func (x *QuotePrice) GetUnderlyingPriceMap() map[int64]*Money {
	if x != nil {
		return x.UnderlyingPriceMap
	}
	return nil
}

func (x *QuotePrice) GetEstimatedDeliveryPriceMap() map[int64]*Money {
	if x != nil {
		return x.EstimatedDeliveryPriceMap
	}
	return nil
}

func (x *QuotePrice) GetUnderlyingOriginPriceMap() map[int64]*Money {
	if x != nil {
		return x.UnderlyingOriginPriceMap
	}
	return nil
}

func (x *QuotePrice) GetMarkIVMap() map[string]*PrecisionDecimal {
	if x != nil {
		return x.MarkIVMap
	}
	return nil
}

func (x *QuotePrice) GetGreeksMap() map[string]*Greeks {
	if x != nil {
		return x.GreeksMap
	}
	return nil
}

func (x *QuotePrice) GetUnSmoothMarkIVMap() map[string]*PrecisionDecimal {
	if x != nil {
		return x.UnSmoothMarkIVMap
	}
	return nil
}

func (x *QuotePrice) GetOrderBookPriceMap() map[string]*OrderBookPrice {
	if x != nil {
		return x.OrderBookPriceMap
	}
	return nil
}

func (x *QuotePrice) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// ob价格数据
type OrderBookPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestAsk     *PrecisionDecimal `protobuf:"bytes,1,opt,name=bestAsk,proto3" json:"bestAsk,omitempty"`
	BestAskSize *PrecisionDecimal `protobuf:"bytes,2,opt,name=bestAskSize,proto3" json:"bestAskSize,omitempty"`
	BestBid     *PrecisionDecimal `protobuf:"bytes,3,opt,name=bestBid,proto3" json:"bestBid,omitempty"`
	BestBidSize *PrecisionDecimal `protobuf:"bytes,4,opt,name=bestBidSize,proto3" json:"bestBidSize,omitempty"`
}

func (x *OrderBookPrice) Reset() {
	*x = OrderBookPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookPrice) ProtoMessage() {}

func (x *OrderBookPrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookPrice.ProtoReflect.Descriptor instead.
func (*OrderBookPrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{11}
}

func (x *OrderBookPrice) GetBestAsk() *PrecisionDecimal {
	if x != nil {
		return x.BestAsk
	}
	return nil
}

func (x *OrderBookPrice) GetBestAskSize() *PrecisionDecimal {
	if x != nil {
		return x.BestAskSize
	}
	return nil
}

func (x *OrderBookPrice) GetBestBid() *PrecisionDecimal {
	if x != nil {
		return x.BestBid
	}
	return nil
}

func (x *OrderBookPrice) GetBestBidSize() *PrecisionDecimal {
	if x != nil {
		return x.BestBidSize
	}
	return nil
}

// *
// 批量查询指数价格
// 最小批次查询同一个币种，同一到期日下所有期权的指数价格数据
type QuotePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`   //UNIX时间戳, 默认最新时间
	BaseCoin   string `protobuf:"bytes,2,opt,name=baseCoin,proto3" json:"baseCoin,omitempty"`      //标的币种，必须填
	QuoteCoin  string `protobuf:"bytes,3,opt,name=quoteCoin,proto3" json:"quoteCoin,omitempty"`    //结算币种，必须填
	ExpireTime int64  `protobuf:"varint,4,opt,name=expireTime,proto3" json:"expireTime,omitempty"` //到期时间，UNIX时间戳，秒，为空默认查询所有到期日期权数据
	ReqId      string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *QuotePriceRequest) Reset() {
	*x = QuotePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotePriceRequest) ProtoMessage() {}

func (x *QuotePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotePriceRequest.ProtoReflect.Descriptor instead.
func (*QuotePriceRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{12}
}

func (x *QuotePriceRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QuotePriceRequest) GetBaseCoin() string {
	if x != nil {
		return x.BaseCoin
	}
	return ""
}

func (x *QuotePriceRequest) GetQuoteCoin() string {
	if x != nil {
		return x.QuoteCoin
	}
	return ""
}

func (x *QuotePriceRequest) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *QuotePriceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// 统一行情价格req
type UnifyQuotePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 固定填0
	Timestamp          int64              `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	OptionPriceRequest *QuotePriceRequest `protobuf:"bytes,2,opt,name=optionPriceRequest,proto3" json:"optionPriceRequest,omitempty"`
	ReqId              string             `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *UnifyQuotePriceRequest) Reset() {
	*x = UnifyQuotePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifyQuotePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifyQuotePriceRequest) ProtoMessage() {}

func (x *UnifyQuotePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifyQuotePriceRequest.ProtoReflect.Descriptor instead.
func (*UnifyQuotePriceRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{13}
}

func (x *UnifyQuotePriceRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UnifyQuotePriceRequest) GetOptionPriceRequest() *QuotePriceRequest {
	if x != nil {
		return x.OptionPriceRequest
	}
	return nil
}

func (x *UnifyQuotePriceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *
// 统一行情价格
type UnifyQuotePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionPrice []*QuotePrice  `protobuf:"bytes,1,rep,name=optionPrice,proto3" json:"optionPrice,omitempty"`
	FuturePrice []*FuturePrice `protobuf:"bytes,2,rep,name=futurePrice,proto3" json:"futurePrice,omitempty"`
	ReqId       string         `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *UnifyQuotePrice) Reset() {
	*x = UnifyQuotePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifyQuotePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifyQuotePrice) ProtoMessage() {}

func (x *UnifyQuotePrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifyQuotePrice.ProtoReflect.Descriptor instead.
func (*UnifyQuotePrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{14}
}

func (x *UnifyQuotePrice) GetOptionPrice() []*QuotePrice {
	if x != nil {
		return x.OptionPrice
	}
	return nil
}

func (x *UnifyQuotePrice) GetFuturePrice() []*FuturePrice {
	if x != nil {
		return x.FuturePrice
	}
	return nil
}

func (x *UnifyQuotePrice) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *兑换率Req
type ExchangeRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 固定填0
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ReqId     string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *ExchangeRateRequest) Reset() {
	*x = ExchangeRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateRequest) ProtoMessage() {}

func (x *ExchangeRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateRequest.ProtoReflect.Descriptor instead.
func (*ExchangeRateRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{15}
}

func (x *ExchangeRateRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExchangeRateRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *兑换率Resp
type ExchangeRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统当前时间 (秒)
	Timestamp    int64           `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExchangeRate []*ExchangeRate `protobuf:"bytes,2,rep,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	ReqId        string          `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *ExchangeRateResponse) Reset() {
	*x = ExchangeRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateResponse) ProtoMessage() {}

func (x *ExchangeRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateResponse.ProtoReflect.Descriptor instead.
func (*ExchangeRateResponse) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{16}
}

func (x *ExchangeRateResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExchangeRateResponse) GetExchangeRate() []*ExchangeRate {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *ExchangeRateResponse) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// * 兑换率
type ExchangeRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 原始币种USDT/USDC/BTC/ETH
	FromCoin string `protobuf:"bytes,1,opt,name=fromCoin,proto3" json:"fromCoin,omitempty"`
	// 兑换币种USD
	ToCoin string            `protobuf:"bytes,2,opt,name=toCoin,proto3" json:"toCoin,omitempty"`
	Rate   *PrecisionDecimal `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	// 原始业务数据时间戳
	OriginalTimestamp int64 `protobuf:"varint,4,opt,name=originalTimestamp,proto3" json:"originalTimestamp,omitempty"`
}

func (x *ExchangeRate) Reset() {
	*x = ExchangeRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRate) ProtoMessage() {}

func (x *ExchangeRate) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRate.ProtoReflect.Descriptor instead.
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeRate) GetFromCoin() string {
	if x != nil {
		return x.FromCoin
	}
	return ""
}

func (x *ExchangeRate) GetToCoin() string {
	if x != nil {
		return x.ToCoin
	}
	return ""
}

func (x *ExchangeRate) GetRate() *PrecisionDecimal {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *ExchangeRate) GetOriginalTimestamp() int64 {
	if x != nil {
		return x.OriginalTimestamp
	}
	return 0
}

// *出售参考价Req
type SellReferencePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 固定填0
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ReqId     string `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *SellReferencePriceRequest) Reset() {
	*x = SellReferencePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellReferencePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellReferencePriceRequest) ProtoMessage() {}

func (x *SellReferencePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellReferencePriceRequest.ProtoReflect.Descriptor instead.
func (*SellReferencePriceRequest) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{18}
}

func (x *SellReferencePriceRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SellReferencePriceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// *出售参考价Resp
type SellReferencePriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统当前时间 (秒)
	Timestamp          int64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SellReferencePrice []*SellReferencePrice `protobuf:"bytes,2,rep,name=sellReferencePrice,proto3" json:"sellReferencePrice,omitempty"`
	ReqId              string                `protobuf:"bytes,100,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *SellReferencePriceResponse) Reset() {
	*x = SellReferencePriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellReferencePriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellReferencePriceResponse) ProtoMessage() {}

func (x *SellReferencePriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellReferencePriceResponse.ProtoReflect.Descriptor instead.
func (*SellReferencePriceResponse) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{19}
}

func (x *SellReferencePriceResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SellReferencePriceResponse) GetSellReferencePrice() []*SellReferencePrice {
	if x != nil {
		return x.SellReferencePrice
	}
	return nil
}

func (x *SellReferencePriceResponse) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// * 出售参考价
type SellReferencePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 原始币种
	FromCoin string `protobuf:"bytes,1,opt,name=fromCoin,proto3" json:"fromCoin,omitempty"`
	// 出售币种USD
	ToCoin string            `protobuf:"bytes,2,opt,name=toCoin,proto3" json:"toCoin,omitempty"`
	Rate   *PrecisionDecimal `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	// 原始业务数据时间戳
	OriginalTimestamp int64 `protobuf:"varint,4,opt,name=originalTimestamp,proto3" json:"originalTimestamp,omitempty"`
}

func (x *SellReferencePrice) Reset() {
	*x = SellReferencePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellReferencePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellReferencePrice) ProtoMessage() {}

func (x *SellReferencePrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellReferencePrice.ProtoReflect.Descriptor instead.
func (*SellReferencePrice) Descriptor() ([]byte, []int) {
	return file_price_service_proto_rawDescGZIP(), []int{20}
}

func (x *SellReferencePrice) GetFromCoin() string {
	if x != nil {
		return x.FromCoin
	}
	return ""
}

func (x *SellReferencePrice) GetToCoin() string {
	if x != nil {
		return x.ToCoin
	}
	return ""
}

func (x *SellReferencePrice) GetRate() *PrecisionDecimal {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *SellReferencePrice) GetOriginalTimestamp() int64 {
	if x != nil {
		return x.OriginalTimestamp
	}
	return 0
}

var File_price_service_proto protoreflect.FileDescriptor

var file_price_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x0f,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x15, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x16, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x06, 0x47, 0x72, 0x65, 0x65, 0x6b,
	0x73, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x61,
	0x6d, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x67, 0x61,
	0x6d, 0x6d, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x65, 0x67, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x76,
	0x65, 0x67, 0x61, 0x22, 0xaa, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x12, 0x1f,
	0x0a, 0x06, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x47, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x06, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x12,
	0x39, 0x0a, 0x0e, 0x75, 0x6e, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x49,
	0x56, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0e, 0x75, 0x6e, 0x53, 0x6d,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x22, 0xc8, 0x02, 0x0a, 0x0b, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb0, 0x0b, 0x0a, 0x0a,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x53, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x68, 0x0a, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x65,
	0x0a, 0x18, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x4d,
	0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x4d, 0x61, 0x70, 0x12,
	0x38, 0x0a, 0x09, 0x67, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x67, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x75, 0x6e, 0x53,
	0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x4d, 0x61, 0x70, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x6e, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x56,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x75, 0x6e, 0x53, 0x6d, 0x6f, 0x6f,
	0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x56, 0x4d, 0x61, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x1a, 0x47, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x17,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x1e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x53, 0x0a, 0x1d, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x56,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x65, 0x6b,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x47, 0x72, 0x65,
	0x65, 0x6b, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57,
	0x0a, 0x16, 0x55, 0x6e, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x56,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4,
	0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x33,
	0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x55, 0x6e,
	0x69, 0x66, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x42, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a,
	0x0f, 0x55, 0x6e, 0x69, 0x66, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2d, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x22, 0x7d, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22,
	0x97, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x53,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x32, 0x96, 0x04, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x66, 0x79,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x55, 0x6e, 0x69,
	0x66, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x1b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_price_service_proto_rawDescOnce sync.Once
	file_price_service_proto_rawDescData = file_price_service_proto_rawDesc
)

func file_price_service_proto_rawDescGZIP() []byte {
	file_price_service_proto_rawDescOnce.Do(func() {
		file_price_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_price_service_proto_rawDescData)
	})
	return file_price_service_proto_rawDescData
}

var file_price_service_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_price_service_proto_goTypes = []interface{}{
	(*UnderlyingPriceRequest)(nil),        // 0: UnderlyingPriceRequest
	(*UnderlyingPrice)(nil),               // 1: UnderlyingPrice
	(*IndexPriceRequest)(nil),             // 2: IndexPriceRequest
	(*IndexPrice)(nil),                    // 3: IndexPrice
	(*EstimatedDeliveryPriceRequest)(nil), // 4: EstimatedDeliveryPriceRequest
	(*EstimatedDeliveryPrice)(nil),        // 5: EstimatedDeliveryPrice
	(*MarkPriceRequest)(nil),              // 6: MarkPriceRequest
	(*Greeks)(nil),                        // 7: Greeks
	(*MarkPrice)(nil),                     // 8: MarkPrice
	(*FuturePrice)(nil),                   // 9: FuturePrice
	(*QuotePrice)(nil),                    // 10: QuotePrice
	(*OrderBookPrice)(nil),                // 11: OrderBookPrice
	(*QuotePriceRequest)(nil),             // 12: QuotePriceRequest
	(*UnifyQuotePriceRequest)(nil),        // 13: UnifyQuotePriceRequest
	(*UnifyQuotePrice)(nil),               // 14: UnifyQuotePrice
	(*ExchangeRateRequest)(nil),           // 15: ExchangeRateRequest
	(*ExchangeRateResponse)(nil),          // 16: ExchangeRateResponse
	(*ExchangeRate)(nil),                  // 17: ExchangeRate
	(*SellReferencePriceRequest)(nil),     // 18: SellReferencePriceRequest
	(*SellReferencePriceResponse)(nil),    // 19: SellReferencePriceResponse
	(*SellReferencePrice)(nil),            // 20: SellReferencePrice
	nil,                                   // 21: QuotePrice.MarkPriceMapEntry
	nil,                                   // 22: QuotePrice.UnderlyingPriceMapEntry
	nil,                                   // 23: QuotePrice.EstimatedDeliveryPriceMapEntry
	nil,                                   // 24: QuotePrice.UnderlyingOriginPriceMapEntry
	nil,                                   // 25: QuotePrice.MarkIVMapEntry
	nil,                                   // 26: QuotePrice.GreeksMapEntry
	nil,                                   // 27: QuotePrice.UnSmoothMarkIVMapEntry
	nil,                                   // 28: QuotePrice.OrderBookPriceMapEntry
	(*Money)(nil),                         // 29: Money
	(*PrecisionDecimal)(nil),              // 30: PrecisionDecimal
}
var file_price_service_proto_depIdxs = []int32{
	29, // 0: UnderlyingPrice.underlyingPrice:type_name -> Money
	29, // 1: UnderlyingPrice.underlyingOriginPrice:type_name -> Money
	29, // 2: IndexPrice.indexPrice:type_name -> Money
	29, // 3: EstimatedDeliveryPrice.estimatedDeliveryPrice:type_name -> Money
	30, // 4: Greeks.delta:type_name -> PrecisionDecimal
	30, // 5: Greeks.gamma:type_name -> PrecisionDecimal
	30, // 6: Greeks.theta:type_name -> PrecisionDecimal
	30, // 7: Greeks.vega:type_name -> PrecisionDecimal
	29, // 8: MarkPrice.markPrice:type_name -> Money
	30, // 9: MarkPrice.markIV:type_name -> PrecisionDecimal
	7,  // 10: MarkPrice.greeks:type_name -> Greeks
	30, // 11: MarkPrice.unSmoothMarkIV:type_name -> PrecisionDecimal
	30, // 12: FuturePrice.indexPrice:type_name -> PrecisionDecimal
	30, // 13: FuturePrice.markPrice:type_name -> PrecisionDecimal
	30, // 14: FuturePrice.lastPrice:type_name -> PrecisionDecimal
	29, // 15: QuotePrice.indexPrice:type_name -> Money
	21, // 16: QuotePrice.markPriceMap:type_name -> QuotePrice.MarkPriceMapEntry
	22, // 17: QuotePrice.underlyingPriceMap:type_name -> QuotePrice.UnderlyingPriceMapEntry
	23, // 18: QuotePrice.estimatedDeliveryPriceMap:type_name -> QuotePrice.EstimatedDeliveryPriceMapEntry
	24, // 19: QuotePrice.underlyingOriginPriceMap:type_name -> QuotePrice.UnderlyingOriginPriceMapEntry
	25, // 20: QuotePrice.markIVMap:type_name -> QuotePrice.MarkIVMapEntry
	26, // 21: QuotePrice.greeksMap:type_name -> QuotePrice.GreeksMapEntry
	27, // 22: QuotePrice.unSmoothMarkIVMap:type_name -> QuotePrice.UnSmoothMarkIVMapEntry
	28, // 23: QuotePrice.orderBookPriceMap:type_name -> QuotePrice.OrderBookPriceMapEntry
	30, // 24: OrderBookPrice.bestAsk:type_name -> PrecisionDecimal
	30, // 25: OrderBookPrice.bestAskSize:type_name -> PrecisionDecimal
	30, // 26: OrderBookPrice.bestBid:type_name -> PrecisionDecimal
	30, // 27: OrderBookPrice.bestBidSize:type_name -> PrecisionDecimal
	12, // 28: UnifyQuotePriceRequest.optionPriceRequest:type_name -> QuotePriceRequest
	10, // 29: UnifyQuotePrice.optionPrice:type_name -> QuotePrice
	9,  // 30: UnifyQuotePrice.futurePrice:type_name -> FuturePrice
	17, // 31: ExchangeRateResponse.exchangeRate:type_name -> ExchangeRate
	30, // 32: ExchangeRate.rate:type_name -> PrecisionDecimal
	20, // 33: SellReferencePriceResponse.sellReferencePrice:type_name -> SellReferencePrice
	30, // 34: SellReferencePrice.rate:type_name -> PrecisionDecimal
	29, // 35: QuotePrice.MarkPriceMapEntry.value:type_name -> Money
	29, // 36: QuotePrice.UnderlyingPriceMapEntry.value:type_name -> Money
	29, // 37: QuotePrice.EstimatedDeliveryPriceMapEntry.value:type_name -> Money
	29, // 38: QuotePrice.UnderlyingOriginPriceMapEntry.value:type_name -> Money
	30, // 39: QuotePrice.MarkIVMapEntry.value:type_name -> PrecisionDecimal
	7,  // 40: QuotePrice.GreeksMapEntry.value:type_name -> Greeks
	30, // 41: QuotePrice.UnSmoothMarkIVMapEntry.value:type_name -> PrecisionDecimal
	11, // 42: QuotePrice.OrderBookPriceMapEntry.value:type_name -> OrderBookPrice
	12, // 43: IndexPriceService.query:input_type -> QuotePriceRequest
	13, // 44: IndexPriceService.queryUnifyQuotePrice:input_type -> UnifyQuotePriceRequest
	15, // 45: IndexPriceService.queryExchangeRate:input_type -> ExchangeRateRequest
	18, // 46: IndexPriceService.querySellReferencePrice:input_type -> SellReferencePriceRequest
	0,  // 47: IndexPriceService.queryUnderlyingPrice:input_type -> UnderlyingPriceRequest
	2,  // 48: IndexPriceService.queryIndexPrice:input_type -> IndexPriceRequest
	6,  // 49: IndexPriceService.queryMarkPrice:input_type -> MarkPriceRequest
	4,  // 50: IndexPriceService.queryEstimatedDeliveryPrice:input_type -> EstimatedDeliveryPriceRequest
	10, // 51: IndexPriceService.query:output_type -> QuotePrice
	14, // 52: IndexPriceService.queryUnifyQuotePrice:output_type -> UnifyQuotePrice
	16, // 53: IndexPriceService.queryExchangeRate:output_type -> ExchangeRateResponse
	19, // 54: IndexPriceService.querySellReferencePrice:output_type -> SellReferencePriceResponse
	1,  // 55: IndexPriceService.queryUnderlyingPrice:output_type -> UnderlyingPrice
	3,  // 56: IndexPriceService.queryIndexPrice:output_type -> IndexPrice
	8,  // 57: IndexPriceService.queryMarkPrice:output_type -> MarkPrice
	5,  // 58: IndexPriceService.queryEstimatedDeliveryPrice:output_type -> EstimatedDeliveryPrice
	51, // [51:59] is the sub-list for method output_type
	43, // [43:51] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_price_service_proto_init() }
func file_price_service_proto_init() {
	if File_price_service_proto != nil {
		return
	}
	file_money_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_price_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderlyingPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderlyingPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimatedDeliveryPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimatedDeliveryPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Greeks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuturePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifyQuotePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifyQuotePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellReferencePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellReferencePriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellReferencePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_price_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_price_service_proto_goTypes,
		DependencyIndexes: file_price_service_proto_depIdxs,
		MessageInfos:      file_price_service_proto_msgTypes,
	}.Build()
	File_price_service_proto = out.File
	file_price_service_proto_rawDesc = nil
	file_price_service_proto_goTypes = nil
	file_price_service_proto_depIdxs = nil
}
