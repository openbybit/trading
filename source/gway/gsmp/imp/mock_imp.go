// Code generated by MockGen. DO NOT EDIT.
// Source: ./ImpSmpService_grpc.pb.go

// Package imp is a generated GoMock package.
package imp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockImpSmpServiceClient is a mock of ImpSmpServiceClient interface.
type MockImpSmpServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockImpSmpServiceClientMockRecorder
}

// MockImpSmpServiceClientMockRecorder is the mock recorder for MockImpSmpServiceClient.
type MockImpSmpServiceClientMockRecorder struct {
	mock *MockImpSmpServiceClient
}

// NewMockImpSmpServiceClient creates a new mock instance.
func NewMockImpSmpServiceClient(ctrl *gomock.Controller) *MockImpSmpServiceClient {
	mock := &MockImpSmpServiceClient{ctrl: ctrl}
	mock.recorder = &MockImpSmpServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImpSmpServiceClient) EXPECT() *MockImpSmpServiceClientMockRecorder {
	return m.recorder
}

// SmpGroupQuery mocks base method.
func (m *MockImpSmpServiceClient) SmpGroupQuery(ctx context.Context, in *SmpGroupQueryReq, opts ...grpc.CallOption) (*SmpGroupQueryResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SmpGroupQuery", varargs...)
	ret0, _ := ret[0].(*SmpGroupQueryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SmpGroupQuery indicates an expected call of SmpGroupQuery.
func (mr *MockImpSmpServiceClientMockRecorder) SmpGroupQuery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmpGroupQuery", reflect.TypeOf((*MockImpSmpServiceClient)(nil).SmpGroupQuery), varargs...)
}

// MockImpSmpServiceServer is a mock of ImpSmpServiceServer interface.
type MockImpSmpServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockImpSmpServiceServerMockRecorder
}

// MockImpSmpServiceServerMockRecorder is the mock recorder for MockImpSmpServiceServer.
type MockImpSmpServiceServerMockRecorder struct {
	mock *MockImpSmpServiceServer
}

// NewMockImpSmpServiceServer creates a new mock instance.
func NewMockImpSmpServiceServer(ctrl *gomock.Controller) *MockImpSmpServiceServer {
	mock := &MockImpSmpServiceServer{ctrl: ctrl}
	mock.recorder = &MockImpSmpServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImpSmpServiceServer) EXPECT() *MockImpSmpServiceServerMockRecorder {
	return m.recorder
}

// SmpGroupQuery mocks base method.
func (m *MockImpSmpServiceServer) SmpGroupQuery(arg0 context.Context, arg1 *SmpGroupQueryReq) (*SmpGroupQueryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmpGroupQuery", arg0, arg1)
	ret0, _ := ret[0].(*SmpGroupQueryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SmpGroupQuery indicates an expected call of SmpGroupQuery.
func (mr *MockImpSmpServiceServerMockRecorder) SmpGroupQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmpGroupQuery", reflect.TypeOf((*MockImpSmpServiceServer)(nil).SmpGroupQuery), arg0, arg1)
}

// mustEmbedUnimplementedImpSmpServiceServer mocks base method.
func (m *MockImpSmpServiceServer) mustEmbedUnimplementedImpSmpServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImpSmpServiceServer")
}

// mustEmbedUnimplementedImpSmpServiceServer indicates an expected call of mustEmbedUnimplementedImpSmpServiceServer.
func (mr *MockImpSmpServiceServerMockRecorder) mustEmbedUnimplementedImpSmpServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImpSmpServiceServer", reflect.TypeOf((*MockImpSmpServiceServer)(nil).mustEmbedUnimplementedImpSmpServiceServer))
}

// MockUnsafeImpSmpServiceServer is a mock of UnsafeImpSmpServiceServer interface.
type MockUnsafeImpSmpServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeImpSmpServiceServerMockRecorder
}

// MockUnsafeImpSmpServiceServerMockRecorder is the mock recorder for MockUnsafeImpSmpServiceServer.
type MockUnsafeImpSmpServiceServerMockRecorder struct {
	mock *MockUnsafeImpSmpServiceServer
}

// NewMockUnsafeImpSmpServiceServer creates a new mock instance.
func NewMockUnsafeImpSmpServiceServer(ctrl *gomock.Controller) *MockUnsafeImpSmpServiceServer {
	mock := &MockUnsafeImpSmpServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeImpSmpServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeImpSmpServiceServer) EXPECT() *MockUnsafeImpSmpServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedImpSmpServiceServer mocks base method.
func (m *MockUnsafeImpSmpServiceServer) mustEmbedUnimplementedImpSmpServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImpSmpServiceServer")
}

// mustEmbedUnimplementedImpSmpServiceServer indicates an expected call of mustEmbedUnimplementedImpSmpServiceServer.
func (mr *MockUnsafeImpSmpServiceServerMockRecorder) mustEmbedUnimplementedImpSmpServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImpSmpServiceServer", reflect.TypeOf((*MockUnsafeImpSmpServiceServer)(nil).mustEmbedUnimplementedImpSmpServiceServer))
}
