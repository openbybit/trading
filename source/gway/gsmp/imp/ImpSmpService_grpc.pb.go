// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ImpSmpService.proto

package imp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImpSmpServiceClient is the client API for ImpSmpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImpSmpServiceClient interface {
	//*
	//查询IMP设置的 apilimit
	SmpGroupQuery(ctx context.Context, in *SmpGroupQueryReq, opts ...grpc.CallOption) (*SmpGroupQueryResp, error)
}

type impSmpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImpSmpServiceClient(cc grpc.ClientConnInterface) ImpSmpServiceClient {
	return &impSmpServiceClient{cc}
}

func (c *impSmpServiceClient) SmpGroupQuery(ctx context.Context, in *SmpGroupQueryReq, opts ...grpc.CallOption) (*SmpGroupQueryResp, error) {
	out := new(SmpGroupQueryResp)
	err := c.cc.Invoke(ctx, "/ImpSmpService/SmpGroupQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpSmpServiceServer is the server API for ImpSmpService service.
// All implementations must embed UnimplementedImpSmpServiceServer
// for forward compatibility
type ImpSmpServiceServer interface {
	//*
	//查询IMP设置的 apilimit
	SmpGroupQuery(context.Context, *SmpGroupQueryReq) (*SmpGroupQueryResp, error)
	mustEmbedUnimplementedImpSmpServiceServer()
}

// UnimplementedImpSmpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImpSmpServiceServer struct {
}

func (UnimplementedImpSmpServiceServer) SmpGroupQuery(context.Context, *SmpGroupQueryReq) (*SmpGroupQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmpGroupQuery not implemented")
}
func (UnimplementedImpSmpServiceServer) mustEmbedUnimplementedImpSmpServiceServer() {}

// UnsafeImpSmpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpSmpServiceServer will
// result in compilation errors.
type UnsafeImpSmpServiceServer interface {
	mustEmbedUnimplementedImpSmpServiceServer()
}

func RegisterImpSmpServiceServer(s grpc.ServiceRegistrar, srv ImpSmpServiceServer) {
	s.RegisterService(&ImpSmpService_ServiceDesc, srv)
}

func _ImpSmpService_SmpGroupQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmpGroupQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpSmpServiceServer).SmpGroupQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImpSmpService/SmpGroupQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpSmpServiceServer).SmpGroupQuery(ctx, req.(*SmpGroupQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImpSmpService_ServiceDesc is the grpc.ServiceDesc for ImpSmpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImpSmpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImpSmpService",
	HandlerType: (*ImpSmpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SmpGroupQuery",
			Handler:    _ImpSmpService_SmpGroupQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ImpSmpService.proto",
}
